
Robotics 101 Devkit Coprocessor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016bac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08016d8c  08016d8c  00026d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016f38  08016f38  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  08016f38  08016f38  00026f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016f40  08016f40  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016f40  08016f40  00026f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016f44  08016f44  00026f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08016f48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000560c  20000074  08016fbc  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005680  08016fbc  00035680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00068bd5  00000000  00000000  000300e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ea77  00000000  00000000  00098cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b38  00000000  00000000  000a7738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ef2  00000000  00000000  000aa270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034c41  00000000  00000000  000ac162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005af31  00000000  00000000  000e0da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6baa  00000000  00000000  0013bcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009194  00000000  00000000  00232880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000131  00000000  00000000  0023ba14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016d74 	.word	0x08016d74

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08016d74 	.word	0x08016d74

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	; (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	; (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	; (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	; (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	; (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	; (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	2000390c 	.word	0x2000390c
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	; (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	; (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	; (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	; (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	; (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	200039a8 	.word	0x200039a8
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20003910 	.word	0x20003910
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20003914 	.word	0x20003914
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	20003f14 	.word	0x20003f14

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	; (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	; (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	; (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	; (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	; (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f010 fdd9 	bl	8010fb0 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f010 fd46 	bl	8010e94 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	; (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	; (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	; (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	200039b4 	.word	0x200039b4
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	20003f14 	.word	0x20003f14
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	200039b8 	.word	0x200039b8
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20003a44 	.word	0x20003a44
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20003a48 	.word	0x20003a48
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20003a40 	.word	0x20003a40
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20003a3c 	.word	0x20003a3c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	200039a8 	.word	0x200039a8
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20003910 	.word	0x20003910
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20003914 	.word	0x20003914
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <strlen>:
 8000458:	4603      	mov	r3, r0
 800045a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800045e:	2a00      	cmp	r2, #0
 8000460:	d1fb      	bne.n	800045a <strlen+0x2>
 8000462:	1a18      	subs	r0, r3, r0
 8000464:	3801      	subs	r0, #1
 8000466:	4770      	bx	lr

08000468 <__aeabi_uldivmod>:
 8000468:	b953      	cbnz	r3, 8000480 <__aeabi_uldivmod+0x18>
 800046a:	b94a      	cbnz	r2, 8000480 <__aeabi_uldivmod+0x18>
 800046c:	2900      	cmp	r1, #0
 800046e:	bf08      	it	eq
 8000470:	2800      	cmpeq	r0, #0
 8000472:	bf1c      	itt	ne
 8000474:	f04f 31ff 	movne.w	r1, #4294967295
 8000478:	f04f 30ff 	movne.w	r0, #4294967295
 800047c:	f000 b970 	b.w	8000760 <__aeabi_idiv0>
 8000480:	f1ad 0c08 	sub.w	ip, sp, #8
 8000484:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000488:	f000 f806 	bl	8000498 <__udivmoddi4>
 800048c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000494:	b004      	add	sp, #16
 8000496:	4770      	bx	lr

08000498 <__udivmoddi4>:
 8000498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800049c:	9e08      	ldr	r6, [sp, #32]
 800049e:	460d      	mov	r5, r1
 80004a0:	4604      	mov	r4, r0
 80004a2:	460f      	mov	r7, r1
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d14a      	bne.n	800053e <__udivmoddi4+0xa6>
 80004a8:	428a      	cmp	r2, r1
 80004aa:	4694      	mov	ip, r2
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0xe2>
 80004ae:	fab2 f382 	clz	r3, r2
 80004b2:	b143      	cbz	r3, 80004c6 <__udivmoddi4+0x2e>
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	f1c3 0220 	rsb	r2, r3, #32
 80004bc:	409f      	lsls	r7, r3
 80004be:	fa20 f202 	lsr.w	r2, r0, r2
 80004c2:	4317      	orrs	r7, r2
 80004c4:	409c      	lsls	r4, r3
 80004c6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ca:	fa1f f58c 	uxth.w	r5, ip
 80004ce:	fbb7 f1fe 	udiv	r1, r7, lr
 80004d2:	0c22      	lsrs	r2, r4, #16
 80004d4:	fb0e 7711 	mls	r7, lr, r1, r7
 80004d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80004dc:	fb01 f005 	mul.w	r0, r1, r5
 80004e0:	4290      	cmp	r0, r2
 80004e2:	d90a      	bls.n	80004fa <__udivmoddi4+0x62>
 80004e4:	eb1c 0202 	adds.w	r2, ip, r2
 80004e8:	f101 37ff 	add.w	r7, r1, #4294967295
 80004ec:	f080 811c 	bcs.w	8000728 <__udivmoddi4+0x290>
 80004f0:	4290      	cmp	r0, r2
 80004f2:	f240 8119 	bls.w	8000728 <__udivmoddi4+0x290>
 80004f6:	3902      	subs	r1, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a12      	subs	r2, r2, r0
 80004fc:	b2a4      	uxth	r4, r4
 80004fe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000502:	fb0e 2210 	mls	r2, lr, r0, r2
 8000506:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800050a:	fb00 f505 	mul.w	r5, r0, r5
 800050e:	42a5      	cmp	r5, r4
 8000510:	d90a      	bls.n	8000528 <__udivmoddi4+0x90>
 8000512:	eb1c 0404 	adds.w	r4, ip, r4
 8000516:	f100 32ff 	add.w	r2, r0, #4294967295
 800051a:	f080 8107 	bcs.w	800072c <__udivmoddi4+0x294>
 800051e:	42a5      	cmp	r5, r4
 8000520:	f240 8104 	bls.w	800072c <__udivmoddi4+0x294>
 8000524:	4464      	add	r4, ip
 8000526:	3802      	subs	r0, #2
 8000528:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800052c:	1b64      	subs	r4, r4, r5
 800052e:	2100      	movs	r1, #0
 8000530:	b11e      	cbz	r6, 800053a <__udivmoddi4+0xa2>
 8000532:	40dc      	lsrs	r4, r3
 8000534:	2300      	movs	r3, #0
 8000536:	e9c6 4300 	strd	r4, r3, [r6]
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	428b      	cmp	r3, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0xbc>
 8000542:	2e00      	cmp	r6, #0
 8000544:	f000 80ed 	beq.w	8000722 <__udivmoddi4+0x28a>
 8000548:	2100      	movs	r1, #0
 800054a:	e9c6 0500 	strd	r0, r5, [r6]
 800054e:	4608      	mov	r0, r1
 8000550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000554:	fab3 f183 	clz	r1, r3
 8000558:	2900      	cmp	r1, #0
 800055a:	d149      	bne.n	80005f0 <__udivmoddi4+0x158>
 800055c:	42ab      	cmp	r3, r5
 800055e:	d302      	bcc.n	8000566 <__udivmoddi4+0xce>
 8000560:	4282      	cmp	r2, r0
 8000562:	f200 80f8 	bhi.w	8000756 <__udivmoddi4+0x2be>
 8000566:	1a84      	subs	r4, r0, r2
 8000568:	eb65 0203 	sbc.w	r2, r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	4617      	mov	r7, r2
 8000570:	2e00      	cmp	r6, #0
 8000572:	d0e2      	beq.n	800053a <__udivmoddi4+0xa2>
 8000574:	e9c6 4700 	strd	r4, r7, [r6]
 8000578:	e7df      	b.n	800053a <__udivmoddi4+0xa2>
 800057a:	b902      	cbnz	r2, 800057e <__udivmoddi4+0xe6>
 800057c:	deff      	udf	#255	; 0xff
 800057e:	fab2 f382 	clz	r3, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	f040 8090 	bne.w	80006a8 <__udivmoddi4+0x210>
 8000588:	1a8a      	subs	r2, r1, r2
 800058a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800058e:	fa1f fe8c 	uxth.w	lr, ip
 8000592:	2101      	movs	r1, #1
 8000594:	fbb2 f5f7 	udiv	r5, r2, r7
 8000598:	fb07 2015 	mls	r0, r7, r5, r2
 800059c:	0c22      	lsrs	r2, r4, #16
 800059e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80005a2:	fb0e f005 	mul.w	r0, lr, r5
 80005a6:	4290      	cmp	r0, r2
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x124>
 80005aa:	eb1c 0202 	adds.w	r2, ip, r2
 80005ae:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b2:	d202      	bcs.n	80005ba <__udivmoddi4+0x122>
 80005b4:	4290      	cmp	r0, r2
 80005b6:	f200 80cb 	bhi.w	8000750 <__udivmoddi4+0x2b8>
 80005ba:	4645      	mov	r5, r8
 80005bc:	1a12      	subs	r2, r2, r0
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb2 f0f7 	udiv	r0, r2, r7
 80005c4:	fb07 2210 	mls	r2, r7, r0, r2
 80005c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005cc:	fb0e fe00 	mul.w	lr, lr, r0
 80005d0:	45a6      	cmp	lr, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x14e>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80005dc:	d202      	bcs.n	80005e4 <__udivmoddi4+0x14c>
 80005de:	45a6      	cmp	lr, r4
 80005e0:	f200 80bb 	bhi.w	800075a <__udivmoddi4+0x2c2>
 80005e4:	4610      	mov	r0, r2
 80005e6:	eba4 040e 	sub.w	r4, r4, lr
 80005ea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80005ee:	e79f      	b.n	8000530 <__udivmoddi4+0x98>
 80005f0:	f1c1 0720 	rsb	r7, r1, #32
 80005f4:	408b      	lsls	r3, r1
 80005f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80005fe:	fa05 f401 	lsl.w	r4, r5, r1
 8000602:	fa20 f307 	lsr.w	r3, r0, r7
 8000606:	40fd      	lsrs	r5, r7
 8000608:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800060c:	4323      	orrs	r3, r4
 800060e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000612:	fa1f fe8c 	uxth.w	lr, ip
 8000616:	fb09 5518 	mls	r5, r9, r8, r5
 800061a:	0c1c      	lsrs	r4, r3, #16
 800061c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000620:	fb08 f50e 	mul.w	r5, r8, lr
 8000624:	42a5      	cmp	r5, r4
 8000626:	fa02 f201 	lsl.w	r2, r2, r1
 800062a:	fa00 f001 	lsl.w	r0, r0, r1
 800062e:	d90b      	bls.n	8000648 <__udivmoddi4+0x1b0>
 8000630:	eb1c 0404 	adds.w	r4, ip, r4
 8000634:	f108 3aff 	add.w	sl, r8, #4294967295
 8000638:	f080 8088 	bcs.w	800074c <__udivmoddi4+0x2b4>
 800063c:	42a5      	cmp	r5, r4
 800063e:	f240 8085 	bls.w	800074c <__udivmoddi4+0x2b4>
 8000642:	f1a8 0802 	sub.w	r8, r8, #2
 8000646:	4464      	add	r4, ip
 8000648:	1b64      	subs	r4, r4, r5
 800064a:	b29d      	uxth	r5, r3
 800064c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000650:	fb09 4413 	mls	r4, r9, r3, r4
 8000654:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000658:	fb03 fe0e 	mul.w	lr, r3, lr
 800065c:	45a6      	cmp	lr, r4
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x1da>
 8000660:	eb1c 0404 	adds.w	r4, ip, r4
 8000664:	f103 35ff 	add.w	r5, r3, #4294967295
 8000668:	d26c      	bcs.n	8000744 <__udivmoddi4+0x2ac>
 800066a:	45a6      	cmp	lr, r4
 800066c:	d96a      	bls.n	8000744 <__udivmoddi4+0x2ac>
 800066e:	3b02      	subs	r3, #2
 8000670:	4464      	add	r4, ip
 8000672:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000676:	fba3 9502 	umull	r9, r5, r3, r2
 800067a:	eba4 040e 	sub.w	r4, r4, lr
 800067e:	42ac      	cmp	r4, r5
 8000680:	46c8      	mov	r8, r9
 8000682:	46ae      	mov	lr, r5
 8000684:	d356      	bcc.n	8000734 <__udivmoddi4+0x29c>
 8000686:	d053      	beq.n	8000730 <__udivmoddi4+0x298>
 8000688:	b156      	cbz	r6, 80006a0 <__udivmoddi4+0x208>
 800068a:	ebb0 0208 	subs.w	r2, r0, r8
 800068e:	eb64 040e 	sbc.w	r4, r4, lr
 8000692:	fa04 f707 	lsl.w	r7, r4, r7
 8000696:	40ca      	lsrs	r2, r1
 8000698:	40cc      	lsrs	r4, r1
 800069a:	4317      	orrs	r7, r2
 800069c:	e9c6 7400 	strd	r7, r4, [r6]
 80006a0:	4618      	mov	r0, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a8:	f1c3 0120 	rsb	r1, r3, #32
 80006ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80006b0:	fa20 f201 	lsr.w	r2, r0, r1
 80006b4:	fa25 f101 	lsr.w	r1, r5, r1
 80006b8:	409d      	lsls	r5, r3
 80006ba:	432a      	orrs	r2, r5
 80006bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006c0:	fa1f fe8c 	uxth.w	lr, ip
 80006c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80006c8:	fb07 1510 	mls	r5, r7, r0, r1
 80006cc:	0c11      	lsrs	r1, r2, #16
 80006ce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80006d2:	fb00 f50e 	mul.w	r5, r0, lr
 80006d6:	428d      	cmp	r5, r1
 80006d8:	fa04 f403 	lsl.w	r4, r4, r3
 80006dc:	d908      	bls.n	80006f0 <__udivmoddi4+0x258>
 80006de:	eb1c 0101 	adds.w	r1, ip, r1
 80006e2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006e6:	d22f      	bcs.n	8000748 <__udivmoddi4+0x2b0>
 80006e8:	428d      	cmp	r5, r1
 80006ea:	d92d      	bls.n	8000748 <__udivmoddi4+0x2b0>
 80006ec:	3802      	subs	r0, #2
 80006ee:	4461      	add	r1, ip
 80006f0:	1b49      	subs	r1, r1, r5
 80006f2:	b292      	uxth	r2, r2
 80006f4:	fbb1 f5f7 	udiv	r5, r1, r7
 80006f8:	fb07 1115 	mls	r1, r7, r5, r1
 80006fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000700:	fb05 f10e 	mul.w	r1, r5, lr
 8000704:	4291      	cmp	r1, r2
 8000706:	d908      	bls.n	800071a <__udivmoddi4+0x282>
 8000708:	eb1c 0202 	adds.w	r2, ip, r2
 800070c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000710:	d216      	bcs.n	8000740 <__udivmoddi4+0x2a8>
 8000712:	4291      	cmp	r1, r2
 8000714:	d914      	bls.n	8000740 <__udivmoddi4+0x2a8>
 8000716:	3d02      	subs	r5, #2
 8000718:	4462      	add	r2, ip
 800071a:	1a52      	subs	r2, r2, r1
 800071c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000720:	e738      	b.n	8000594 <__udivmoddi4+0xfc>
 8000722:	4631      	mov	r1, r6
 8000724:	4630      	mov	r0, r6
 8000726:	e708      	b.n	800053a <__udivmoddi4+0xa2>
 8000728:	4639      	mov	r1, r7
 800072a:	e6e6      	b.n	80004fa <__udivmoddi4+0x62>
 800072c:	4610      	mov	r0, r2
 800072e:	e6fb      	b.n	8000528 <__udivmoddi4+0x90>
 8000730:	4548      	cmp	r0, r9
 8000732:	d2a9      	bcs.n	8000688 <__udivmoddi4+0x1f0>
 8000734:	ebb9 0802 	subs.w	r8, r9, r2
 8000738:	eb65 0e0c 	sbc.w	lr, r5, ip
 800073c:	3b01      	subs	r3, #1
 800073e:	e7a3      	b.n	8000688 <__udivmoddi4+0x1f0>
 8000740:	4645      	mov	r5, r8
 8000742:	e7ea      	b.n	800071a <__udivmoddi4+0x282>
 8000744:	462b      	mov	r3, r5
 8000746:	e794      	b.n	8000672 <__udivmoddi4+0x1da>
 8000748:	4640      	mov	r0, r8
 800074a:	e7d1      	b.n	80006f0 <__udivmoddi4+0x258>
 800074c:	46d0      	mov	r8, sl
 800074e:	e77b      	b.n	8000648 <__udivmoddi4+0x1b0>
 8000750:	3d02      	subs	r5, #2
 8000752:	4462      	add	r2, ip
 8000754:	e732      	b.n	80005bc <__udivmoddi4+0x124>
 8000756:	4608      	mov	r0, r1
 8000758:	e70a      	b.n	8000570 <__udivmoddi4+0xd8>
 800075a:	4464      	add	r4, ip
 800075c:	3802      	subs	r0, #2
 800075e:	e742      	b.n	80005e6 <__udivmoddi4+0x14e>

08000760 <__aeabi_idiv0>:
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000770:	2334      	movs	r3, #52	; 0x34
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000778:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <tx_application_define+0x6c>)
 800077a:	4916      	ldr	r1, [pc, #88]	; (80007d4 <tx_application_define+0x70>)
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <tx_application_define+0x74>)
 800077e:	f010 fec1 	bl	8011504 <_txe_byte_pool_create>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d109      	bne.n	800079c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <tx_application_define+0x74>)
 800078a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800078c:	68b8      	ldr	r0, [r7, #8]
 800078e:	f000 f82b 	bl	80007e8 <App_ThreadX_Init>
 8000792:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800079a:	e7fe      	b.n	800079a <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800079c:	2334      	movs	r3, #52	; 0x34
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <tx_application_define+0x78>)
 80007a6:	490e      	ldr	r1, [pc, #56]	; (80007e0 <tx_application_define+0x7c>)
 80007a8:	480e      	ldr	r0, [pc, #56]	; (80007e4 <tx_application_define+0x80>)
 80007aa:	f010 feab 	bl	8011504 <_txe_byte_pool_create>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d109      	bne.n	80007c8 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <tx_application_define+0x80>)
 80007b6:	60bb      	str	r3, [r7, #8]
    status = MX_USBX_Device_Init(memory_ptr);
 80007b8:	68b8      	ldr	r0, [r7, #8]
 80007ba:	f015 f861 	bl	8015880 <MX_USBX_Device_Init>
 80007be:	60f8      	str	r0, [r7, #12]
    if (status != UX_SUCCESS)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d000      	beq.n	80007c8 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_USBX_Device_Init_Error */
      while(1)
 80007c6:	e7fe      	b.n	80007c6 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000090 	.word	0x20000090
 80007d4:	08016d8c 	.word	0x08016d8c
 80007d8:	20000890 	.word	0x20000890
 80007dc:	200008c4 	.word	0x200008c4
 80007e0:	08016da0 	.word	0x08016da0
 80007e4:	200030c4 	.word	0x200030c4

080007e8 <App_ThreadX_Init>:
 * @brief  Application ThreadX Initialization.
 * @param memory_ptr: memory pointer
 * @retval int
 */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08e      	sub	sp, #56	; 0x38
 80007ec:	af08      	add	r7, sp, #32
 80007ee:	6078      	str	r0, [r7, #4]
	UINT ret = TX_SUCCESS;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
	TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	613b      	str	r3, [r7, #16]

	/* USER CODE END App_ThreadX_MEM_POOL */
	CHAR *pointer;

	/* Allocate the stack for tx app thread  */
	if (tx_byte_allocate(byte_pool, (VOID**) &pointer,
 80007f8:	f107 010c 	add.w	r1, r7, #12
 80007fc:	2300      	movs	r3, #0
 80007fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000802:	6938      	ldr	r0, [r7, #16]
 8000804:	f010 fe0a 	bl	801141c <_txe_byte_allocate>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <App_ThreadX_Init+0x2a>
			TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
	{
		return TX_POOL_ERROR;
 800080e:	2302      	movs	r3, #2
 8000810:	e024      	b.n	800085c <App_ThreadX_Init+0x74>
	}
	/* Create tx app thread.  */
	if (tx_thread_create(&tx_app_thread, "tx app thread", tx_app_thread_entry, 0, pointer,
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	22b0      	movs	r2, #176	; 0xb0
 8000816:	9206      	str	r2, [sp, #24]
 8000818:	2201      	movs	r2, #1
 800081a:	9205      	str	r2, [sp, #20]
 800081c:	2200      	movs	r2, #0
 800081e:	9204      	str	r2, [sp, #16]
 8000820:	220f      	movs	r2, #15
 8000822:	9203      	str	r2, [sp, #12]
 8000824:	220f      	movs	r2, #15
 8000826:	9202      	str	r2, [sp, #8]
 8000828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800082c:	9201      	str	r2, [sp, #4]
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2300      	movs	r3, #0
 8000832:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <App_ThreadX_Init+0x7c>)
 8000834:	490c      	ldr	r1, [pc, #48]	; (8000868 <App_ThreadX_Init+0x80>)
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <App_ThreadX_Init+0x84>)
 8000838:	f011 fabe 	bl	8011db8 <_txe_thread_create>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <App_ThreadX_Init+0x5e>
			TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
			TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS)
	{
		return TX_THREAD_ERROR;
 8000842:	230e      	movs	r3, #14
 8000844:	e00a      	b.n	800085c <App_ThreadX_Init+0x74>
	}

	/* USER CODE BEGIN App_ThreadX_Init */

	/* Create the message flags group */
	if (tx_event_flags_create(&MessageFlag, "Message Flag") != TX_SUCCESS)
 8000846:	2224      	movs	r2, #36	; 0x24
 8000848:	4909      	ldr	r1, [pc, #36]	; (8000870 <App_ThreadX_Init+0x88>)
 800084a:	480a      	ldr	r0, [pc, #40]	; (8000874 <App_ThreadX_Init+0x8c>)
 800084c:	f010 fefa 	bl	8011644 <_txe_event_flags_create>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <App_ThreadX_Init+0x72>
	{
		return TX_GROUP_ERROR;
 8000856:	2306      	movs	r3, #6
 8000858:	e000      	b.n	800085c <App_ThreadX_Init+0x74>
	}

	/* USER CODE END App_ThreadX_Init */

	return ret;
 800085a:	697b      	ldr	r3, [r7, #20]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	08000879 	.word	0x08000879
 8000868:	08016db4 	.word	0x08016db4
 800086c:	200030f8 	.word	0x200030f8
 8000870:	08016dc4 	.word	0x08016dc4
 8000874:	200031a8 	.word	0x200031a8

08000878 <tx_app_thread_entry>:
 * @brief  Function implementing the tx_app_thread_entry thread.
 * @param  thread_input: Hardcoded to 0.
 * @retval None
 */
void tx_app_thread_entry(ULONG thread_input)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af02      	add	r7, sp, #8
 800087e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN tx_app_thread_entry */

	ULONG messageReceivedFlag = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]

	uint8_t messageTopic;
	uint8_t messageData;

	uint8_t motor1_pwm_value = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	75fb      	strb	r3, [r7, #23]
	uint8_t motor2_pwm_value = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	75bb      	strb	r3, [r7, #22]
	uint8_t motor1_dir = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	757b      	strb	r3, [r7, #21]
	uint8_t motor2_dir = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	753b      	strb	r3, [r7, #20]

	/* Enable I2C slave mode */
	HAL_I2C_EnableListen_IT(&hi2c1);
 8000894:	484b      	ldr	r0, [pc, #300]	; (80009c4 <tx_app_thread_entry+0x14c>)
 8000896:	f003 ff3f 	bl	8004718 <HAL_I2C_EnableListen_IT>

	/* Set motors to idle, turn off LED */
	reset_extra_functions();
 800089a:	f000 f913 	bl	8000ac4 <reset_extra_functions>

	/* Begin the main loop */
	while (1){

		/* Wait until the requested flag NEW_MESSAGE_RECEIVED is received */
		if (tx_event_flags_get(&MessageFlag, NEW_MESSAGE_RECEIVED, TX_OR_CLEAR,
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	f04f 32ff 	mov.w	r2, #4294967295
 80008a6:	9200      	str	r2, [sp, #0]
 80008a8:	2201      	movs	r2, #1
 80008aa:	2101      	movs	r1, #1
 80008ac:	4846      	ldr	r0, [pc, #280]	; (80009c8 <tx_app_thread_entry+0x150>)
 80008ae:	f010 ff5b 	bl	8011768 <_txe_event_flags_get>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <tx_app_thread_entry+0x44>
				&messageReceivedFlag, TX_WAIT_FOREVER) != TX_SUCCESS)
		{
			Error_Handler();
 80008b8:	f001 f8d8 	bl	8001a6c <Error_Handler>
		}

		/* Process the message */
		messageTopic = RxData[0];
 80008bc:	4b43      	ldr	r3, [pc, #268]	; (80009cc <tx_app_thread_entry+0x154>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	74fb      	strb	r3, [r7, #19]
		messageData = RxData[1];
 80008c2:	4b42      	ldr	r3, [pc, #264]	; (80009cc <tx_app_thread_entry+0x154>)
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	74bb      	strb	r3, [r7, #18]

		switch (messageTopic)
 80008c8:	7cfb      	ldrb	r3, [r7, #19]
 80008ca:	3b40      	subs	r3, #64	; 0x40
 80008cc:	2b0c      	cmp	r3, #12
 80008ce:	d8e6      	bhi.n	800089e <tx_app_thread_entry+0x26>
 80008d0:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <tx_app_thread_entry+0x60>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	0800090d 	.word	0x0800090d
 80008dc:	0800092f 	.word	0x0800092f
 80008e0:	08000953 	.word	0x08000953
 80008e4:	08000977 	.word	0x08000977
 80008e8:	0800099b 	.word	0x0800099b
 80008ec:	0800089f 	.word	0x0800089f
 80008f0:	0800089f 	.word	0x0800089f
 80008f4:	0800089f 	.word	0x0800089f
 80008f8:	0800089f 	.word	0x0800089f
 80008fc:	0800089f 	.word	0x0800089f
 8000900:	0800089f 	.word	0x0800089f
 8000904:	0800089f 	.word	0x0800089f
 8000908:	0800089f 	.word	0x0800089f
		{

		/* Process LED message */
		case MESSAGE_TOPIC_LED:
			if (messageData != 0x00){
 800090c:	7cbb      	ldrb	r3, [r7, #18]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d006      	beq.n	8000920 <tx_app_thread_entry+0xa8>
				HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000918:	482d      	ldr	r0, [pc, #180]	; (80009d0 <tx_app_thread_entry+0x158>)
 800091a:	f003 fd99 	bl	8004450 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
			}
			break;
 800091e:	e04f      	b.n	80009c0 <tx_app_thread_entry+0x148>
				HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000926:	482a      	ldr	r0, [pc, #168]	; (80009d0 <tx_app_thread_entry+0x158>)
 8000928:	f003 fd92 	bl	8004450 <HAL_GPIO_WritePin>
			break;
 800092c:	e048      	b.n	80009c0 <tx_app_thread_entry+0x148>

			/* Process MOTOR1_EN message */
		case MESSAGE_TOPIC_MOTOR1_EN:

			/* Enable motor 1 if this is the first time a motor 1 command is sent */
			if (motor1_enable == 0){
 800092e:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <tx_app_thread_entry+0x15c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d104      	bne.n	8000940 <tx_app_thread_entry+0xc8>
				motor1_start();
 8000936:	f000 f909 	bl	8000b4c <motor1_start>
				motor1_enable = 1;
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <tx_app_thread_entry+0x15c>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
			}

			/* Set motor pwm values */
			motor1_pwm_value = messageData;
 8000940:	7cbb      	ldrb	r3, [r7, #18]
 8000942:	75fb      	strb	r3, [r7, #23]
			motor1_update(motor1_pwm_value, motor1_dir);
 8000944:	7d7a      	ldrb	r2, [r7, #21]
 8000946:	7dfb      	ldrb	r3, [r7, #23]
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f92a 	bl	8000ba4 <motor1_update>

			break;
 8000950:	e036      	b.n	80009c0 <tx_app_thread_entry+0x148>

		case MESSAGE_TOPIC_MOTOR1_DIR:

			/* Enable motor 1 if this is the first time a motor 1 command is sent */
			if (motor1_enable == 0){
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <tx_app_thread_entry+0x15c>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d104      	bne.n	8000964 <tx_app_thread_entry+0xec>
				motor1_start();
 800095a:	f000 f8f7 	bl	8000b4c <motor1_start>
				motor1_enable = 1;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <tx_app_thread_entry+0x15c>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
			}

			/* Set motor pwm values */
			motor1_dir = messageData;
 8000964:	7cbb      	ldrb	r3, [r7, #18]
 8000966:	757b      	strb	r3, [r7, #21]
			motor1_update(motor1_pwm_value, motor1_dir);
 8000968:	7d7a      	ldrb	r2, [r7, #21]
 800096a:	7dfb      	ldrb	r3, [r7, #23]
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f918 	bl	8000ba4 <motor1_update>

			break;
 8000974:	e024      	b.n	80009c0 <tx_app_thread_entry+0x148>

		case MESSAGE_TOPIC_MOTOR2_EN:

			/* Enable motor 2 if this is the first time a motor 2 command is sent */
			if (motor2_enable == 0){
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <tx_app_thread_entry+0x160>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d104      	bne.n	8000988 <tx_app_thread_entry+0x110>
				motor2_start();
 800097e:	f000 f8fb 	bl	8000b78 <motor2_start>
				motor2_enable = 1;
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <tx_app_thread_entry+0x160>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
			}

			/* Set motor pwm values */
			motor2_pwm_value = messageData;
 8000988:	7cbb      	ldrb	r3, [r7, #18]
 800098a:	75bb      	strb	r3, [r7, #22]
			motor2_update(motor2_pwm_value, motor2_dir);
 800098c:	7d3a      	ldrb	r2, [r7, #20]
 800098e:	7dbb      	ldrb	r3, [r7, #22]
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f92e 	bl	8000bf4 <motor2_update>

			break;
 8000998:	e012      	b.n	80009c0 <tx_app_thread_entry+0x148>

		case MESSAGE_TOPIC_MOTOR2_DIR:

			/* Enable motor 2 if this is the first time a motor 2 command is sent */
			if (motor2_enable == 0){
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <tx_app_thread_entry+0x160>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d104      	bne.n	80009ac <tx_app_thread_entry+0x134>
				motor2_start();
 80009a2:	f000 f8e9 	bl	8000b78 <motor2_start>
				motor2_enable = 1;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <tx_app_thread_entry+0x160>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
			}

			/* Set motor pwm values */
			motor2_dir = messageData;
 80009ac:	7cbb      	ldrb	r3, [r7, #18]
 80009ae:	753b      	strb	r3, [r7, #20]
			motor2_update(motor2_pwm_value, motor2_dir);
 80009b0:	7d3a      	ldrb	r2, [r7, #20]
 80009b2:	7dbb      	ldrb	r3, [r7, #22]
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f91c 	bl	8000bf4 <motor2_update>

			break;
 80009bc:	bf00      	nop
 80009be:	e76e      	b.n	800089e <tx_app_thread_entry+0x26>
		if (tx_event_flags_get(&MessageFlag, NEW_MESSAGE_RECEIVED, TX_OR_CLEAR,
 80009c0:	e76d      	b.n	800089e <tx_app_thread_entry+0x26>
 80009c2:	bf00      	nop
 80009c4:	20003240 	.word	0x20003240
 80009c8:	200031a8 	.word	0x200031a8
 80009cc:	200031d0 	.word	0x200031d0
 80009d0:	48000800 	.word	0x48000800
 80009d4:	200031d2 	.word	0x200031d2
 80009d8:	200031d3 	.word	0x200031d3

080009dc <MX_ThreadX_Init>:
 * @brief  Function that implements the kernel's initialization.
 * @param  None
 * @retval None
 */
void MX_ThreadX_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN  Before_Kernel_Start */

	/* USER CODE END  Before_Kernel_Start */

	tx_kernel_enter();
 80009e0:	f00e fcbe 	bl	800f360 <_tx_initialize_kernel_enter>

	/* USER CODE BEGIN  Kernel_Start_Error */

	/* USER CODE END  Kernel_Start_Error */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <HAL_I2C_ListenCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f003 fe91 	bl	8004718 <HAL_I2C_EnableListen_IT>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	803b      	strh	r3, [r7, #0]
	if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d10c      	bne.n	8000a30 <HAL_I2C_AddrCallback+0x30>
	{

		/* Reset counter at start of transmission */
		rxcount = 0;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_I2C_AddrCallback+0x38>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]

		/* receive using sequential function. */
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_I2C_AddrCallback+0x38>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_I2C_AddrCallback+0x3c>)
 8000a24:	18d1      	adds	r1, r2, r3
 8000a26:	2300      	movs	r3, #0
 8000a28:	2201      	movs	r2, #1
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f003 fdd0 	bl	80045d0 <HAL_I2C_Slave_Seq_Receive_IT>
	}
	else  // master requesting the data is not supported yet
	{
		//		Error_Handler();
	}
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200031cc 	.word	0x200031cc
 8000a3c:	200031d0 	.word	0x200031d0

08000a40 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

	/* Increment the counter */
	rxcount++;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000a52:	701a      	strb	r2, [r3, #0]

	/* If message in progress */
	if (rxcount < I2C_MESSAGE_SIZE)
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d81b      	bhi.n	8000a94 <HAL_I2C_SlaveRxCpltCallback+0x54>
	{
		if (rxcount == I2C_MESSAGE_SIZE-1)
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d10b      	bne.n	8000a7c <HAL_I2C_SlaveRxCpltCallback+0x3c>
		{
			/* Receive the last byte */
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_LAST_FRAME);
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8000a6c:	18d1      	adds	r1, r2, r3
 8000a6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a72:	2201      	movs	r2, #1
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f003 fdab 	bl	80045d0 <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	//	/*  Roll back the counter if gets larger than I2C_MESSAGE_SIZE */
	//	if (rxcount >= I2C_MESSAGE_SIZE) rxcount = 0;
}
 8000a7a:	e019      	b.n	8000ab0 <HAL_I2C_SlaveRxCpltCallback+0x70>
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_NEXT_FRAME);
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8000a84:	18d1      	adds	r1, r2, r3
 8000a86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f003 fd9f 	bl	80045d0 <HAL_I2C_Slave_Seq_Receive_IT>
}
 8000a92:	e00d      	b.n	8000ab0 <HAL_I2C_SlaveRxCpltCallback+0x70>
	else if (rxcount == I2C_MESSAGE_SIZE)
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d109      	bne.n	8000ab0 <HAL_I2C_SlaveRxCpltCallback+0x70>
		if (tx_event_flags_set(&MessageFlag, NEW_MESSAGE_RECEIVED, TX_OR) != TX_SUCCESS)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <HAL_I2C_SlaveRxCpltCallback+0x80>)
 8000aa2:	f010 feb7 	bl	8011814 <_txe_event_flags_set>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_I2C_SlaveRxCpltCallback+0x70>
			Error_Handler();
 8000aac:	f000 ffde 	bl	8001a6c <Error_Handler>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200031cc 	.word	0x200031cc
 8000abc:	200031d0 	.word	0x200031d0
 8000ac0:	200031a8 	.word	0x200031a8

08000ac4 <reset_extra_functions>:

void reset_extra_functions(){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ace:	480c      	ldr	r0, [pc, #48]	; (8000b00 <reset_extra_functions+0x3c>)
 8000ad0:	f003 fcbe 	bl	8004450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_SLEEP_GPIO_Port, MOTOR_SLEEP_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	480a      	ldr	r0, [pc, #40]	; (8000b04 <reset_extra_functions+0x40>)
 8000ada:	f003 fcb9 	bl	8004450 <HAL_GPIO_WritePin>
	motor1_update(0, 0);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f000 f85f 	bl	8000ba4 <motor1_update>
	motor2_update(0, 0);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 f883 	bl	8000bf4 <motor2_update>
	motor1_enable = 0;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <reset_extra_functions+0x44>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
	motor2_enable = 0;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <reset_extra_functions+0x48>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	48000800 	.word	0x48000800
 8000b04:	48001400 	.word	0x48001400
 8000b08:	200031d2 	.word	0x200031d2
 8000b0c:	200031d3 	.word	0x200031d3

08000b10 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f003 fece 	bl	80048ba <HAL_I2C_GetError>
 8000b1e:	60f8      	str	r0, [r7, #12]

	/* AF Error indicates transmission is over */
	if (errorcode == HAL_I2C_ERROR_AF)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d109      	bne.n	8000b3a <HAL_I2C_ErrorCallback+0x2a>
	{
		/* Set NEW_MESSAGE_RECEIVED flag */
		if (tx_event_flags_set(&MessageFlag, NEW_MESSAGE_RECEIVED, TX_OR) != TX_SUCCESS)
 8000b26:	2200      	movs	r2, #0
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4807      	ldr	r0, [pc, #28]	; (8000b48 <HAL_I2C_ErrorCallback+0x38>)
 8000b2c:	f010 fe72 	bl	8011814 <_txe_event_flags_set>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_I2C_ErrorCallback+0x2a>
		{
			Error_Handler();
 8000b36:	f000 ff99 	bl	8001a6c <Error_Handler>
		}
	}

	HAL_I2C_EnableListen_IT(hi2c);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f003 fdec 	bl	8004718 <HAL_I2C_EnableListen_IT>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200031a8 	.word	0x200031a8

08000b4c <motor1_start>:

void motor1_start(){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); /* M1_IN1 */
 8000b50:	2100      	movs	r1, #0
 8000b52:	4807      	ldr	r0, [pc, #28]	; (8000b70 <motor1_start+0x24>)
 8000b54:	f007 fe6e 	bl	8008834 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); /* M1_IN2 */
 8000b58:	2104      	movs	r1, #4
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <motor1_start+0x24>)
 8000b5c:	f007 fe6a 	bl	8008834 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(MOTOR_SLEEP_GPIO_Port, MOTOR_SLEEP_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2101      	movs	r1, #1
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <motor1_start+0x28>)
 8000b66:	f003 fc73 	bl	8004450 <HAL_GPIO_WritePin>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200032d8 	.word	0x200032d8
 8000b74:	48001400 	.word	0x48001400

08000b78 <motor2_start>:

void motor2_start(){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); /* M2_IN1 */
 8000b7c:	2108      	movs	r1, #8
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <motor2_start+0x24>)
 8000b80:	f007 fe58 	bl	8008834 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); /* M2_IN2 */
 8000b84:	2104      	movs	r1, #4
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <motor2_start+0x24>)
 8000b88:	f007 fe54 	bl	8008834 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(MOTOR_SLEEP_GPIO_Port, MOTOR_SLEEP_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <motor2_start+0x28>)
 8000b92:	f003 fc5d 	bl	8004450 <HAL_GPIO_WritePin>
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200033bc 	.word	0x200033bc
 8000ba0:	48001400 	.word	0x48001400

08000ba4 <motor1_update>:

void motor1_update(uint8_t pwm_value, uint8_t dir){
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	460a      	mov	r2, r1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	71bb      	strb	r3, [r7, #6]
	if (dir == 0){
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10a      	bne.n	8000bd0 <motor1_update+0x2c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0xFF - pwm_value);	/* M1_IN1 */
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <motor1_update+0x4c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0xFF); /* M1_IN2 */
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <motor1_update+0x4c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	22ff      	movs	r2, #255	; 0xff
 8000bcc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0xFF);	/* M1_IN1 */
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0xFF - pwm_value); /* M1_IN2 */
	}
}
 8000bce:	e009      	b.n	8000be4 <motor1_update+0x40>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0xFF);	/* M1_IN1 */
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <motor1_update+0x4c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	22ff      	movs	r2, #255	; 0xff
 8000bd6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0xFF - pwm_value); /* M1_IN2 */
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <motor1_update+0x4c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	200032d8 	.word	0x200032d8

08000bf4 <motor2_update>:

void motor2_update(uint8_t pwm_value, uint8_t dir){
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	460a      	mov	r2, r1
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	4613      	mov	r3, r2
 8000c02:	71bb      	strb	r3, [r7, #6]
	if (dir == 0){
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d10a      	bne.n	8000c20 <motor2_update+0x2c>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0xFF - pwm_value);	/* M2_IN1 */
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <motor2_update+0x4c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0xFF); /* M2_IN2 */
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <motor2_update+0x4c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	22ff      	movs	r2, #255	; 0xff
 8000c1c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0xFF);	/* M2_IN1 */
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0xFF - pwm_value); /* M2_IN2 */
	}
}
 8000c1e:	e009      	b.n	8000c34 <motor2_update+0x40>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0xFF);	/* M2_IN1 */
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <motor2_update+0x4c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	22ff      	movs	r2, #255	; 0xff
 8000c26:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0xFF - pwm_value); /* M2_IN2 */
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <motor2_update+0x4c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	200033bc 	.word	0x200033bc

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c48:	f001 fbf9 	bl	800243e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4c:	f000 f82e 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c50:	f000 fdc4 	bl	80017dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000c54:	f000 fd98 	bl	8001788 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c58:	f000 f918 	bl	8000e8c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c5c:	f000 fa1e 	bl	800109c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c60:	f000 fa9c 	bl	800119c <MX_TIM3_Init>
  MX_TIM8_Init();
 8000c64:	f000 fb60 	bl	8001328 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000c68:	f000 f898 	bl	8000d9c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c6c:	f000 f94e 	bl	8000f0c <MX_TIM1_Init>
  MX_TIM15_Init();
 8000c70:	f000 fc16 	bl	80014a0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000c74:	f000 fc9a 	bl	80015ac <MX_TIM16_Init>
  MX_TIM7_Init();
 8000c78:	f000 fb1e 	bl	80012b8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	/* Start pins in known states */
	HAL_GPIO_WritePin(ESP32_IO0_GPIO_Port, ESP32_IO0_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2120      	movs	r1, #32
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c84:	f003 fbe4 	bl	8004450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <main+0x60>)
 8000c90:	f003 fbde 	bl	8004450 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(MOTOR_SLEEP_GPIO_Port, MOTOR_SLEEP_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2101      	movs	r1, #1
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <main+0x64>)
 8000c9a:	f003 fbd9 	bl	8004450 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000c9e:	f7ff fe9d 	bl	80009dc <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <main+0x5e>
 8000ca4:	48000800 	.word	0x48000800
 8000ca8:	48001400 	.word	0x48001400

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b09a      	sub	sp, #104	; 0x68
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb6:	2238      	movs	r2, #56	; 0x38
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f016 f82e 	bl	8016d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_CRSInitTypeDef pInit = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f006 fc23 	bl	800752c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000ce6:	2322      	movs	r3, #34	; 0x22
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf0:	2340      	movs	r3, #64	; 0x40
 8000cf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000d00:	2306      	movs	r3, #6
 8000d02:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000d04:	2378      	movs	r3, #120	; 0x78
 8000d06:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f006 fcab 	bl	8007674 <HAL_RCC_OscConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000d24:	f000 fea2 	bl	8001a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d28:	230f      	movs	r3, #15
 8000d2a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	2104      	movs	r1, #4
 8000d42:	4618      	mov	r0, r3
 8000d44:	f006 ffae 	bl	8007ca4 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d4e:	f000 fe8d 	bl	8001a6c <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <SystemClock_Config+0xec>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <SystemClock_Config+0xec>)
 8000d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <SystemClock_Config+0xec>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
  */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
  pInit.Source = RCC_CRS_SYNC_SOURCE_USB;
 8000d6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d72:	60bb      	str	r3, [r7, #8]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8000d78:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8000d7c:	613b      	str	r3, [r7, #16]
  pInit.ErrorLimitValue = 34;
 8000d7e:	2322      	movs	r3, #34	; 0x22
 8000d80:	617b      	str	r3, [r7, #20]
  pInit.HSI48CalibrationValue = 32;
 8000d82:	2320      	movs	r3, #32
 8000d84:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&pInit);
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f007 fbc9 	bl	8008520 <HAL_RCCEx_CRSConfig>
}
 8000d8e:	bf00      	nop
 8000d90:	3768      	adds	r7, #104	; 0x68
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2220      	movs	r2, #32
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f015 ffb1 	bl	8016d1c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000dbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000dc4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ddc:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de2:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e24:	4817      	ldr	r0, [pc, #92]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000e26:	f001 fd67 	bl	80028f8 <HAL_ADC_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e30:	f000 fe1c 	bl	8001a6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000e40:	f002 fafa 	bl	8003438 <HAL_ADCEx_MultiModeConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e4a:	f000 fe0f 	bl	8001a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_ADC1_Init+0xec>)
 8000e50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e52:	2306      	movs	r3, #6
 8000e54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5a:	237f      	movs	r3, #127	; 0x7f
 8000e5c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_ADC1_Init+0xe8>)
 8000e6c:	f001 fece 	bl	8002c0c <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e76:	f000 fdf9 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	; 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200031d4 	.word	0x200031d4
 8000e88:	2e300800 	.word	0x2e300800

08000e8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <MX_I2C1_Init+0x78>)
 8000e94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <MX_I2C1_Init+0x7c>)
 8000e9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000e9e:	2224      	movs	r2, #36	; 0x24
 8000ea0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ec8:	f003 faf2 	bl	80044b0 <HAL_I2C_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ed2:	f000 fdcb 	bl	8001a6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eda:	f004 fd21 	bl	8005920 <HAL_I2CEx_ConfigAnalogFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ee4:	f000 fdc2 	bl	8001a6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eec:	f004 fd63 	bl	80059b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 fdb9 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20003240 	.word	0x20003240
 8000f04:	40005400 	.word	0x40005400
 8000f08:	30909dec 	.word	0x30909dec

08000f0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b09c      	sub	sp, #112	; 0x70
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2234      	movs	r2, #52	; 0x34
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f015 fee8 	bl	8016d1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4c:	4b51      	ldr	r3, [pc, #324]	; (8001094 <MX_TIM1_Init+0x188>)
 8000f4e:	4a52      	ldr	r2, [pc, #328]	; (8001098 <MX_TIM1_Init+0x18c>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f52:	4b50      	ldr	r3, [pc, #320]	; (8001094 <MX_TIM1_Init+0x188>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b4e      	ldr	r3, [pc, #312]	; (8001094 <MX_TIM1_Init+0x188>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f5e:	4b4d      	ldr	r3, [pc, #308]	; (8001094 <MX_TIM1_Init+0x188>)
 8000f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <MX_TIM1_Init+0x188>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6c:	4b49      	ldr	r3, [pc, #292]	; (8001094 <MX_TIM1_Init+0x188>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b48      	ldr	r3, [pc, #288]	; (8001094 <MX_TIM1_Init+0x188>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f78:	4846      	ldr	r0, [pc, #280]	; (8001094 <MX_TIM1_Init+0x188>)
 8000f7a:	f007 fb13 	bl	80085a4 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f84:	f000 fd72 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f92:	4619      	mov	r1, r3
 8000f94:	483f      	ldr	r0, [pc, #252]	; (8001094 <MX_TIM1_Init+0x188>)
 8000f96:	f007 ffe1 	bl	8008f5c <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fa0:	f000 fd64 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fa4:	483b      	ldr	r0, [pc, #236]	; (8001094 <MX_TIM1_Init+0x188>)
 8000fa6:	f007 fbee 	bl	8008786 <HAL_TIM_PWM_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fb0:	f000 fd5c 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4833      	ldr	r0, [pc, #204]	; (8001094 <MX_TIM1_Init+0x188>)
 8000fc8:	f008 fd32 	bl	8009a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fd2:	f000 fd4b 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd6:	2360      	movs	r3, #96	; 0x60
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4826      	ldr	r0, [pc, #152]	; (8001094 <MX_TIM1_Init+0x188>)
 8000ffc:	f007 fe9a 	bl	8008d34 <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001006:	f000 fd31 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800100a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800100e:	2204      	movs	r2, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4820      	ldr	r0, [pc, #128]	; (8001094 <MX_TIM1_Init+0x188>)
 8001014:	f007 fe8e 	bl	8008d34 <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800101e:	f000 fd25 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001022:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001026:	2208      	movs	r2, #8
 8001028:	4619      	mov	r1, r3
 800102a:	481a      	ldr	r0, [pc, #104]	; (8001094 <MX_TIM1_Init+0x188>)
 800102c:	f007 fe82 	bl	8008d34 <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001036:	f000 fd19 	bl	8001a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800104e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001052:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4619      	mov	r1, r3
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <MX_TIM1_Init+0x188>)
 8001078:	f008 fd5c 	bl	8009b34 <HAL_TIMEx_ConfigBreakDeadTime>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001082:	f000 fcf3 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <MX_TIM1_Init+0x188>)
 8001088:	f000 fea4 	bl	8001dd4 <HAL_TIM_MspPostInit>

}
 800108c:	bf00      	nop
 800108e:	3770      	adds	r7, #112	; 0x70
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000328c 	.word	0x2000328c
 8001098:	40012c00 	.word	0x40012c00

0800109c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08e      	sub	sp, #56	; 0x38
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010bc:	463b      	mov	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	615a      	str	r2, [r3, #20]
 80010cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ce:	4b32      	ldr	r3, [pc, #200]	; (8001198 <MX_TIM2_Init+0xfc>)
 80010d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <MX_TIM2_Init+0xfc>)
 80010d8:	2205      	movs	r2, #5
 80010da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <MX_TIM2_Init+0xfc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_TIM2_Init+0xfc>)
 80010e4:	22ff      	movs	r2, #255	; 0xff
 80010e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <MX_TIM2_Init+0xfc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_TIM2_Init+0xfc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f4:	4828      	ldr	r0, [pc, #160]	; (8001198 <MX_TIM2_Init+0xfc>)
 80010f6:	f007 fa55 	bl	80085a4 <HAL_TIM_Base_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001100:	f000 fcb4 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800110a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110e:	4619      	mov	r1, r3
 8001110:	4821      	ldr	r0, [pc, #132]	; (8001198 <MX_TIM2_Init+0xfc>)
 8001112:	f007 ff23 	bl	8008f5c <HAL_TIM_ConfigClockSource>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800111c:	f000 fca6 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001120:	481d      	ldr	r0, [pc, #116]	; (8001198 <MX_TIM2_Init+0xfc>)
 8001122:	f007 fb30 	bl	8008786 <HAL_TIM_PWM_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800112c:	f000 fc9e 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4816      	ldr	r0, [pc, #88]	; (8001198 <MX_TIM2_Init+0xfc>)
 8001140:	f008 fc76 	bl	8009a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800114a:	f000 fc8f 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114e:	2360      	movs	r3, #96	; 0x60
 8001150:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_TIM2_Init+0xfc>)
 8001166:	f007 fde5 	bl	8008d34 <HAL_TIM_PWM_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001170:	f000 fc7c 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	2204      	movs	r2, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <MX_TIM2_Init+0xfc>)
 800117c:	f007 fdda 	bl	8008d34 <HAL_TIM_PWM_ConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001186:	f000 fc71 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <MX_TIM2_Init+0xfc>)
 800118c:	f000 fe22 	bl	8001dd4 <HAL_TIM_MspPostInit>

}
 8001190:	bf00      	nop
 8001192:	3738      	adds	r7, #56	; 0x38
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200032d8 	.word	0x200032d8

0800119c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <MX_TIM3_Init+0x114>)
 80011d0:	4a38      	ldr	r2, [pc, #224]	; (80012b4 <MX_TIM3_Init+0x118>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011d4:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <MX_TIM3_Init+0x114>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <MX_TIM3_Init+0x114>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011e0:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <MX_TIM3_Init+0x114>)
 80011e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <MX_TIM3_Init+0x114>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <MX_TIM3_Init+0x114>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f4:	482e      	ldr	r0, [pc, #184]	; (80012b0 <MX_TIM3_Init+0x114>)
 80011f6:	f007 f9d5 	bl	80085a4 <HAL_TIM_Base_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001200:	f000 fc34 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800120a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120e:	4619      	mov	r1, r3
 8001210:	4827      	ldr	r0, [pc, #156]	; (80012b0 <MX_TIM3_Init+0x114>)
 8001212:	f007 fea3 	bl	8008f5c <HAL_TIM_ConfigClockSource>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800121c:	f000 fc26 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001220:	4823      	ldr	r0, [pc, #140]	; (80012b0 <MX_TIM3_Init+0x114>)
 8001222:	f007 fab0 	bl	8008786 <HAL_TIM_PWM_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800122c:	f000 fc1e 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	481c      	ldr	r0, [pc, #112]	; (80012b0 <MX_TIM3_Init+0x114>)
 8001240:	f008 fbf6 	bl	8009a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800124a:	f000 fc0f 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	; 0x60
 8001250:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4812      	ldr	r0, [pc, #72]	; (80012b0 <MX_TIM3_Init+0x114>)
 8001266:	f007 fd65 	bl	8008d34 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001270:	f000 fbfc 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	2204      	movs	r2, #4
 8001278:	4619      	mov	r1, r3
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_TIM3_Init+0x114>)
 800127c:	f007 fd5a 	bl	8008d34 <HAL_TIM_PWM_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001286:	f000 fbf1 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	2208      	movs	r2, #8
 800128e:	4619      	mov	r1, r3
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_TIM3_Init+0x114>)
 8001292:	f007 fd4f 	bl	8008d34 <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800129c:	f000 fbe6 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <MX_TIM3_Init+0x114>)
 80012a2:	f000 fd97 	bl	8001dd4 <HAL_TIM_MspPostInit>

}
 80012a6:	bf00      	nop
 80012a8:	3738      	adds	r7, #56	; 0x38
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20003324 	.word	0x20003324
 80012b4:	40000400 	.word	0x40000400

080012b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM7_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_TIM7_Init+0x68>)
 80012ca:	4a16      	ldr	r2, [pc, #88]	; (8001324 <MX_TIM7_Init+0x6c>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15999;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_TIM7_Init+0x68>)
 80012d0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80012d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_TIM7_Init+0x68>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_TIM7_Init+0x68>)
 80012de:	f242 720f 	movw	r2, #9999	; 0x270f
 80012e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_TIM7_Init+0x68>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_TIM7_Init+0x68>)
 80012ec:	f007 f95a 	bl	80085a4 <HAL_TIM_Base_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80012f6:	f000 fbb9 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_TIM7_Init+0x68>)
 8001308:	f008 fb92 	bl	8009a30 <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001312:	f000 fbab 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20003370 	.word	0x20003370
 8001324:	40001400 	.word	0x40001400

08001328 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM8_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b09c      	sub	sp, #112	; 0x70
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001348:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	615a      	str	r2, [r3, #20]
 800135a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2234      	movs	r2, #52	; 0x34
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f015 fcda 	bl	8016d1c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <MX_TIM8_Init+0x170>)
 800136a:	4a4c      	ldr	r2, [pc, #304]	; (800149c <MX_TIM8_Init+0x174>)
 800136c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5;
 800136e:	4b4a      	ldr	r3, [pc, #296]	; (8001498 <MX_TIM8_Init+0x170>)
 8001370:	2205      	movs	r2, #5
 8001372:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <MX_TIM8_Init+0x170>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 255;
 800137a:	4b47      	ldr	r3, [pc, #284]	; (8001498 <MX_TIM8_Init+0x170>)
 800137c:	22ff      	movs	r2, #255	; 0xff
 800137e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001380:	4b45      	ldr	r3, [pc, #276]	; (8001498 <MX_TIM8_Init+0x170>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001386:	4b44      	ldr	r3, [pc, #272]	; (8001498 <MX_TIM8_Init+0x170>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <MX_TIM8_Init+0x170>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001392:	4841      	ldr	r0, [pc, #260]	; (8001498 <MX_TIM8_Init+0x170>)
 8001394:	f007 f906 	bl	80085a4 <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800139e:	f000 fb65 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013ac:	4619      	mov	r1, r3
 80013ae:	483a      	ldr	r0, [pc, #232]	; (8001498 <MX_TIM8_Init+0x170>)
 80013b0:	f007 fdd4 	bl	8008f5c <HAL_TIM_ConfigClockSource>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80013ba:	f000 fb57 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80013be:	4836      	ldr	r0, [pc, #216]	; (8001498 <MX_TIM8_Init+0x170>)
 80013c0:	f007 f9e1 	bl	8008786 <HAL_TIM_PWM_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80013ca:	f000 fb4f 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013de:	4619      	mov	r1, r3
 80013e0:	482d      	ldr	r0, [pc, #180]	; (8001498 <MX_TIM8_Init+0x170>)
 80013e2:	f008 fb25 	bl	8009a30 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80013ec:	f000 fb3e 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f0:	2360      	movs	r3, #96	; 0x60
 80013f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f8:	2300      	movs	r3, #0
 80013fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013fc:	2300      	movs	r3, #0
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800140c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001410:	2204      	movs	r2, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4820      	ldr	r0, [pc, #128]	; (8001498 <MX_TIM8_Init+0x170>)
 8001416:	f007 fc8d 	bl	8008d34 <HAL_TIM_PWM_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001420:	f000 fb24 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001424:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001428:	2208      	movs	r2, #8
 800142a:	4619      	mov	r1, r3
 800142c:	481a      	ldr	r0, [pc, #104]	; (8001498 <MX_TIM8_Init+0x170>)
 800142e:	f007 fc81 	bl	8008d34 <HAL_TIM_PWM_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8001438:	f000 fb18 	bl	8001a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001454:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4807      	ldr	r0, [pc, #28]	; (8001498 <MX_TIM8_Init+0x170>)
 800147a:	f008 fb5b 	bl	8009b34 <HAL_TIMEx_ConfigBreakDeadTime>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM8_Init+0x160>
  {
    Error_Handler();
 8001484:	f000 faf2 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <MX_TIM8_Init+0x170>)
 800148a:	f000 fca3 	bl	8001dd4 <HAL_TIM_MspPostInit>

}
 800148e:	bf00      	nop
 8001490:	3770      	adds	r7, #112	; 0x70
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200033bc 	.word	0x200033bc
 800149c:	40013400 	.word	0x40013400

080014a0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b098      	sub	sp, #96	; 0x60
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	615a      	str	r2, [r3, #20]
 80014c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2234      	movs	r2, #52	; 0x34
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f015 fc25 	bl	8016d1c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014d2:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <MX_TIM15_Init+0x104>)
 80014d4:	4a34      	ldr	r2, [pc, #208]	; (80015a8 <MX_TIM15_Init+0x108>)
 80014d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <MX_TIM15_Init+0x104>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <MX_TIM15_Init+0x104>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <MX_TIM15_Init+0x104>)
 80014e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <MX_TIM15_Init+0x104>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <MX_TIM15_Init+0x104>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_TIM15_Init+0x104>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80014fe:	4829      	ldr	r0, [pc, #164]	; (80015a4 <MX_TIM15_Init+0x104>)
 8001500:	f007 f941 	bl	8008786 <HAL_TIM_PWM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800150a:	f000 faaf 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001516:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800151a:	4619      	mov	r1, r3
 800151c:	4821      	ldr	r0, [pc, #132]	; (80015a4 <MX_TIM15_Init+0x104>)
 800151e:	f008 fa87 	bl	8009a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001528:	f000 faa0 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152c:	2360      	movs	r3, #96	; 0x60
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001534:	2300      	movs	r3, #0
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001548:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800154c:	2204      	movs	r2, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4814      	ldr	r0, [pc, #80]	; (80015a4 <MX_TIM15_Init+0x104>)
 8001552:	f007 fbef 	bl	8008d34 <HAL_TIM_PWM_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800155c:	f000 fa86 	bl	8001a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001578:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_TIM15_Init+0x104>)
 8001588:	f008 fad4 	bl	8009b34 <HAL_TIMEx_ConfigBreakDeadTime>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001592:	f000 fa6b 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001596:	4803      	ldr	r0, [pc, #12]	; (80015a4 <MX_TIM15_Init+0x104>)
 8001598:	f000 fc1c 	bl	8001dd4 <HAL_TIM_MspPostInit>

}
 800159c:	bf00      	nop
 800159e:	3760      	adds	r7, #96	; 0x60
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20003408 	.word	0x20003408
 80015a8:	40014000 	.word	0x40014000

080015ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b094      	sub	sp, #80	; 0x50
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015c6:	463b      	mov	r3, r7
 80015c8:	2234      	movs	r2, #52	; 0x34
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f015 fba5 	bl	8016d1c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <MX_TIM16_Init+0xec>)
 80015d4:	4a31      	ldr	r2, [pc, #196]	; (800169c <MX_TIM16_Init+0xf0>)
 80015d6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80015d8:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <MX_TIM16_Init+0xec>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <MX_TIM16_Init+0xec>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <MX_TIM16_Init+0xec>)
 80015e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <MX_TIM16_Init+0xec>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MX_TIM16_Init+0xec>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <MX_TIM16_Init+0xec>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015fe:	4826      	ldr	r0, [pc, #152]	; (8001698 <MX_TIM16_Init+0xec>)
 8001600:	f006 ffd0 	bl	80085a4 <HAL_TIM_Base_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800160a:	f000 fa2f 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800160e:	4822      	ldr	r0, [pc, #136]	; (8001698 <MX_TIM16_Init+0xec>)
 8001610:	f007 f8b9 	bl	8008786 <HAL_TIM_PWM_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800161a:	f000 fa27 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800161e:	2360      	movs	r3, #96	; 0x60
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001626:	2300      	movs	r3, #0
 8001628:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800162a:	2300      	movs	r3, #0
 800162c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800163e:	2200      	movs	r2, #0
 8001640:	4619      	mov	r1, r3
 8001642:	4815      	ldr	r0, [pc, #84]	; (8001698 <MX_TIM16_Init+0xec>)
 8001644:	f007 fb76 	bl	8008d34 <HAL_TIM_PWM_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800164e:	f000 fa0d 	bl	8001a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	4619      	mov	r1, r3
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM16_Init+0xec>)
 800167a:	f008 fa5b 	bl	8009b34 <HAL_TIMEx_ConfigBreakDeadTime>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001684:	f000 f9f2 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM16_Init+0xec>)
 800168a:	f000 fba3 	bl	8001dd4 <HAL_TIM_MspPostInit>

}
 800168e:	bf00      	nop
 8001690:	3750      	adds	r7, #80	; 0x50
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20003454 	.word	0x20003454
 800169c:	40014400 	.word	0x40014400

080016a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016a6:	4a23      	ldr	r2, [pc, #140]	; (8001734 <MX_USART2_UART_Init+0x94>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016e8:	4811      	ldr	r0, [pc, #68]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016ea:	f008 fb09 	bl	8009d00 <HAL_UART_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016f4:	f000 f9ba 	bl	8001a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f8:	2100      	movs	r1, #0
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_USART2_UART_Init+0x90>)
 80016fc:	f00a fb85 	bl	800be0a <HAL_UARTEx_SetTxFifoThreshold>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001706:	f000 f9b1 	bl	8001a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170a:	2100      	movs	r1, #0
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <MX_USART2_UART_Init+0x90>)
 800170e:	f00a fbba 	bl	800be86 <HAL_UARTEx_SetRxFifoThreshold>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001718:	f000 f9a8 	bl	8001a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_USART2_UART_Init+0x90>)
 800171e:	f00a fb3b 	bl	800bd98 <HAL_UARTEx_DisableFifoMode>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001728:	f000 f9a0 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200034a0 	.word	0x200034a0
 8001734:	40004400 	.word	0x40004400

08001738 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_PCD_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_USB_PCD_Init+0x48>)
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <MX_USB_PCD_Init+0x4c>)
 8001740:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <MX_USB_PCD_Init+0x48>)
 8001744:	2208      	movs	r2, #8
 8001746:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <MX_USB_PCD_Init+0x48>)
 800174a:	2202      	movs	r2, #2
 800174c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_USB_PCD_Init+0x48>)
 8001750:	2202      	movs	r2, #2
 8001752:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <MX_USB_PCD_Init+0x48>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_USB_PCD_Init+0x48>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <MX_USB_PCD_Init+0x48>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_USB_PCD_Init+0x48>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <MX_USB_PCD_Init+0x48>)
 800176e:	f004 f96e 	bl	8005a4e <HAL_PCD_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001778:	f000 f978 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20003590 	.word	0x20003590
 8001784:	40005c00 	.word	0x40005c00

08001788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MX_DMA_Init+0x50>)
 8001790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <MX_DMA_Init+0x50>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6493      	str	r3, [r2, #72]	; 0x48
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_DMA_Init+0x50>)
 800179c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_DMA_Init+0x50>)
 80017a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <MX_DMA_Init+0x50>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6493      	str	r3, [r2, #72]	; 0x48
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_DMA_Init+0x50>)
 80017b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2105      	movs	r1, #5
 80017c2:	200b      	movs	r0, #11
 80017c4:	f001 ffcf 	bl	8003766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017c8:	200b      	movs	r0, #11
 80017ca:	f001 ffe6 	bl	800379a <HAL_NVIC_EnableIRQ>

}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <MX_GPIO_Init+0x118>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	4a3f      	ldr	r2, [pc, #252]	; (80018f4 <MX_GPIO_Init+0x118>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <MX_GPIO_Init+0x118>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <MX_GPIO_Init+0x118>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	4a39      	ldr	r2, [pc, #228]	; (80018f4 <MX_GPIO_Init+0x118>)
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <MX_GPIO_Init+0x118>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <MX_GPIO_Init+0x118>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	4a33      	ldr	r2, [pc, #204]	; (80018f4 <MX_GPIO_Init+0x118>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182e:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <MX_GPIO_Init+0x118>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <MX_GPIO_Init+0x118>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <MX_GPIO_Init+0x118>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <MX_GPIO_Init+0x118>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001858:	4827      	ldr	r0, [pc, #156]	; (80018f8 <MX_GPIO_Init+0x11c>)
 800185a:	f002 fdf9 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_SLEEP_GPIO_Port, MOTOR_SLEEP_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2101      	movs	r1, #1
 8001862:	4826      	ldr	r0, [pc, #152]	; (80018fc <MX_GPIO_Init+0x120>)
 8001864:	f002 fdf4 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_IO0_GPIO_Port, ESP32_IO0_Pin, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	2120      	movs	r1, #32
 800186c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001870:	f002 fdee 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8001874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	481a      	ldr	r0, [pc, #104]	; (80018f8 <MX_GPIO_Init+0x11c>)
 800188e:	f002 fb7b 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_SLEEP_Pin */
  GPIO_InitStruct.Pin = MOTOR_SLEEP_Pin;
 8001892:	2301      	movs	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_SLEEP_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4814      	ldr	r0, [pc, #80]	; (80018fc <MX_GPIO_Init+0x120>)
 80018aa:	f002 fb6d 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP32_IO0_Pin */
  GPIO_InitStruct.Pin = ESP32_IO0_Pin;
 80018ae:	2320      	movs	r3, #32
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018b2:	2311      	movs	r3, #17
 80018b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP32_IO0_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f002 fb5e 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80018cc:	2350      	movs	r3, #80	; 0x50
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d0:	2303      	movs	r3, #3
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4808      	ldr	r0, [pc, #32]	; (8001900 <MX_GPIO_Init+0x124>)
 80018e0:	f002 fb52 	bl	8003f88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

	ESP32_EN_switch(ESP32_EN_INT);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f80d 	bl	8001904 <ESP32_EN_switch>

/* USER CODE END MX_GPIO_Init_2 */
}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	48000800 	.word	0x48000800
 80018fc:	48001400 	.word	0x48001400
 8001900:	48000400 	.word	0x48000400

08001904 <ESP32_EN_switch>:

/* USER CODE BEGIN 4 */

void ESP32_EN_switch(uint8_t mode){
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]

//	printf(mode);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]

	/* De-initialise pin if initialised */
	if ((ESP32_EN_state != ESP32_EN_NOPUT) && (ESP32_EN_state != mode)){
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <ESP32_EN_switch+0xf8>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <ESP32_EN_switch+0x36>
 8001926:	4b35      	ldr	r3, [pc, #212]	; (80019fc <ESP32_EN_switch+0xf8>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	79fa      	ldrb	r2, [r7, #7]
 800192c:	429a      	cmp	r2, r3
 800192e:	d004      	beq.n	800193a <ESP32_EN_switch+0x36>
		HAL_GPIO_DeInit(ESP32_EN_GPIO_Port, ESP32_EN_Pin);
 8001930:	2110      	movs	r1, #16
 8001932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001936:	f002 fca9 	bl	800428c <HAL_GPIO_DeInit>
	}

	/* Disable interrupt if enabled */
	if ((ESP32_EN_state == ESP32_EN_INT) && (mode != ESP32_EN_INT)){
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <ESP32_EN_switch+0xf8>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d105      	bne.n	800194e <ESP32_EN_switch+0x4a>
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d002      	beq.n	800194e <ESP32_EN_switch+0x4a>
		HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8001948:	200a      	movs	r0, #10
 800194a:	f001 ff34 	bl	80037b6 <HAL_NVIC_DisableIRQ>
	}

	/* Configure ESP32_EN as an input */
	if ((mode == ESP32_EN_INPUT) && (ESP32_EN_state != ESP32_EN_INPUT)){
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d114      	bne.n	800197e <ESP32_EN_switch+0x7a>
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <ESP32_EN_switch+0xf8>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d010      	beq.n	800197e <ESP32_EN_switch+0x7a>

		/*Configure GPIO pins : ESP32_EN_Pin */
		GPIO_InitStruct.Pin = ESP32_EN_Pin;
 800195c:	2310      	movs	r3, #16
 800195e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4619      	mov	r1, r3
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f002 fb09 	bl	8003f88 <HAL_GPIO_Init>

		ESP32_EN_state = ESP32_EN_INPUT;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <ESP32_EN_switch+0xf8>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	e03a      	b.n	80019f4 <ESP32_EN_switch+0xf0>
	}

	/* Configure ESP32_EN as an output */
	else if ((mode == ESP32_EN_OUTPUT) && (ESP32_EN_state != ESP32_EN_OUTPUT)){
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d116      	bne.n	80019b2 <ESP32_EN_switch+0xae>
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <ESP32_EN_switch+0xf8>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d012      	beq.n	80019b2 <ESP32_EN_switch+0xae>

		/*Configure GPIO pins : ESP32_EN_Pin */
		GPIO_InitStruct.Pin = ESP32_EN_Pin;
 800198c:	2310      	movs	r3, #16
 800198e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001990:	2311      	movs	r3, #17
 8001992:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a6:	f002 faef 	bl	8003f88 <HAL_GPIO_Init>

		ESP32_EN_state = ESP32_EN_OUTPUT;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <ESP32_EN_switch+0xf8>)
 80019ac:	2202      	movs	r2, #2
 80019ae:	701a      	strb	r2, [r3, #0]
 80019b0:	e020      	b.n	80019f4 <ESP32_EN_switch+0xf0>
	}

	/* Configure ESP32_EN as an external interrupt */
	else if ((mode == ESP32_EN_INT) && (ESP32_EN_state != ESP32_EN_INT)){
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d11d      	bne.n	80019f4 <ESP32_EN_switch+0xf0>
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <ESP32_EN_switch+0xf8>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d019      	beq.n	80019f4 <ESP32_EN_switch+0xf0>

		/*Configure GPIO pin : ESP32_EN_Pin */
		GPIO_InitStruct.Pin = ESP32_EN_Pin;
 80019c0:	2310      	movs	r3, #16
 80019c2:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019c8:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d8:	f002 fad6 	bl	8003f88 <HAL_GPIO_Init>

		/* EXTI interrupt init */
		HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	200a      	movs	r0, #10
 80019e2:	f001 fec0 	bl	8003766 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019e6:	200a      	movs	r0, #10
 80019e8:	f001 fed7 	bl	800379a <HAL_NVIC_EnableIRQ>

		ESP32_EN_state = ESP32_EN_INT;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <ESP32_EN_switch+0xf8>)
 80019ee:	2203      	movs	r2, #3
 80019f0:	701a      	strb	r2, [r3, #0]
	}
}
 80019f2:	e7ff      	b.n	80019f4 <ESP32_EN_switch+0xf0>
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20003884 	.word	0x20003884

08001a00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
	/* Trigger a system reset when ESP32_EN interrupt fires */
    if(GPIO_Pin == ESP32_EN_Pin)
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	2b10      	cmp	r3, #16
 8001a0e:	d101      	bne.n	8001a14 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	HAL_NVIC_SystemReset();
 8001a10:	f001 fedf 	bl	80037d2 <HAL_NVIC_SystemReset>
    }
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a2e:	f000 fd1f 	bl	8002470 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	/* Timer 7 is used to delay a reset signal to ESP32 */

	if (htim->Instance == TIM7) {
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d10c      	bne.n	8001a56 <HAL_TIM_PeriodElapsedCallback+0x3a>
		HAL_TIM_Base_Stop_IT(&htim7);
 8001a3c:	480a      	ldr	r0, [pc, #40]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a3e:	f006 fe73 	bl	8008728 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim7, 0);
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_GPIO_WritePin(ESP32_IO0_GPIO_Port, ESP32_IO0_Pin, GPIO_PIN_SET);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a52:	f002 fcfd 	bl	8004450 <HAL_GPIO_WritePin>
		//    HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
	}

  /* USER CODE END Callback 1 */
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40001000 	.word	0x40001000
 8001a64:	40001400 	.word	0x40001400
 8001a68:	20003370 	.word	0x20003370

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add their own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a74:	e7fe      	b.n	8001a74 <Error_Handler+0x8>
	...

08001a78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_MspInit+0x50>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	4a11      	ldr	r2, [pc, #68]	; (8001ac8 <HAL_MspInit+0x50>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6613      	str	r3, [r2, #96]	; 0x60
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_MspInit+0x50>)
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_MspInit+0x50>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <HAL_MspInit+0x50>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_MspInit+0x50>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8001aae:	2020      	movs	r0, #32
 8001ab0:	f000 fcfc 	bl	80024ac <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001ab4:	f000 fd22 	bl	80024fc <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f000 fd0b 	bl	80024d4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000

08001acc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b09a      	sub	sp, #104	; 0x68
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	2244      	movs	r2, #68	; 0x44
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f015 f915 	bl	8016d1c <memset>
  if(hadc->Instance==ADC1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001afa:	d134      	bne.n	8001b66 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001afc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b00:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b02:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b06:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f006 fb17 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001b18:	f7ff ffa8 	bl	8001a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_ADC_MspInit+0xa4>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	4a13      	ldr	r2, [pc, #76]	; (8001b70 <HAL_ADC_MspInit+0xa4>)
 8001b22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_ADC_MspInit+0xa4>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_ADC_MspInit+0xa4>)
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <HAL_ADC_MspInit+0xa4>)
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_ADC_MspInit+0xa4>)
 8001b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = VIN_11_Pin|VBUS_11_Pin;
 8001b4c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001b50:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b52:	2303      	movs	r3, #3
 8001b54:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <HAL_ADC_MspInit+0xa8>)
 8001b62:	f002 fa11 	bl	8003f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3768      	adds	r7, #104	; 0x68
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	48000400 	.word	0x48000400

08001b78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b09c      	sub	sp, #112	; 0x70
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b90:	f107 0318 	add.w	r3, r7, #24
 8001b94:	2244      	movs	r2, #68	; 0x44
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f015 f8bf 	bl	8016d1c <memset>
  if(hi2c->Instance==I2C1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a35      	ldr	r2, [pc, #212]	; (8001c78 <HAL_I2C_MspInit+0x100>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d163      	bne.n	8001c70 <HAL_I2C_MspInit+0xf8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ba8:	2340      	movs	r3, #64	; 0x40
 8001baa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb0:	f107 0318 	add.w	r3, r7, #24
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f006 fac3 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bc0:	f7ff ff54 	bl	8001a6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <HAL_I2C_MspInit+0x104>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc8:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <HAL_I2C_MspInit+0x104>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <HAL_I2C_MspInit+0x104>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_I2C_MspInit+0x104>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <HAL_I2C_MspInit+0x104>)
 8001be2:	f043 0302 	orr.w	r3, r3, #2
 8001be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_I2C_MspInit+0x104>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfa:	2312      	movs	r3, #18
 8001bfc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c06:	2304      	movs	r3, #4
 8001c08:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c14:	f002 f9b8 	bl	8003f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1c:	2312      	movs	r3, #18
 8001c1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c30:	4619      	mov	r1, r3
 8001c32:	4813      	ldr	r0, [pc, #76]	; (8001c80 <HAL_I2C_MspInit+0x108>)
 8001c34:	f002 f9a8 	bl	8003f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_I2C_MspInit+0x104>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <HAL_I2C_MspInit+0x104>)
 8001c3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c42:	6593      	str	r3, [r2, #88]	; 0x58
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_I2C_MspInit+0x104>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2100      	movs	r1, #0
 8001c54:	201f      	movs	r0, #31
 8001c56:	f001 fd86 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c5a:	201f      	movs	r0, #31
 8001c5c:	f001 fd9d 	bl	800379a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	2020      	movs	r0, #32
 8001c66:	f001 fd7e 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c6a:	2020      	movs	r0, #32
 8001c6c:	f001 fd95 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c70:	bf00      	nop
 8001c72:	3770      	adds	r7, #112	; 0x70
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000400 	.word	0x48000400

08001c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a3a      	ldr	r2, [pc, #232]	; (8001d7c <HAL_TIM_Base_MspInit+0xf8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d10c      	bne.n	8001cb0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c96:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9a:	4a39      	ldr	r2, [pc, #228]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001c9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca2:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001cae:	e060      	b.n	8001d72 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	4a30      	ldr	r2, [pc, #192]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
}
 8001cd2:	e04e      	b.n	8001d72 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2a      	ldr	r2, [pc, #168]	; (8001d84 <HAL_TIM_Base_MspInit+0x100>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]
}
 8001cf6:	e03c      	b.n	8001d72 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a22      	ldr	r2, [pc, #136]	; (8001d88 <HAL_TIM_Base_MspInit+0x104>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d114      	bne.n	8001d2c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001d08:	f043 0320 	orr.w	r3, r3, #32
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2037      	movs	r0, #55	; 0x37
 8001d20:	f001 fd21 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d24:	2037      	movs	r0, #55	; 0x37
 8001d26:	f001 fd38 	bl	800379a <HAL_NVIC_EnableIRQ>
}
 8001d2a:	e022      	b.n	8001d72 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM8)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <HAL_TIM_Base_MspInit+0x108>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d10c      	bne.n	8001d50 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001d3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d40:	6613      	str	r3, [r2, #96]	; 0x60
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
}
 8001d4e:	e010      	b.n	8001d72 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM16)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_TIM_Base_MspInit+0x10c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10b      	bne.n	8001d72 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5e:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	6613      	str	r3, [r2, #96]	; 0x60
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_TIM_Base_MspInit+0xfc>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
}
 8001d72:	bf00      	nop
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40012c00 	.word	0x40012c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40001400 	.word	0x40001400
 8001d8c:	40013400 	.word	0x40013400
 8001d90:	40014400 	.word	0x40014400

08001d94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <HAL_TIM_PWM_MspInit+0x38>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10b      	bne.n	8001dbe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6613      	str	r3, [r2, #96]	; 0x60
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40014000 	.word	0x40014000
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b090      	sub	sp, #64	; 0x40
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a85      	ldr	r2, [pc, #532]	; (8002008 <HAL_TIM_MspPostInit+0x234>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d11e      	bne.n	8001e34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b85      	ldr	r3, [pc, #532]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	4a84      	ldr	r2, [pc, #528]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e02:	4b82      	ldr	r3, [pc, #520]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = S5_Pin|S6_Pin|S7_Pin;
 8001e0e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e20:	2306      	movs	r3, #6
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2e:	f002 f8ab 	bl	8003f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001e32:	e0e5      	b.n	8002000 <HAL_TIM_MspPostInit+0x22c>
  else if(htim->Instance==TIM2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3c:	d11d      	bne.n	8001e7a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b73      	ldr	r3, [pc, #460]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	4a72      	ldr	r2, [pc, #456]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin;
 8001e56:	2303      	movs	r3, #3
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e66:	2301      	movs	r3, #1
 8001e68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e74:	f002 f888 	bl	8003f88 <HAL_GPIO_Init>
}
 8001e78:	e0c2      	b.n	8002000 <HAL_TIM_MspPostInit+0x22c>
  else if(htim->Instance==TIM3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a64      	ldr	r2, [pc, #400]	; (8002010 <HAL_TIM_MspPostInit+0x23c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d155      	bne.n	8001f30 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	4b61      	ldr	r3, [pc, #388]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	4a60      	ldr	r2, [pc, #384]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e90:	4b5e      	ldr	r3, [pc, #376]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	623b      	str	r3, [r7, #32]
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9c:	4b5b      	ldr	r3, [pc, #364]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	4a5a      	ldr	r2, [pc, #360]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea8:	4b58      	ldr	r3, [pc, #352]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb4:	4b55      	ldr	r3, [pc, #340]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb8:	4a54      	ldr	r2, [pc, #336]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec0:	4b52      	ldr	r3, [pc, #328]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = S1_Pin;
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001edc:	2302      	movs	r3, #2
 8001ede:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eea:	f002 f84d 	bl	8003f88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S2_Pin;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001efe:	2302      	movs	r3, #2
 8001f00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f06:	4619      	mov	r1, r3
 8001f08:	4842      	ldr	r0, [pc, #264]	; (8002014 <HAL_TIM_MspPostInit+0x240>)
 8001f0a:	f002 f83d 	bl	8003f88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S4_Pin;
 8001f0e:	2340      	movs	r3, #64	; 0x40
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(S4_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f26:	4619      	mov	r1, r3
 8001f28:	483b      	ldr	r0, [pc, #236]	; (8002018 <HAL_TIM_MspPostInit+0x244>)
 8001f2a:	f002 f82d 	bl	8003f88 <HAL_GPIO_Init>
}
 8001f2e:	e067      	b.n	8002000 <HAL_TIM_MspPostInit+0x22c>
  else if(htim->Instance==TIM8)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a39      	ldr	r2, [pc, #228]	; (800201c <HAL_TIM_MspPostInit+0x248>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d11d      	bne.n	8001f76 <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	4a33      	ldr	r2, [pc, #204]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f46:	4b31      	ldr	r3, [pc, #196]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M2_IN2_Pin|M2_IN1_Pin;
 8001f52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001f64:	230a      	movs	r3, #10
 8001f66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4829      	ldr	r0, [pc, #164]	; (8002014 <HAL_TIM_MspPostInit+0x240>)
 8001f70:	f002 f80a 	bl	8003f88 <HAL_GPIO_Init>
}
 8001f74:	e044      	b.n	8002000 <HAL_TIM_MspPostInit+0x22c>
  else if(htim->Instance==TIM15)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a29      	ldr	r2, [pc, #164]	; (8002020 <HAL_TIM_MspPostInit+0x24c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d11d      	bne.n	8001fbc <HAL_TIM_MspPostInit+0x1e8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	4a21      	ldr	r2, [pc, #132]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = S3_Pin;
 8001f98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001faa:	2301      	movs	r3, #1
 8001fac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 8001fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4817      	ldr	r0, [pc, #92]	; (8002014 <HAL_TIM_MspPostInit+0x240>)
 8001fb6:	f001 ffe7 	bl	8003f88 <HAL_GPIO_Init>
}
 8001fba:	e021      	b.n	8002000 <HAL_TIM_MspPostInit+0x22c>
  else if(htim->Instance==TIM16)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a18      	ldr	r2, [pc, #96]	; (8002024 <HAL_TIM_MspPostInit+0x250>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d11c      	bne.n	8002000 <HAL_TIM_MspPostInit+0x22c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	4a10      	ldr	r2, [pc, #64]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_TIM_MspPostInit+0x238>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S0_Pin;
 8001fde:	2340      	movs	r3, #64	; 0x40
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(S0_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffc:	f001 ffc4 	bl	8003f88 <HAL_GPIO_Init>
}
 8002000:	bf00      	nop
 8002002:	3740      	adds	r7, #64	; 0x40
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40012c00 	.word	0x40012c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40000400 	.word	0x40000400
 8002014:	48000400 	.word	0x48000400
 8002018:	48000800 	.word	0x48000800
 800201c:	40013400 	.word	0x40013400
 8002020:	40014000 	.word	0x40014000
 8002024:	40014400 	.word	0x40014400

08002028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b09a      	sub	sp, #104	; 0x68
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	2244      	movs	r2, #68	; 0x44
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f014 fe67 	bl	8016d1c <memset>
  if(huart->Instance==USART2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a38      	ldr	r2, [pc, #224]	; (8002134 <HAL_UART_MspInit+0x10c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d168      	bne.n	800212a <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002058:	2302      	movs	r3, #2
 800205a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4618      	mov	r0, r3
 8002066:	f006 f86b 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002070:	f7ff fcfc 	bl	8001a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002074:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_UART_MspInit+0x110>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	4a2f      	ldr	r2, [pc, #188]	; (8002138 <HAL_UART_MspInit+0x110>)
 800207a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207e:	6593      	str	r3, [r2, #88]	; 0x58
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_UART_MspInit+0x110>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_UART_MspInit+0x110>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	4a29      	ldr	r2, [pc, #164]	; (8002138 <HAL_UART_MspInit+0x110>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_UART_MspInit+0x110>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020a4:	230c      	movs	r3, #12
 80020a6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b4:	2307      	movs	r3, #7
 80020b6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020bc:	4619      	mov	r1, r3
 80020be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c2:	f001 ff61 	bl	8003f88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_UART_MspInit+0x114>)
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <HAL_UART_MspInit+0x118>)
 80020ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_UART_MspInit+0x114>)
 80020ce:	221b      	movs	r2, #27
 80020d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <HAL_UART_MspInit+0x114>)
 80020d4:	2210      	movs	r2, #16
 80020d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_UART_MspInit+0x114>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_UART_MspInit+0x114>)
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_UART_MspInit+0x114>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_UART_MspInit+0x114>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_UART_MspInit+0x114>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_UART_MspInit+0x114>)
 80020f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80020fe:	480f      	ldr	r0, [pc, #60]	; (800213c <HAL_UART_MspInit+0x114>)
 8002100:	f001 fb6c 	bl	80037dc <HAL_DMA_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800210a:	f7ff fcaf 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_UART_MspInit+0x114>)
 8002112:	679a      	str	r2, [r3, #120]	; 0x78
 8002114:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_UART_MspInit+0x114>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 4, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2104      	movs	r1, #4
 800211e:	2026      	movs	r0, #38	; 0x26
 8002120:	f001 fb21 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002124:	2026      	movs	r0, #38	; 0x26
 8002126:	f001 fb38 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800212a:	bf00      	nop
 800212c:	3768      	adds	r7, #104	; 0x68
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40004400 	.word	0x40004400
 8002138:	40021000 	.word	0x40021000
 800213c:	20003530 	.word	0x20003530
 8002140:	40020008 	.word	0x40020008

08002144 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_UART_MspDeInit+0x40>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d112      	bne.n	800217c <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_UART_MspDeInit+0x44>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <HAL_UART_MspDeInit+0x44>)
 800215c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002160:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002162:	210c      	movs	r1, #12
 8002164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002168:	f002 f890 	bl	800428c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002170:	4618      	mov	r0, r3
 8002172:	f001 fbdb 	bl	800392c <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002176:	2026      	movs	r0, #38	; 0x26
 8002178:	f001 fb1d 	bl	80037b6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40004400 	.word	0x40004400
 8002188:	40021000 	.word	0x40021000

0800218c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b094      	sub	sp, #80	; 0x50
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	2244      	movs	r2, #68	; 0x44
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f014 fdbd 	bl	8016d1c <memset>
  if(hpcd->Instance==USB)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a19      	ldr	r2, [pc, #100]	; (800220c <HAL_PCD_MspInit+0x80>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d12a      	bne.n	8002202 <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80021ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80021b2:	2300      	movs	r3, #0
 80021b4:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	4618      	mov	r0, r3
 80021bc:	f005 ffc0 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80021c6:	f7ff fc51 	bl	8001a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_PCD_MspInit+0x84>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_PCD_MspInit+0x84>)
 80021d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_PCD_MspInit+0x84>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	2013      	movs	r0, #19
 80021e8:	f001 fabd 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 80021ec:	2013      	movs	r0, #19
 80021ee:	f001 fad4 	bl	800379a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 6, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2106      	movs	r1, #6
 80021f6:	2014      	movs	r0, #20
 80021f8:	f001 fab5 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80021fc:	2014      	movs	r0, #20
 80021fe:	f001 facc 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002202:	bf00      	nop
 8002204:	3750      	adds	r7, #80	; 0x50
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40005c00 	.word	0x40005c00
 8002210:	40021000 	.word	0x40021000

08002214 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	; 0x30
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002224:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <HAL_InitTick+0xc4>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	4a2b      	ldr	r2, [pc, #172]	; (80022d8 <HAL_InitTick+0xc4>)
 800222a:	f043 0310 	orr.w	r3, r3, #16
 800222e:	6593      	str	r3, [r2, #88]	; 0x58
 8002230:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <HAL_InitTick+0xc4>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800223c:	f107 020c 	add.w	r2, r7, #12
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f005 ff02 	bl	8008050 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800224c:	f005 fed4 	bl	8007ff8 <HAL_RCC_GetPCLK1Freq>
 8002250:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	4a21      	ldr	r2, [pc, #132]	; (80022dc <HAL_InitTick+0xc8>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9b      	lsrs	r3, r3, #18
 800225c:	3b01      	subs	r3, #1
 800225e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_InitTick+0xcc>)
 8002262:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <HAL_InitTick+0xd0>)
 8002264:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002266:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <HAL_InitTick+0xcc>)
 8002268:	f240 32e7 	movw	r2, #999	; 0x3e7
 800226c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800226e:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <HAL_InitTick+0xcc>)
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_InitTick+0xcc>)
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_InitTick+0xcc>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002280:	4817      	ldr	r0, [pc, #92]	; (80022e0 <HAL_InitTick+0xcc>)
 8002282:	f006 f98f 	bl	80085a4 <HAL_TIM_Base_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800228c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002290:	2b00      	cmp	r3, #0
 8002292:	d11b      	bne.n	80022cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002294:	4812      	ldr	r0, [pc, #72]	; (80022e0 <HAL_InitTick+0xcc>)
 8002296:	f006 f9dd 	bl	8008654 <HAL_TIM_Base_Start_IT>
 800229a:	4603      	mov	r3, r0
 800229c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80022a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022a8:	2036      	movs	r0, #54	; 0x36
 80022aa:	f001 fa76 	bl	800379a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d808      	bhi.n	80022c6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	2036      	movs	r0, #54	; 0x36
 80022ba:	f001 fa54 	bl	8003766 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_InitTick+0xd4>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e002      	b.n	80022cc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80022cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3730      	adds	r7, #48	; 0x30
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	20003888 	.word	0x20003888
 80022e4:	40001000 	.word	0x40001000
 80022e8:	20000004 	.word	0x20000004

080022ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <NMI_Handler+0x4>

080022f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <HardFault_Handler+0x4>

080022f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <MemManage_Handler+0x4>

080022fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <BusFault_Handler+0x4>

08002304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <UsageFault_Handler+0x4>

0800230a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <DMA1_Channel1_IRQHandler+0x10>)
 800231e:	f001 fcd6 	bl	8003cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20003530 	.word	0x20003530

0800232c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <USB_HP_IRQHandler+0x10>)
 8002332:	f003 fcb5 	bl	8005ca0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20003590 	.word	0x20003590

08002340 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <USB_LP_IRQHandler+0x10>)
 8002346:	f003 fcab 	bl	8005ca0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20003590 	.word	0x20003590

08002354 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <I2C1_EV_IRQHandler+0x10>)
 800235a:	f002 f9fd 	bl	8004758 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20003240 	.word	0x20003240

08002368 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <I2C1_ER_IRQHandler+0x10>)
 800236e:	f002 fa0d 	bl	800478c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20003240 	.word	0x20003240

0800237c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <USART2_IRQHandler+0x10>)
 8002382:	f007 fe31 	bl	8009fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200034a0 	.word	0x200034a0

08002390 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <TIM6_DAC_IRQHandler+0x10>)
 8002396:	f006 fb4d 	bl	8008a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20003888 	.word	0x20003888

080023a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <TIM7_IRQHandler+0x10>)
 80023aa:	f006 fb43 	bl	8008a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20003370 	.word	0x20003370

080023b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESP32_EN_Pin);
 80023bc:	2010      	movs	r0, #16
 80023be:	f002 f85f 	bl	8004480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <SystemInit+0x20>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <SystemInit+0x20>)
 80023d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023ec:	480d      	ldr	r0, [pc, #52]	; (8002424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f0:	480d      	ldr	r0, [pc, #52]	; (8002428 <LoopForever+0x6>)
  ldr r1, =_edata
 80023f2:	490e      	ldr	r1, [pc, #56]	; (800242c <LoopForever+0xa>)
  ldr r2, =_sidata
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <LoopForever+0xe>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023f8:	e002      	b.n	8002400 <LoopCopyDataInit>

080023fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fe:	3304      	adds	r3, #4

08002400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002404:	d3f9      	bcc.n	80023fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002408:	4c0b      	ldr	r4, [pc, #44]	; (8002438 <LoopForever+0x16>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800240c:	e001      	b.n	8002412 <LoopFillZerobss>

0800240e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002410:	3204      	adds	r2, #4

08002412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002414:	d3fb      	bcc.n	800240e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002416:	f7ff ffd7 	bl	80023c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241a:	f014 fc87 	bl	8016d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800241e:	f7fe fc11 	bl	8000c44 <main>

08002422 <LoopForever>:

LoopForever:
    b LoopForever
 8002422:	e7fe      	b.n	8002422 <LoopForever>
  ldr   r0, =_estack
 8002424:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800242c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002430:	08016f48 	.word	0x08016f48
  ldr r2, =_sbss
 8002434:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002438:	20005680 	.word	0x20005680

0800243c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800243c:	e7fe      	b.n	800243c <ADC1_2_IRQHandler>

0800243e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002448:	2003      	movs	r0, #3
 800244a:	f001 f981 	bl	8003750 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800244e:	200f      	movs	r0, #15
 8002450:	f7ff fee0 	bl	8002214 <HAL_InitTick>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	71fb      	strb	r3, [r7, #7]
 800245e:	e001      	b.n	8002464 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002460:	f7ff fb0a 	bl	8001a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002464:	79fb      	ldrb	r3, [r7, #7]

}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_IncTick+0x1c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_IncTick+0x20>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4413      	add	r3, r2
 800247e:	4a03      	ldr	r2, [pc, #12]	; (800248c <HAL_IncTick+0x1c>)
 8002480:	6013      	str	r3, [r2, #0]
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	200038d4 	.word	0x200038d4
 8002490:	20000008 	.word	0x20000008

08002494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return uwTick;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_GetTick+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	200038d4 	.word	0x200038d4

080024ac <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024bc:	4904      	ldr	r1, [pc, #16]	; (80024d0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40010030 	.word	0x40010030

080024d4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 0202 	bic.w	r2, r3, #2
 80024e4:	4904      	ldr	r1, [pc, #16]	; (80024f8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40010030 	.word	0x40010030

080024fc <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800250e:	f7ff ffc1 	bl	8002494 <HAL_GetTick>
 8002512:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002514:	e008      	b.n	8002528 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002516:	f7ff ffbd 	bl	8002494 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b0a      	cmp	r3, #10
 8002522:	d901      	bls.n	8002528 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e006      	b.n	8002536 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40010030 	.word	0x40010030

08002544 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	609a      	str	r2, [r3, #8]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	609a      	str	r2, [r3, #8]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3360      	adds	r3, #96	; 0x60
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <LL_ADC_SetOffset+0x44>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	4313      	orrs	r3, r2
 80025dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025e4:	bf00      	nop
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	03fff000 	.word	0x03fff000

080025f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3360      	adds	r3, #96	; 0x60
 8002602:	461a      	mov	r2, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3360      	adds	r3, #96	; 0x60
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	431a      	orrs	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800264a:	bf00      	nop
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002656:	b480      	push	{r7}
 8002658:	b087      	sub	sp, #28
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3360      	adds	r3, #96	; 0x60
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	431a      	orrs	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002680:	bf00      	nop
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3360      	adds	r3, #96	; 0x60
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	615a      	str	r2, [r3, #20]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3330      	adds	r3, #48	; 0x30
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	4413      	add	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	211f      	movs	r1, #31
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	401a      	ands	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	f003 011f 	and.w	r1, r3, #31
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	431a      	orrs	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3314      	adds	r3, #20
 8002750:	461a      	mov	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	0e5b      	lsrs	r3, r3, #25
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	4413      	add	r3, r2
 800275e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	0d1b      	lsrs	r3, r3, #20
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2107      	movs	r1, #7
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	401a      	ands	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	0d1b      	lsrs	r3, r3, #20
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	431a      	orrs	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a0f      	ldr	r2, [pc, #60]	; (80027e4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d10a      	bne.n	80027c2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80027c0:	e00a      	b.n	80027d8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	43db      	mvns	r3, r3
 80027d0:	401a      	ands	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	407f0000 	.word	0x407f0000

080027e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6093      	str	r3, [r2, #8]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800281c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002820:	d101      	bne.n	8002826 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002844:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002848:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002870:	d101      	bne.n	8002876 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <LL_ADC_IsEnabled+0x18>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <LL_ADC_IsEnabled+0x1a>
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d101      	bne.n	80028c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d101      	bne.n	80028e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002904:	2300      	movs	r3, #0
 8002906:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e177      	b.n	8002c02 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d109      	bne.n	8002934 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff f8d3 	bl	8001acc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff67 	bl	800280c <LL_ADC_IsDeepPowerDownEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff4d 	bl	80027e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff82 	bl	800285c <LL_ADC_IsInternalRegulatorEnabled>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d115      	bne.n	800298a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff66 	bl	8002834 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002968:	4b9c      	ldr	r3, [pc, #624]	; (8002bdc <HAL_ADC_Init+0x2e4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	099b      	lsrs	r3, r3, #6
 800296e:	4a9c      	ldr	r2, [pc, #624]	; (8002be0 <HAL_ADC_Init+0x2e8>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	3301      	adds	r3, #1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800297c:	e002      	b.n	8002984 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3b01      	subs	r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f9      	bne.n	800297e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ff64 	bl	800285c <LL_ADC_IsInternalRegulatorEnabled>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10d      	bne.n	80029b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	f043 0210 	orr.w	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff75 	bl	80028aa <LL_ADC_REG_IsConversionOngoing>
 80029c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 8110 	bne.w	8002bf0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 810c 	bne.w	8002bf0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029e0:	f043 0202 	orr.w	r2, r3, #2
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff49 	bl	8002884 <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d111      	bne.n	8002a1c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029fc:	f7ff ff42 	bl	8002884 <LL_ADC_IsEnabled>
 8002a00:	4604      	mov	r4, r0
 8002a02:	4878      	ldr	r0, [pc, #480]	; (8002be4 <HAL_ADC_Init+0x2ec>)
 8002a04:	f7ff ff3e 	bl	8002884 <LL_ADC_IsEnabled>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4619      	mov	r1, r3
 8002a16:	4874      	ldr	r0, [pc, #464]	; (8002be8 <HAL_ADC_Init+0x2f0>)
 8002a18:	f7ff fd94 	bl	8002544 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7f5b      	ldrb	r3, [r3, #29]
 8002a20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a3a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d106      	bne.n	8002a58 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	045b      	lsls	r3, r3, #17
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d009      	beq.n	8002a74 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	; (8002bec <HAL_ADC_Init+0x2f4>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff01 	bl	80028aa <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff0e 	bl	80028d0 <LL_ADC_INJ_IsConversionOngoing>
 8002ab4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d16d      	bne.n	8002b98 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d16a      	bne.n	8002b98 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ac6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ace:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ade:	f023 0302 	bic.w	r3, r3, #2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	69b9      	ldr	r1, [r7, #24]
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d017      	beq.n	8002b24 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b0c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6911      	ldr	r1, [r2, #16]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002b22:	e013      	b.n	8002b4c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b48:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d118      	bne.n	8002b88 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	e007      	b.n	8002b98 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d10c      	bne.n	8002bba <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f023 010f 	bic.w	r1, r3, #15
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	1e5a      	subs	r2, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bb8:	e007      	b.n	8002bca <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 020f 	bic.w	r2, r2, #15
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bda:	e011      	b.n	8002c00 <HAL_ADC_Init+0x308>
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	053e2d63 	.word	0x053e2d63
 8002be4:	50000100 	.word	0x50000100
 8002be8:	50000300 	.word	0x50000300
 8002bec:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	f043 0210 	orr.w	r2, r3, #16
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	; 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}
 8002c0a:	bf00      	nop

08002c0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b0b6      	sub	sp, #216	; 0xd8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x22>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e3c8      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x7b4>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fe35 	bl	80028aa <LL_ADC_REG_IsConversionOngoing>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 83ad 	bne.w	80033a2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	f7ff fd47 	bl	80026e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fe23 	bl	80028aa <LL_ADC_REG_IsConversionOngoing>
 8002c64:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fe2f 	bl	80028d0 <LL_ADC_INJ_IsConversionOngoing>
 8002c72:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 81d9 	bne.w	8003032 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 81d4 	bne.w	8003032 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c92:	d10f      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f7ff fd4e 	bl	8002740 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fd08 	bl	80026c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002cb2:	e00e      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	6819      	ldr	r1, [r3, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f7ff fd3d 	bl	8002740 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fcf8 	bl	80026c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	08db      	lsrs	r3, r3, #3
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d022      	beq.n	8002d3a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	6919      	ldr	r1, [r3, #16]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d04:	f7ff fc52 	bl	80025ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6919      	ldr	r1, [r3, #16]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f7ff fc9e 	bl	8002656 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	6919      	ldr	r1, [r3, #16]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	7f1b      	ldrb	r3, [r3, #28]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x124>
 8002d2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d2e:	e000      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x126>
 8002d30:	2300      	movs	r3, #0
 8002d32:	461a      	mov	r2, r3
 8002d34:	f7ff fcaa 	bl	800268c <LL_ADC_SetOffsetSaturation>
 8002d38:	e17b      	b.n	8003032 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fc57 	bl	80025f4 <LL_ADC_GetOffsetChannel>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x15a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2100      	movs	r1, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fc4c 	bl	80025f4 <LL_ADC_GetOffsetChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	0e9b      	lsrs	r3, r3, #26
 8002d60:	f003 021f 	and.w	r2, r3, #31
 8002d64:	e01e      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x198>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fc41 	bl	80025f4 <LL_ADC_GetOffsetChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e004      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002d98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x1b0>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0e9b      	lsrs	r3, r3, #26
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	e018      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1e2>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002dd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002de0:	2320      	movs	r3, #32
 8002de2:	e004      	b.n	8002dee <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d106      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fc10 	bl	8002620 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2101      	movs	r1, #1
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fbf4 	bl	80025f4 <LL_ADC_GetOffsetChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x220>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fbe9 	bl	80025f4 <LL_ADC_GetOffsetChannel>
 8002e22:	4603      	mov	r3, r0
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	f003 021f 	and.w	r2, r3, #31
 8002e2a:	e01e      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x25e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2101      	movs	r1, #1
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fbde 	bl	80025f4 <LL_ADC_GetOffsetChannel>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002e52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e004      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002e5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x276>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0e9b      	lsrs	r3, r3, #26
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	e018      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x2a8>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002e96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	e004      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002eaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d106      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fbad 	bl	8002620 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2102      	movs	r1, #2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fb91 	bl	80025f4 <LL_ADC_GetOffsetChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x2e6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fb86 	bl	80025f4 <LL_ADC_GetOffsetChannel>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	0e9b      	lsrs	r3, r3, #26
 8002eec:	f003 021f 	and.w	r2, r3, #31
 8002ef0:	e01e      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x324>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fb7b 	bl	80025f4 <LL_ADC_GetOffsetChannel>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	e004      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x33c>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	e016      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x36a>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002f68:	2320      	movs	r3, #32
 8002f6a:	e004      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f70:	fab3 f383 	clz	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d106      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2102      	movs	r1, #2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fb4c 	bl	8002620 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2103      	movs	r1, #3
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fb30 	bl	80025f4 <LL_ADC_GetOffsetChannel>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x3a8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2103      	movs	r1, #3
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fb25 	bl	80025f4 <LL_ADC_GetOffsetChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	0e9b      	lsrs	r3, r3, #26
 8002fae:	f003 021f 	and.w	r2, r3, #31
 8002fb2:	e017      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x3d8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2103      	movs	r1, #3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fb1a 	bl	80025f4 <LL_ADC_GetOffsetChannel>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002fd6:	2320      	movs	r3, #32
 8002fd8:	e003      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fdc:	fab3 f383 	clz	r3, r3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x3f0>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	e011      	b.n	8003020 <HAL_ADC_ConfigChannel+0x414>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800300a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800300e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003014:	2320      	movs	r3, #32
 8003016:	e003      	b.n	8003020 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003020:	429a      	cmp	r2, r3
 8003022:	d106      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2200      	movs	r2, #0
 800302a:	2103      	movs	r1, #3
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff faf7 	bl	8002620 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fc24 	bl	8002884 <LL_ADC_IsEnabled>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 8140 	bne.w	80032c4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	6819      	ldr	r1, [r3, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	461a      	mov	r2, r3
 8003052:	f7ff fba1 	bl	8002798 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4a8f      	ldr	r2, [pc, #572]	; (8003298 <HAL_ADC_ConfigChannel+0x68c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	f040 8131 	bne.w	80032c4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10b      	bne.n	800308a <HAL_ADC_ConfigChannel+0x47e>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	0e9b      	lsrs	r3, r3, #26
 8003078:	3301      	adds	r3, #1
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2b09      	cmp	r3, #9
 8003080:	bf94      	ite	ls
 8003082:	2301      	movls	r3, #1
 8003084:	2300      	movhi	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	e019      	b.n	80030be <HAL_ADC_ConfigChannel+0x4b2>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003098:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800309a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800309c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80030a2:	2320      	movs	r3, #32
 80030a4:	e003      	b.n	80030ae <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80030a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	2b09      	cmp	r3, #9
 80030b6:	bf94      	ite	ls
 80030b8:	2301      	movls	r3, #1
 80030ba:	2300      	movhi	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d079      	beq.n	80031b6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d107      	bne.n	80030de <HAL_ADC_ConfigChannel+0x4d2>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	0e9b      	lsrs	r3, r3, #26
 80030d4:	3301      	adds	r3, #1
 80030d6:	069b      	lsls	r3, r3, #26
 80030d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030dc:	e015      	b.n	800310a <HAL_ADC_ConfigChannel+0x4fe>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80030f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80030f6:	2320      	movs	r3, #32
 80030f8:	e003      	b.n	8003102 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80030fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	3301      	adds	r3, #1
 8003104:	069b      	lsls	r3, r3, #26
 8003106:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_ADC_ConfigChannel+0x51e>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	0e9b      	lsrs	r3, r3, #26
 800311c:	3301      	adds	r3, #1
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	2101      	movs	r1, #1
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	e017      	b.n	800315a <HAL_ADC_ConfigChannel+0x54e>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800313c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003142:	2320      	movs	r3, #32
 8003144:	e003      	b.n	800314e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2101      	movs	r1, #1
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	ea42 0103 	orr.w	r1, r2, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x574>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	0e9b      	lsrs	r3, r3, #26
 8003170:	3301      	adds	r3, #1
 8003172:	f003 021f 	and.w	r2, r3, #31
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	051b      	lsls	r3, r3, #20
 800317e:	e018      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x5a6>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	fa93 f3a3 	rbit	r3, r3
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800318e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003190:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003198:	2320      	movs	r3, #32
 800319a:	e003      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800319c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	f003 021f 	and.w	r2, r3, #31
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031b2:	430b      	orrs	r3, r1
 80031b4:	e081      	b.n	80032ba <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d107      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x5c6>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	0e9b      	lsrs	r3, r3, #26
 80031c8:	3301      	adds	r3, #1
 80031ca:	069b      	lsls	r3, r3, #26
 80031cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031d0:	e015      	b.n	80031fe <HAL_ADC_ConfigChannel+0x5f2>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80031ea:	2320      	movs	r3, #32
 80031ec:	e003      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	069b      	lsls	r3, r3, #26
 80031fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_ADC_ConfigChannel+0x612>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0e9b      	lsrs	r3, r3, #26
 8003210:	3301      	adds	r3, #1
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	2101      	movs	r1, #1
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	e017      	b.n	800324e <HAL_ADC_ConfigChannel+0x642>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	61fb      	str	r3, [r7, #28]
  return result;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003236:	2320      	movs	r3, #32
 8003238:	e003      	b.n	8003242 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	3301      	adds	r3, #1
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2101      	movs	r1, #1
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	ea42 0103 	orr.w	r1, r2, r3
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10d      	bne.n	800327a <HAL_ADC_ConfigChannel+0x66e>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0e9b      	lsrs	r3, r3, #26
 8003264:	3301      	adds	r3, #1
 8003266:	f003 021f 	and.w	r2, r3, #31
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	3b1e      	subs	r3, #30
 8003272:	051b      	lsls	r3, r3, #20
 8003274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003278:	e01e      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x6ac>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	613b      	str	r3, [r7, #16]
  return result;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d104      	bne.n	800329c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003292:	2320      	movs	r3, #32
 8003294:	e006      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x698>
 8003296:	bf00      	nop
 8003298:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f003 021f 	and.w	r2, r3, #31
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	3b1e      	subs	r3, #30
 80032b2:	051b      	lsls	r3, r3, #20
 80032b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b8:	430b      	orrs	r3, r1
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	6892      	ldr	r2, [r2, #8]
 80032be:	4619      	mov	r1, r3
 80032c0:	f7ff fa3e 	bl	8002740 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b3f      	ldr	r3, [pc, #252]	; (80033c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d071      	beq.n	80033b4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032d0:	483e      	ldr	r0, [pc, #248]	; (80033cc <HAL_ADC_ConfigChannel+0x7c0>)
 80032d2:	f7ff f95d 	bl	8002590 <LL_ADC_GetCommonPathInternalCh>
 80032d6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a3c      	ldr	r2, [pc, #240]	; (80033d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_ADC_ConfigChannel+0x6e2>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3a      	ldr	r2, [pc, #232]	; (80033d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d127      	bne.n	800333e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d121      	bne.n	800333e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003302:	d157      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003308:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800330c:	4619      	mov	r1, r3
 800330e:	482f      	ldr	r0, [pc, #188]	; (80033cc <HAL_ADC_ConfigChannel+0x7c0>)
 8003310:	f7ff f92b 	bl	800256a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003314:	4b30      	ldr	r3, [pc, #192]	; (80033d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	099b      	lsrs	r3, r3, #6
 800331a:	4a30      	ldr	r2, [pc, #192]	; (80033dc <HAL_ADC_ConfigChannel+0x7d0>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	4613      	mov	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800332e:	e002      	b.n	8003336 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3b01      	subs	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f9      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800333c:	e03a      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d113      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x764>
 8003348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800334c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d02a      	beq.n	80033b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800335e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003366:	4619      	mov	r1, r3
 8003368:	4818      	ldr	r0, [pc, #96]	; (80033cc <HAL_ADC_ConfigChannel+0x7c0>)
 800336a:	f7ff f8fe 	bl	800256a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800336e:	e021      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d11c      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800337a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800337e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d116      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a16      	ldr	r2, [pc, #88]	; (80033e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d011      	beq.n	80033b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003394:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003398:	4619      	mov	r1, r3
 800339a:	480c      	ldr	r0, [pc, #48]	; (80033cc <HAL_ADC_ConfigChannel+0x7c0>)
 800339c:	f7ff f8e5 	bl	800256a <LL_ADC_SetCommonPathInternalCh>
 80033a0:	e008      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	37d8      	adds	r7, #216	; 0xd8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	80080000 	.word	0x80080000
 80033cc:	50000300 	.word	0x50000300
 80033d0:	c3210000 	.word	0xc3210000
 80033d4:	90c00010 	.word	0x90c00010
 80033d8:	20000000 	.word	0x20000000
 80033dc:	053e2d63 	.word	0x053e2d63
 80033e0:	c7520000 	.word	0xc7520000
 80033e4:	50000100 	.word	0x50000100
 80033e8:	cb840000 	.word	0xcb840000

080033ec <LL_ADC_IsEnabled>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <LL_ADC_IsEnabled+0x18>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <LL_ADC_IsEnabled+0x1a>
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_ADC_REG_IsConversionOngoing>:
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d101      	bne.n	800342a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b0a1      	sub	sp, #132	; 0x84
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003452:	2302      	movs	r3, #2
 8003454:	e08b      	b.n	800356e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800345e:	2300      	movs	r3, #0
 8003460:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003462:	2300      	movs	r3, #0
 8003464:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800346e:	d102      	bne.n	8003476 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003470:	4b41      	ldr	r3, [pc, #260]	; (8003578 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	e001      	b.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e06a      	b.n	800356e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ffb9 	bl	8003412 <LL_ADC_REG_IsConversionOngoing>
 80034a0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ffb3 	bl	8003412 <LL_ADC_REG_IsConversionOngoing>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d14c      	bne.n	800354c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80034b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d149      	bne.n	800354c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034b8:	4b30      	ldr	r3, [pc, #192]	; (800357c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80034ba:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d028      	beq.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034d6:	035b      	lsls	r3, r3, #13
 80034d8:	430b      	orrs	r3, r1
 80034da:	431a      	orrs	r2, r3
 80034dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034e4:	f7ff ff82 	bl	80033ec <LL_ADC_IsEnabled>
 80034e8:	4604      	mov	r4, r0
 80034ea:	4823      	ldr	r0, [pc, #140]	; (8003578 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80034ec:	f7ff ff7e 	bl	80033ec <LL_ADC_IsEnabled>
 80034f0:	4603      	mov	r3, r0
 80034f2:	4323      	orrs	r3, r4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d133      	bne.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003500:	f023 030f 	bic.w	r3, r3, #15
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	6811      	ldr	r1, [r2, #0]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	6892      	ldr	r2, [r2, #8]
 800350c:	430a      	orrs	r2, r1
 800350e:	431a      	orrs	r2, r3
 8003510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003512:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003514:	e024      	b.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003520:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003522:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003526:	f7ff ff61 	bl	80033ec <LL_ADC_IsEnabled>
 800352a:	4604      	mov	r4, r0
 800352c:	4812      	ldr	r0, [pc, #72]	; (8003578 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800352e:	f7ff ff5d 	bl	80033ec <LL_ADC_IsEnabled>
 8003532:	4603      	mov	r3, r0
 8003534:	4323      	orrs	r3, r4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d112      	bne.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800353a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003542:	f023 030f 	bic.w	r3, r3, #15
 8003546:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003548:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800354a:	e009      	b.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800355e:	e000      	b.n	8003562 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003560:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800356a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800356e:	4618      	mov	r0, r3
 8003570:	3784      	adds	r7, #132	; 0x84
 8003572:	46bd      	mov	sp, r7
 8003574:	bd90      	pop	{r4, r7, pc}
 8003576:	bf00      	nop
 8003578:	50000100 	.word	0x50000100
 800357c:	50000300 	.word	0x50000300

08003580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800359c:	4013      	ands	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035b2:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	60d3      	str	r3, [r2, #12]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	f003 0307 	and.w	r3, r3, #7
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	db0b      	blt.n	800360e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	f003 021f 	and.w	r2, r3, #31
 80035fc:	4907      	ldr	r1, [pc, #28]	; (800361c <__NVIC_EnableIRQ+0x38>)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	2001      	movs	r0, #1
 8003606:	fa00 f202 	lsl.w	r2, r0, r2
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000e100 	.word	0xe000e100

08003620 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	2b00      	cmp	r3, #0
 8003630:	db12      	blt.n	8003658 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	f003 021f 	and.w	r2, r3, #31
 8003638:	490a      	ldr	r1, [pc, #40]	; (8003664 <__NVIC_DisableIRQ+0x44>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	2001      	movs	r0, #1
 8003642:	fa00 f202 	lsl.w	r2, r0, r2
 8003646:	3320      	adds	r3, #32
 8003648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800364c:	f3bf 8f4f 	dsb	sy
}
 8003650:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003652:	f3bf 8f6f 	isb	sy
}
 8003656:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000e100 	.word	0xe000e100

08003668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003678:	2b00      	cmp	r3, #0
 800367a:	db0a      	blt.n	8003692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	490c      	ldr	r1, [pc, #48]	; (80036b4 <__NVIC_SetPriority+0x4c>)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	0112      	lsls	r2, r2, #4
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	440b      	add	r3, r1
 800368c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003690:	e00a      	b.n	80036a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4908      	ldr	r1, [pc, #32]	; (80036b8 <__NVIC_SetPriority+0x50>)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	3b04      	subs	r3, #4
 80036a0:	0112      	lsls	r2, r2, #4
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	440b      	add	r3, r1
 80036a6:	761a      	strb	r2, [r3, #24]
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000e100 	.word	0xe000e100
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f1c3 0307 	rsb	r3, r3, #7
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	bf28      	it	cs
 80036da:	2304      	movcs	r3, #4
 80036dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2b06      	cmp	r3, #6
 80036e4:	d902      	bls.n	80036ec <NVIC_EncodePriority+0x30>
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3b03      	subs	r3, #3
 80036ea:	e000      	b.n	80036ee <NVIC_EncodePriority+0x32>
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f0:	f04f 32ff 	mov.w	r2, #4294967295
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43da      	mvns	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	401a      	ands	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003704:	f04f 31ff 	mov.w	r1, #4294967295
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	43d9      	mvns	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003714:	4313      	orrs	r3, r2
         );
}
 8003716:	4618      	mov	r0, r3
 8003718:	3724      	adds	r7, #36	; 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003728:	f3bf 8f4f 	dsb	sy
}
 800372c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <__NVIC_SystemReset+0x24>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003736:	4904      	ldr	r1, [pc, #16]	; (8003748 <__NVIC_SystemReset+0x24>)
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <__NVIC_SystemReset+0x28>)
 800373a:	4313      	orrs	r3, r2
 800373c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800373e:	f3bf 8f4f 	dsb	sy
}
 8003742:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003744:	bf00      	nop
 8003746:	e7fd      	b.n	8003744 <__NVIC_SystemReset+0x20>
 8003748:	e000ed00 	.word	0xe000ed00
 800374c:	05fa0004 	.word	0x05fa0004

08003750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ff11 	bl	8003580 <__NVIC_SetPriorityGrouping>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	4603      	mov	r3, r0
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003774:	f7ff ff28 	bl	80035c8 <__NVIC_GetPriorityGrouping>
 8003778:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	6978      	ldr	r0, [r7, #20]
 8003780:	f7ff ff9c 	bl	80036bc <NVIC_EncodePriority>
 8003784:	4602      	mov	r2, r0
 8003786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff6b 	bl	8003668 <__NVIC_SetPriority>
}
 8003792:	bf00      	nop
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff1b 	bl	80035e4 <__NVIC_EnableIRQ>
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	4603      	mov	r3, r0
 80037be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80037c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff2b 	bl	8003620 <__NVIC_DisableIRQ>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80037d6:	f7ff ffa5 	bl	8003724 <__NVIC_SystemReset>
	...

080037dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e08d      	b.n	800390a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	4b47      	ldr	r3, [pc, #284]	; (8003914 <HAL_DMA_Init+0x138>)
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d80f      	bhi.n	800381a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	4b45      	ldr	r3, [pc, #276]	; (8003918 <HAL_DMA_Init+0x13c>)
 8003802:	4413      	add	r3, r2
 8003804:	4a45      	ldr	r2, [pc, #276]	; (800391c <HAL_DMA_Init+0x140>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	009a      	lsls	r2, r3, #2
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a42      	ldr	r2, [pc, #264]	; (8003920 <HAL_DMA_Init+0x144>)
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
 8003818:	e00e      	b.n	8003838 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	4b40      	ldr	r3, [pc, #256]	; (8003924 <HAL_DMA_Init+0x148>)
 8003822:	4413      	add	r3, r2
 8003824:	4a3d      	ldr	r2, [pc, #244]	; (800391c <HAL_DMA_Init+0x140>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	009a      	lsls	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a3c      	ldr	r2, [pc, #240]	; (8003928 <HAL_DMA_Init+0x14c>)
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800384e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003852:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800385c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fb1a 	bl	8003ec4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003898:	d102      	bne.n	80038a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <HAL_DMA_Init+0x104>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d80c      	bhi.n	80038e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fb3a 	bl	8003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	e008      	b.n	80038f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40020407 	.word	0x40020407
 8003918:	bffdfff8 	.word	0xbffdfff8
 800391c:	cccccccd 	.word	0xcccccccd
 8003920:	40020000 	.word	0x40020000
 8003924:	bffdfbf8 	.word	0xbffdfbf8
 8003928:	40020400 	.word	0x40020400

0800392c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e07b      	b.n	8003a36 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <HAL_DMA_DeInit+0x114>)
 8003956:	429a      	cmp	r2, r3
 8003958:	d80f      	bhi.n	800397a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <HAL_DMA_DeInit+0x118>)
 8003962:	4413      	add	r3, r2
 8003964:	4a38      	ldr	r2, [pc, #224]	; (8003a48 <HAL_DMA_DeInit+0x11c>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	009a      	lsls	r2, r3, #2
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a35      	ldr	r2, [pc, #212]	; (8003a4c <HAL_DMA_DeInit+0x120>)
 8003976:	641a      	str	r2, [r3, #64]	; 0x40
 8003978:	e00e      	b.n	8003998 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <HAL_DMA_DeInit+0x124>)
 8003982:	4413      	add	r3, r2
 8003984:	4a30      	ldr	r2, [pc, #192]	; (8003a48 <HAL_DMA_DeInit+0x11c>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	009a      	lsls	r2, r3, #2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a2f      	ldr	r2, [pc, #188]	; (8003a54 <HAL_DMA_DeInit+0x128>)
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	f003 021f 	and.w	r2, r3, #31
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f202 	lsl.w	r2, r1, r2
 80039b2:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fa85 	bl	8003ec4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039ca:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00f      	beq.n	80039f4 <HAL_DMA_DeInit+0xc8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d80b      	bhi.n	80039f4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 faaf 	bl	8003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039f2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40020407 	.word	0x40020407
 8003a44:	bffdfff8 	.word	0xbffdfff8
 8003a48:	cccccccd 	.word	0xcccccccd
 8003a4c:	40020000 	.word	0x40020000
 8003a50:	bffdfbf8 	.word	0xbffdfbf8
 8003a54:	40020400 	.word	0x40020400

08003a58 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_DMA_Start_IT+0x20>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e066      	b.n	8003b46 <HAL_DMA_Start_IT+0xee>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d155      	bne.n	8003b38 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f9c9 	bl	8003e48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 020e 	orr.w	r2, r2, #14
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e00f      	b.n	8003af0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0204 	bic.w	r2, r2, #4
 8003ade:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 020a 	orr.w	r2, r2, #10
 8003aee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b0c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b24:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e005      	b.n	8003b44 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
 8003b42:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d005      	beq.n	8003b72 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2204      	movs	r2, #4
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
 8003b70:	e037      	b.n	8003be2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 020e 	bic.w	r2, r2, #14
 8003b80:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b90:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f003 021f 	and.w	r2, r3, #31
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2101      	movs	r1, #1
 8003bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bbe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00c      	beq.n	8003be2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bd6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003be0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d00d      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	e047      	b.n	8003cc4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 020e 	bic.w	r2, r2, #14
 8003c42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	f003 021f 	and.w	r2, r3, #31
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	2101      	movs	r1, #1
 8003c72:	fa01 f202 	lsl.w	r2, r1, r2
 8003c76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ca2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
    }
  }
  return status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	2204      	movs	r2, #4
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d026      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x7a>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d021      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d107      	bne.n	8003d22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0204 	bic.w	r2, r2, #4
 8003d20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f003 021f 	and.w	r2, r3, #31
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2104      	movs	r1, #4
 8003d30:	fa01 f202 	lsl.w	r2, r1, r2
 8003d34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d071      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d46:	e06c      	b.n	8003e22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	2202      	movs	r2, #2
 8003d52:	409a      	lsls	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d02e      	beq.n	8003dba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d029      	beq.n	8003dba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 020a 	bic.w	r2, r2, #10
 8003d82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	f003 021f 	and.w	r2, r3, #31
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	2102      	movs	r1, #2
 8003d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d038      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003db8:	e033      	b.n	8003e22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d02a      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d025      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 020e 	bic.w	r2, r2, #14
 8003de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f003 021f 	and.w	r2, r3, #31
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2101      	movs	r1, #1
 8003df6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
}
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e3a:	b2db      	uxtb	r3, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d004      	beq.n	8003e72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e70:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	f003 021f 	and.w	r2, r3, #31
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2101      	movs	r1, #1
 8003e80:	fa01 f202 	lsl.w	r2, r1, r2
 8003e84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d108      	bne.n	8003ea8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ea6:	e007      	b.n	8003eb8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	60da      	str	r2, [r3, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d802      	bhi.n	8003ede <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ed8:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	e001      	b.n	8003ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003ede:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ee0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	3b08      	subs	r3, #8
 8003eee:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	009a      	lsls	r2, r3, #2
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a0b      	ldr	r2, [pc, #44]	; (8003f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2201      	movs	r2, #1
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40020407 	.word	0x40020407
 8003f30:	40020800 	.word	0x40020800
 8003f34:	40020820 	.word	0x40020820
 8003f38:	cccccccd 	.word	0xcccccccd
 8003f3c:	40020880 	.word	0x40020880

08003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f62:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	1000823f 	.word	0x1000823f
 8003f84:	40020940 	.word	0x40020940

08003f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f96:	e15a      	b.n	800424e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 814c 	beq.w	8004248 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d005      	beq.n	8003fc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d130      	bne.n	800402a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ffe:	2201      	movs	r2, #1
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4013      	ands	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	091b      	lsrs	r3, r3, #4
 8004014:	f003 0201 	and.w	r2, r3, #1
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b03      	cmp	r3, #3
 8004034:	d017      	beq.n	8004066 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	2203      	movs	r2, #3
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d123      	bne.n	80040ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	08da      	lsrs	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3208      	adds	r2, #8
 800407a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800407e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	220f      	movs	r2, #15
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	08da      	lsrs	r2, r3, #3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3208      	adds	r2, #8
 80040b4:	6939      	ldr	r1, [r7, #16]
 80040b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	2203      	movs	r2, #3
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0203 	and.w	r2, r3, #3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80a6 	beq.w	8004248 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040fc:	4b5b      	ldr	r3, [pc, #364]	; (800426c <HAL_GPIO_Init+0x2e4>)
 80040fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004100:	4a5a      	ldr	r2, [pc, #360]	; (800426c <HAL_GPIO_Init+0x2e4>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6613      	str	r3, [r2, #96]	; 0x60
 8004108:	4b58      	ldr	r3, [pc, #352]	; (800426c <HAL_GPIO_Init+0x2e4>)
 800410a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004114:	4a56      	ldr	r2, [pc, #344]	; (8004270 <HAL_GPIO_Init+0x2e8>)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	089b      	lsrs	r3, r3, #2
 800411a:	3302      	adds	r3, #2
 800411c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004120:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	220f      	movs	r2, #15
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800413e:	d01f      	beq.n	8004180 <HAL_GPIO_Init+0x1f8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a4c      	ldr	r2, [pc, #304]	; (8004274 <HAL_GPIO_Init+0x2ec>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d019      	beq.n	800417c <HAL_GPIO_Init+0x1f4>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a4b      	ldr	r2, [pc, #300]	; (8004278 <HAL_GPIO_Init+0x2f0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_GPIO_Init+0x1f0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a4a      	ldr	r2, [pc, #296]	; (800427c <HAL_GPIO_Init+0x2f4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00d      	beq.n	8004174 <HAL_GPIO_Init+0x1ec>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a49      	ldr	r2, [pc, #292]	; (8004280 <HAL_GPIO_Init+0x2f8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d007      	beq.n	8004170 <HAL_GPIO_Init+0x1e8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a48      	ldr	r2, [pc, #288]	; (8004284 <HAL_GPIO_Init+0x2fc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d101      	bne.n	800416c <HAL_GPIO_Init+0x1e4>
 8004168:	2305      	movs	r3, #5
 800416a:	e00a      	b.n	8004182 <HAL_GPIO_Init+0x1fa>
 800416c:	2306      	movs	r3, #6
 800416e:	e008      	b.n	8004182 <HAL_GPIO_Init+0x1fa>
 8004170:	2304      	movs	r3, #4
 8004172:	e006      	b.n	8004182 <HAL_GPIO_Init+0x1fa>
 8004174:	2303      	movs	r3, #3
 8004176:	e004      	b.n	8004182 <HAL_GPIO_Init+0x1fa>
 8004178:	2302      	movs	r3, #2
 800417a:	e002      	b.n	8004182 <HAL_GPIO_Init+0x1fa>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <HAL_GPIO_Init+0x1fa>
 8004180:	2300      	movs	r3, #0
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	f002 0203 	and.w	r2, r2, #3
 8004188:	0092      	lsls	r2, r2, #2
 800418a:	4093      	lsls	r3, r2
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004192:	4937      	ldr	r1, [pc, #220]	; (8004270 <HAL_GPIO_Init+0x2e8>)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	089b      	lsrs	r3, r3, #2
 8004198:	3302      	adds	r3, #2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041a0:	4b39      	ldr	r3, [pc, #228]	; (8004288 <HAL_GPIO_Init+0x300>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041c4:	4a30      	ldr	r2, [pc, #192]	; (8004288 <HAL_GPIO_Init+0x300>)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041ca:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <HAL_GPIO_Init+0x300>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4013      	ands	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ee:	4a26      	ldr	r2, [pc, #152]	; (8004288 <HAL_GPIO_Init+0x300>)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80041f4:	4b24      	ldr	r3, [pc, #144]	; (8004288 <HAL_GPIO_Init+0x300>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4013      	ands	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004218:	4a1b      	ldr	r2, [pc, #108]	; (8004288 <HAL_GPIO_Init+0x300>)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800421e:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <HAL_GPIO_Init+0x300>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	43db      	mvns	r3, r3
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004242:	4a11      	ldr	r2, [pc, #68]	; (8004288 <HAL_GPIO_Init+0x300>)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3301      	adds	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	f47f ae9d 	bne.w	8003f98 <HAL_GPIO_Init+0x10>
  }
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	40021000 	.word	0x40021000
 8004270:	40010000 	.word	0x40010000
 8004274:	48000400 	.word	0x48000400
 8004278:	48000800 	.word	0x48000800
 800427c:	48000c00 	.word	0x48000c00
 8004280:	48001000 	.word	0x48001000
 8004284:	48001400 	.word	0x48001400
 8004288:	40010400 	.word	0x40010400

0800428c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800429a:	e0bd      	b.n	8004418 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800429c:	2201      	movs	r2, #1
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80b0 	beq.w	8004412 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80042b2:	4a60      	ldr	r2, [pc, #384]	; (8004434 <HAL_GPIO_DeInit+0x1a8>)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	089b      	lsrs	r3, r3, #2
 80042b8:	3302      	adds	r3, #2
 80042ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	220f      	movs	r2, #15
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4013      	ands	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042da:	d01f      	beq.n	800431c <HAL_GPIO_DeInit+0x90>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a56      	ldr	r2, [pc, #344]	; (8004438 <HAL_GPIO_DeInit+0x1ac>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d019      	beq.n	8004318 <HAL_GPIO_DeInit+0x8c>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a55      	ldr	r2, [pc, #340]	; (800443c <HAL_GPIO_DeInit+0x1b0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d013      	beq.n	8004314 <HAL_GPIO_DeInit+0x88>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a54      	ldr	r2, [pc, #336]	; (8004440 <HAL_GPIO_DeInit+0x1b4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00d      	beq.n	8004310 <HAL_GPIO_DeInit+0x84>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a53      	ldr	r2, [pc, #332]	; (8004444 <HAL_GPIO_DeInit+0x1b8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d007      	beq.n	800430c <HAL_GPIO_DeInit+0x80>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a52      	ldr	r2, [pc, #328]	; (8004448 <HAL_GPIO_DeInit+0x1bc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <HAL_GPIO_DeInit+0x7c>
 8004304:	2305      	movs	r3, #5
 8004306:	e00a      	b.n	800431e <HAL_GPIO_DeInit+0x92>
 8004308:	2306      	movs	r3, #6
 800430a:	e008      	b.n	800431e <HAL_GPIO_DeInit+0x92>
 800430c:	2304      	movs	r3, #4
 800430e:	e006      	b.n	800431e <HAL_GPIO_DeInit+0x92>
 8004310:	2303      	movs	r3, #3
 8004312:	e004      	b.n	800431e <HAL_GPIO_DeInit+0x92>
 8004314:	2302      	movs	r3, #2
 8004316:	e002      	b.n	800431e <HAL_GPIO_DeInit+0x92>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <HAL_GPIO_DeInit+0x92>
 800431c:	2300      	movs	r3, #0
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	f002 0203 	and.w	r2, r2, #3
 8004324:	0092      	lsls	r2, r2, #2
 8004326:	4093      	lsls	r3, r2
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	429a      	cmp	r2, r3
 800432c:	d132      	bne.n	8004394 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_GPIO_DeInit+0x1c0>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	43db      	mvns	r3, r3
 8004336:	4945      	ldr	r1, [pc, #276]	; (800444c <HAL_GPIO_DeInit+0x1c0>)
 8004338:	4013      	ands	r3, r2
 800433a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800433c:	4b43      	ldr	r3, [pc, #268]	; (800444c <HAL_GPIO_DeInit+0x1c0>)
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	43db      	mvns	r3, r3
 8004344:	4941      	ldr	r1, [pc, #260]	; (800444c <HAL_GPIO_DeInit+0x1c0>)
 8004346:	4013      	ands	r3, r2
 8004348:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800434a:	4b40      	ldr	r3, [pc, #256]	; (800444c <HAL_GPIO_DeInit+0x1c0>)
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	43db      	mvns	r3, r3
 8004352:	493e      	ldr	r1, [pc, #248]	; (800444c <HAL_GPIO_DeInit+0x1c0>)
 8004354:	4013      	ands	r3, r2
 8004356:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004358:	4b3c      	ldr	r3, [pc, #240]	; (800444c <HAL_GPIO_DeInit+0x1c0>)
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	43db      	mvns	r3, r3
 8004360:	493a      	ldr	r1, [pc, #232]	; (800444c <HAL_GPIO_DeInit+0x1c0>)
 8004362:	4013      	ands	r3, r2
 8004364:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	220f      	movs	r2, #15
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004376:	4a2f      	ldr	r2, [pc, #188]	; (8004434 <HAL_GPIO_DeInit+0x1a8>)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	089b      	lsrs	r3, r3, #2
 800437c:	3302      	adds	r3, #2
 800437e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	43da      	mvns	r2, r3
 8004386:	482b      	ldr	r0, [pc, #172]	; (8004434 <HAL_GPIO_DeInit+0x1a8>)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	089b      	lsrs	r3, r3, #2
 800438c:	400a      	ands	r2, r1
 800438e:	3302      	adds	r3, #2
 8004390:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	2103      	movs	r1, #3
 800439e:	fa01 f303 	lsl.w	r3, r1, r3
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	08da      	lsrs	r2, r3, #3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3208      	adds	r2, #8
 80043b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	220f      	movs	r2, #15
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	08d2      	lsrs	r2, r2, #3
 80043c8:	4019      	ands	r1, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3208      	adds	r2, #8
 80043ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	2103      	movs	r1, #3
 80043dc:	fa01 f303 	lsl.w	r3, r1, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	401a      	ands	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	2101      	movs	r1, #1
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	401a      	ands	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	2103      	movs	r1, #3
 8004406:	fa01 f303 	lsl.w	r3, r1, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	401a      	ands	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	3301      	adds	r3, #1
 8004416:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	f47f af3b 	bne.w	800429c <HAL_GPIO_DeInit+0x10>
  }
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40010000 	.word	0x40010000
 8004438:	48000400 	.word	0x48000400
 800443c:	48000800 	.word	0x48000800
 8004440:	48000c00 	.word	0x48000c00
 8004444:	48001000 	.word	0x48001000
 8004448:	48001400 	.word	0x48001400
 800444c:	40010400 	.word	0x40010400

08004450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	807b      	strh	r3, [r7, #2]
 800445c:	4613      	mov	r3, r2
 800445e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004460:	787b      	ldrb	r3, [r7, #1]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004466:	887a      	ldrh	r2, [r7, #2]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800446c:	e002      	b.n	8004474 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800446e:	887a      	ldrh	r2, [r7, #2]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d006      	beq.n	80044a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004496:	4a05      	ldr	r2, [pc, #20]	; (80044ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fd faae 	bl	8001a00 <HAL_GPIO_EXTI_Callback>
  }
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40010400 	.word	0x40010400

080044b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e081      	b.n	80045c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fd fb4e 	bl	8001b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2224      	movs	r2, #36	; 0x24
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004500:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004510:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d107      	bne.n	800452a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	e006      	b.n	8004538 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004536:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d104      	bne.n	800454a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004548:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800456c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69d9      	ldr	r1, [r3, #28]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1a      	ldr	r2, [r3, #32]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045ec:	2b28      	cmp	r3, #40	; 0x28
 80045ee:	f040 808a 	bne.w	8004706 <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d105      	bne.n	800460a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004604:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e07e      	b.n	8004708 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800460a:	f248 0102 	movw	r1, #32770	; 0x8002
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f001 f928 	bl	8005864 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 800461e:	2302      	movs	r3, #2
 8004620:	e072      	b.n	8004708 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b29      	cmp	r3, #41	; 0x29
 8004634:	d12a      	bne.n	800468c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004636:	2101      	movs	r1, #1
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f001 f913 	bl	8005864 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800464c:	d11e      	bne.n	800468c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800465c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	2b00      	cmp	r3, #0
 8004664:	d012      	beq.n	800468c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	4a29      	ldr	r2, [pc, #164]	; (8004710 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 800466c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fac4 	bl	8003c00 <HAL_DMA_Abort_IT>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d006      	beq.n	800468c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004688:	4610      	mov	r0, r2
 800468a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	222a      	movs	r2, #42	; 0x2a
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a10      	ldr	r2, [pc, #64]	; (8004714 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 80046d2:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	0c1b      	lsrs	r3, r3, #16
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2208      	movs	r2, #8
 80046ee:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80046f8:	f248 0102 	movw	r1, #32770	; 0x8002
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f001 f84d 	bl	800579c <I2C_Enable_IRQ>

    return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	080056fb 	.word	0x080056fb
 8004714:	080048d3 	.word	0x080048d3

08004718 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b20      	cmp	r3, #32
 800472a:	d10d      	bne.n	8004748 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2228      	movs	r2, #40	; 0x28
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a07      	ldr	r2, [pc, #28]	; (8004754 <HAL_I2C_EnableListen_IT+0x3c>)
 8004738:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800473a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f001 f82c 	bl	800579c <I2C_Enable_IRQ>

    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e000      	b.n	800474a <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	080048d3 	.word	0x080048d3

08004758 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4798      	blx	r3
  }
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00f      	beq.n	80047ce <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047bc:	f043 0201 	orr.w	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047cc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00f      	beq.n	80047f8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	f043 0208 	orr.w	r2, r3, #8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00f      	beq.n	8004822 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	f043 0202 	orr.w	r2, r3, #2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004820:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 030b 	and.w	r3, r3, #11
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fe45 	bl	80054c4 <I2C_ITError>
  }
}
 800483a:	bf00      	nop
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <I2C_Slave_ISR_IT+0x24>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e0e1      	b.n	8004aba <I2C_Slave_ISR_IT+0x1e8>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004912:	6939      	ldr	r1, [r7, #16]
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fc7b 	bl	8005210 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	d04b      	beq.n	80049bc <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800492a:	2b00      	cmp	r3, #0
 800492c:	d046      	beq.n	80049bc <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d128      	bne.n	800498a <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b28      	cmp	r3, #40	; 0x28
 8004942:	d108      	bne.n	8004956 <I2C_Slave_ISR_IT+0x84>
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800494a:	d104      	bne.n	8004956 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800494c:	6939      	ldr	r1, [r7, #16]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fd64 	bl	800541c <I2C_ITListenCplt>
 8004954:	e031      	b.n	80049ba <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b29      	cmp	r3, #41	; 0x29
 8004960:	d10e      	bne.n	8004980 <I2C_Slave_ISR_IT+0xae>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004968:	d00a      	beq.n	8004980 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2210      	movs	r2, #16
 8004970:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fe9d 	bl	80056b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fb24 	bl	8004fc6 <I2C_ITSlaveSeqCplt>
 800497e:	e01c      	b.n	80049ba <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2210      	movs	r2, #16
 8004986:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004988:	e08f      	b.n	8004aaa <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2210      	movs	r2, #16
 8004990:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	f043 0204 	orr.w	r2, r3, #4
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <I2C_Slave_ISR_IT+0xda>
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049aa:	d17e      	bne.n	8004aaa <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b0:	4619      	mov	r1, r3
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fd86 	bl	80054c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80049b8:	e077      	b.n	8004aaa <I2C_Slave_ISR_IT+0x1d8>
 80049ba:	e076      	b.n	8004aaa <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d02f      	beq.n	8004a26 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02a      	beq.n	8004a26 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d018      	beq.n	8004a0c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d14b      	bne.n	8004aae <I2C_Slave_ISR_IT+0x1dc>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a1c:	d047      	beq.n	8004aae <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fad1 	bl	8004fc6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004a24:	e043      	b.n	8004aae <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d009      	beq.n	8004a44 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004a3a:	6939      	ldr	r1, [r7, #16]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fa01 	bl	8004e44 <I2C_ITAddrCplt>
 8004a42:	e035      	b.n	8004ab0 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d030      	beq.n	8004ab0 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d02b      	beq.n	8004ab0 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d018      	beq.n	8004a94 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a92:	e00d      	b.n	8004ab0 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a9a:	d002      	beq.n	8004aa2 <I2C_Slave_ISR_IT+0x1d0>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fa8f 	bl	8004fc6 <I2C_ITSlaveSeqCplt>
 8004aa8:	e002      	b.n	8004ab0 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004aaa:	bf00      	nop
 8004aac:	e000      	b.n	8004ab0 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004aae:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b088      	sub	sp, #32
 8004ac6:	af02      	add	r7, sp, #8
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <I2C_Master_ISR_DMA+0x1a>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e0d9      	b.n	8004c90 <I2C_Master_ISR_DMA+0x1ce>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d011      	beq.n	8004b1c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2210      	movs	r2, #16
 8004afe:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b04:	f043 0204 	orr.w	r2, r3, #4
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004b0c:	2120      	movs	r1, #32
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fe44 	bl	800579c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fdcc 	bl	80056b2 <I2C_Flush_TXDR>
 8004b1a:	e0b4      	b.n	8004c86 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d071      	beq.n	8004c0a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d06c      	beq.n	8004c0a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d04e      	beq.n	8004be8 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b56:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2bff      	cmp	r3, #255	; 0xff
 8004b60:	d906      	bls.n	8004b70 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	22ff      	movs	r2, #255	; 0xff
 8004b66:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	e010      	b.n	8004b92 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b82:	d003      	beq.n	8004b8c <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	e002      	b.n	8004b92 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004b8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b90:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	8a79      	ldrh	r1, [r7, #18]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fdc9 	bl	8005738 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b22      	cmp	r3, #34	; 0x22
 8004bc2:	d108      	bne.n	8004bd6 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bd2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004bd4:	e057      	b.n	8004c86 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004be4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004be6:	e04e      	b.n	8004c86 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bf6:	d003      	beq.n	8004c00 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f9a7 	bl	8004f4c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004bfe:	e042      	b.n	8004c86 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004c00:	2140      	movs	r1, #64	; 0x40
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fc5e 	bl	80054c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004c08:	e03d      	b.n	8004c86 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d028      	beq.n	8004c66 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d023      	beq.n	8004c66 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d119      	bne.n	8004c5c <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c36:	d025      	beq.n	8004c84 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c40:	d108      	bne.n	8004c54 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c50:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004c52:	e017      	b.n	8004c84 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f979 	bl	8004f4c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004c5a:	e013      	b.n	8004c84 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004c5c:	2140      	movs	r1, #64	; 0x40
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fc30 	bl	80054c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004c64:	e00e      	b.n	8004c84 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f9ff 	bl	8005080 <I2C_ITMasterCplt>
 8004c82:	e000      	b.n	8004c86 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8004c84:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <I2C_Slave_ISR_DMA+0x24>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e0bf      	b.n	8004e3c <I2C_Slave_ISR_DMA+0x1a4>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 fa98 	bl	8005210 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 8095 	beq.w	8004e16 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 808f 	beq.w	8004e16 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d104      	bne.n	8004d0c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d07d      	beq.n	8004e08 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00c      	beq.n	8004d2e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00c      	beq.n	8004d50 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d128      	bne.n	8004da8 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b28      	cmp	r3, #40	; 0x28
 8004d60:	d108      	bne.n	8004d74 <I2C_Slave_ISR_DMA+0xdc>
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d68:	d104      	bne.n	8004d74 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 fb55 	bl	800541c <I2C_ITListenCplt>
 8004d72:	e048      	b.n	8004e06 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b29      	cmp	r3, #41	; 0x29
 8004d7e:	d10e      	bne.n	8004d9e <I2C_Slave_ISR_DMA+0x106>
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d86:	d00a      	beq.n	8004d9e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fc8e 	bl	80056b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f915 	bl	8004fc6 <I2C_ITSlaveSeqCplt>
 8004d9c:	e033      	b.n	8004e06 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2210      	movs	r2, #16
 8004da4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004da6:	e034      	b.n	8004e12 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2210      	movs	r2, #16
 8004dae:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db4:	f043 0204 	orr.w	r2, r3, #4
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <I2C_Slave_ISR_DMA+0x13a>
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dd0:	d11f      	bne.n	8004e12 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
 8004dd4:	2b21      	cmp	r3, #33	; 0x21
 8004dd6:	d002      	beq.n	8004dde <I2C_Slave_ISR_DMA+0x146>
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	2b29      	cmp	r3, #41	; 0x29
 8004ddc:	d103      	bne.n	8004de6 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2221      	movs	r2, #33	; 0x21
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
 8004de4:	e008      	b.n	8004df8 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
 8004de8:	2b22      	cmp	r3, #34	; 0x22
 8004dea:	d002      	beq.n	8004df2 <I2C_Slave_ISR_DMA+0x15a>
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
 8004dee:	2b2a      	cmp	r3, #42	; 0x2a
 8004df0:	d102      	bne.n	8004df8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2222      	movs	r2, #34	; 0x22
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fb60 	bl	80054c4 <I2C_ITError>
      if (treatdmanack == 1U)
 8004e04:	e005      	b.n	8004e12 <I2C_Slave_ISR_DMA+0x17a>
 8004e06:	e004      	b.n	8004e12 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004e10:	e00f      	b.n	8004e32 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8004e12:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004e14:	e00d      	b.n	8004e32 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f809 	bl	8004e44 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e5a:	2b28      	cmp	r3, #40	; 0x28
 8004e5c:	d16a      	bne.n	8004f34 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	0c1b      	lsrs	r3, r3, #16
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	0c1b      	lsrs	r3, r3, #16
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004e7c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e8a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004e98:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d138      	bne.n	8004f14 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004ea2:	897b      	ldrh	r3, [r7, #10]
 8004ea4:	09db      	lsrs	r3, r3, #7
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	89bb      	ldrh	r3, [r7, #12]
 8004eaa:	4053      	eors	r3, r2
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f003 0306 	and.w	r3, r3, #6
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d11c      	bne.n	8004ef0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004eb6:	897b      	ldrh	r3, [r7, #10]
 8004eb8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d13b      	bne.n	8004f44 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2208      	movs	r2, #8
 8004ed8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ee2:	89ba      	ldrh	r2, [r7, #12]
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fb fd89 	bl	8000a00 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004eee:	e029      	b.n	8004f44 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004ef0:	893b      	ldrh	r3, [r7, #8]
 8004ef2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fcb3 	bl	8005864 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f06:	89ba      	ldrh	r2, [r7, #12]
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7fb fd77 	bl	8000a00 <HAL_I2C_AddrCallback>
}
 8004f12:	e017      	b.n	8004f44 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fca3 	bl	8005864 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f26:	89ba      	ldrh	r2, [r7, #12]
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fb fd67 	bl	8000a00 <HAL_I2C_AddrCallback>
}
 8004f32:	e007      	b.n	8004f44 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2208      	movs	r2, #8
 8004f3a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b21      	cmp	r3, #33	; 0x21
 8004f66:	d115      	bne.n	8004f94 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2211      	movs	r2, #17
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fc70 	bl	8005864 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff fc58 	bl	8004842 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f92:	e014      	b.n	8004fbe <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2212      	movs	r2, #18
 8004fa0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004fa8:	2102      	movs	r1, #2
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fc5a 	bl	8005864 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff fc4c 	bl	8004856 <HAL_I2C_MasterRxCpltCallback>
}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	e00c      	b.n	8005014 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005012:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b29      	cmp	r3, #41	; 0x29
 800501e:	d112      	bne.n	8005046 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2228      	movs	r2, #40	; 0x28
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2221      	movs	r2, #33	; 0x21
 800502c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800502e:	2101      	movs	r1, #1
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fc17 	bl	8005864 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fc13 	bl	800486a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005044:	e017      	b.n	8005076 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b2a      	cmp	r3, #42	; 0x2a
 8005050:	d111      	bne.n	8005076 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2228      	movs	r2, #40	; 0x28
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2222      	movs	r2, #34	; 0x22
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005060:	2102      	movs	r1, #2
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fbfe 	bl	8005864 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7fb fce5 	bl	8000a40 <HAL_I2C_SlaveRxCpltCallback>
}
 8005076:	bf00      	nop
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2220      	movs	r2, #32
 8005094:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b21      	cmp	r3, #33	; 0x21
 80050a0:	d107      	bne.n	80050b2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80050a2:	2101      	movs	r1, #1
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fbdd 	bl	8005864 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2211      	movs	r2, #17
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
 80050b0:	e00c      	b.n	80050cc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b22      	cmp	r3, #34	; 0x22
 80050bc:	d106      	bne.n	80050cc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80050be:	2102      	movs	r1, #2
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fbcf 	bl	8005864 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2212      	movs	r2, #18
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6859      	ldr	r1, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b4c      	ldr	r3, [pc, #304]	; (8005208 <I2C_ITMasterCplt+0x188>)
 80050d8:	400b      	ands	r3, r1
 80050da:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a49      	ldr	r2, [pc, #292]	; (800520c <I2C_ITMasterCplt+0x18c>)
 80050e6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2210      	movs	r2, #16
 80050f8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	f043 0204 	orr.w	r2, r3, #4
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b60      	cmp	r3, #96	; 0x60
 8005110:	d10a      	bne.n	8005128 <I2C_ITMasterCplt+0xa8>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	b2db      	uxtb	r3, r3
 8005124:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005126:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fac2 	bl	80056b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b60      	cmp	r3, #96	; 0x60
 800513e:	d002      	beq.n	8005146 <I2C_ITMasterCplt+0xc6>
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d006      	beq.n	8005154 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	4619      	mov	r1, r3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f9b9 	bl	80054c4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005152:	e054      	b.n	80051fe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b21      	cmp	r3, #33	; 0x21
 800515e:	d124      	bne.n	80051aa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d10b      	bne.n	8005192 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fb77 	bl	800487e <HAL_I2C_MemTxCpltCallback>
}
 8005190:	e035      	b.n	80051fe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff fb4d 	bl	8004842 <HAL_I2C_MasterTxCpltCallback>
}
 80051a8:	e029      	b.n	80051fe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b22      	cmp	r3, #34	; 0x22
 80051b4:	d123      	bne.n	80051fe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b40      	cmp	r3, #64	; 0x40
 80051ce:	d10b      	bne.n	80051e8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fb56 	bl	8004892 <HAL_I2C_MemRxCpltCallback>
}
 80051e6:	e00a      	b.n	80051fe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff fb2c 	bl	8004856 <HAL_I2C_MasterRxCpltCallback>
}
 80051fe:	bf00      	nop
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	fe00e800 	.word	0xfe00e800
 800520c:	ffff0000 	.word	0xffff0000

08005210 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2220      	movs	r2, #32
 8005234:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	2b21      	cmp	r3, #33	; 0x21
 800523a:	d002      	beq.n	8005242 <I2C_ITSlaveCplt+0x32>
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	2b29      	cmp	r3, #41	; 0x29
 8005240:	d108      	bne.n	8005254 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005242:	f248 0101 	movw	r1, #32769	; 0x8001
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fb0c 	bl	8005864 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2221      	movs	r2, #33	; 0x21
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
 8005252:	e00d      	b.n	8005270 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	2b22      	cmp	r3, #34	; 0x22
 8005258:	d002      	beq.n	8005260 <I2C_ITSlaveCplt+0x50>
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b2a      	cmp	r3, #42	; 0x2a
 800525e:	d107      	bne.n	8005270 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005260:	f248 0102 	movw	r1, #32770	; 0x8002
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fafd 	bl	8005864 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2222      	movs	r2, #34	; 0x22
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800527e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6859      	ldr	r1, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b62      	ldr	r3, [pc, #392]	; (8005414 <I2C_ITSlaveCplt+0x204>)
 800528c:	400b      	ands	r3, r1
 800528e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fa0e 	bl	80056b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d013      	beq.n	80052c8 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052ae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01f      	beq.n	80052f8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052c6:	e017      	b.n	80052f8 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d012      	beq.n	80052f8 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052e0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d006      	beq.n	80052f8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d020      	beq.n	8005344 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f023 0304 	bic.w	r3, r3, #4
 8005308:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00c      	beq.n	8005344 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	f043 0204 	orr.w	r2, r3, #4
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536c:	2b00      	cmp	r3, #0
 800536e:	d010      	beq.n	8005392 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	4619      	mov	r1, r3
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f8a4 	bl	80054c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b28      	cmp	r3, #40	; 0x28
 8005386:	d141      	bne.n	800540c <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005388:	6979      	ldr	r1, [r7, #20]
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f846 	bl	800541c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005390:	e03c      	b.n	800540c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800539a:	d014      	beq.n	80053c6 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff fe12 	bl	8004fc6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a1c      	ldr	r2, [pc, #112]	; (8005418 <I2C_ITSlaveCplt+0x208>)
 80053a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fb fb12 	bl	80009e8 <HAL_I2C_ListenCpltCallback>
}
 80053c4:	e022      	b.n	800540c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b22      	cmp	r3, #34	; 0x22
 80053d0:	d10e      	bne.n	80053f0 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7fb fb29 	bl	8000a40 <HAL_I2C_SlaveRxCpltCallback>
}
 80053ee:	e00d      	b.n	800540c <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fa2f 	bl	800486a <HAL_I2C_SlaveTxCpltCallback>
}
 800540c:	bf00      	nop
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	fe00e800 	.word	0xfe00e800
 8005418:	ffff0000 	.word	0xffff0000

0800541c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a25      	ldr	r2, [pc, #148]	; (80054c0 <I2C_ITListenCplt+0xa4>)
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d022      	beq.n	8005498 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546e:	2b00      	cmp	r3, #0
 8005470:	d012      	beq.n	8005498 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005490:	f043 0204 	orr.w	r2, r3, #4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005498:	f248 0103 	movw	r1, #32771	; 0x8003
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f9e1 	bl	8005864 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2210      	movs	r2, #16
 80054a8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fb fa98 	bl	80009e8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	ffff0000 	.word	0xffff0000

080054c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a5d      	ldr	r2, [pc, #372]	; (8005658 <I2C_ITError+0x194>)
 80054e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	2b28      	cmp	r3, #40	; 0x28
 80054fa:	d005      	beq.n	8005508 <I2C_ITError+0x44>
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2b29      	cmp	r3, #41	; 0x29
 8005500:	d002      	beq.n	8005508 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	2b2a      	cmp	r3, #42	; 0x2a
 8005506:	d10b      	bne.n	8005520 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005508:	2103      	movs	r1, #3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9aa 	bl	8005864 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2228      	movs	r2, #40	; 0x28
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a50      	ldr	r2, [pc, #320]	; (800565c <I2C_ITError+0x198>)
 800551c:	635a      	str	r2, [r3, #52]	; 0x34
 800551e:	e011      	b.n	8005544 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005520:	f248 0103 	movw	r1, #32771	; 0x8003
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f99d 	bl	8005864 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b60      	cmp	r3, #96	; 0x60
 8005534:	d003      	beq.n	800553e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	2b00      	cmp	r3, #0
 8005550:	d039      	beq.n	80055c6 <I2C_ITError+0x102>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b11      	cmp	r3, #17
 8005556:	d002      	beq.n	800555e <I2C_ITError+0x9a>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b21      	cmp	r3, #33	; 0x21
 800555c:	d133      	bne.n	80055c6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800556c:	d107      	bne.n	800557e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800557c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe fc52 	bl	8003e2c <HAL_DMA_GetState>
 8005588:	4603      	mov	r3, r0
 800558a:	2b01      	cmp	r3, #1
 800558c:	d017      	beq.n	80055be <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	4a33      	ldr	r2, [pc, #204]	; (8005660 <I2C_ITError+0x19c>)
 8005594:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe fb2c 	bl	8003c00 <HAL_DMA_Abort_IT>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d04d      	beq.n	800564a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055b8:	4610      	mov	r0, r2
 80055ba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055bc:	e045      	b.n	800564a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f850 	bl	8005664 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055c4:	e041      	b.n	800564a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d039      	beq.n	8005642 <I2C_ITError+0x17e>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b12      	cmp	r3, #18
 80055d2:	d002      	beq.n	80055da <I2C_ITError+0x116>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b22      	cmp	r3, #34	; 0x22
 80055d8:	d133      	bne.n	8005642 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e8:	d107      	bne.n	80055fa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055f8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fe fc14 	bl	8003e2c <HAL_DMA_GetState>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d017      	beq.n	800563a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	4a14      	ldr	r2, [pc, #80]	; (8005660 <I2C_ITError+0x19c>)
 8005610:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe faee 	bl	8003c00 <HAL_DMA_Abort_IT>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d011      	beq.n	800564e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005634:	4610      	mov	r0, r2
 8005636:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005638:	e009      	b.n	800564e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f812 	bl	8005664 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005640:	e005      	b.n	800564e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f80e 	bl	8005664 <I2C_TreatErrorCallback>
  }
}
 8005648:	e002      	b.n	8005650 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800564a:	bf00      	nop
 800564c:	e000      	b.n	8005650 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800564e:	bf00      	nop
}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	ffff0000 	.word	0xffff0000
 800565c:	080048d3 	.word	0x080048d3
 8005660:	080056fb 	.word	0x080056fb

08005664 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b60      	cmp	r3, #96	; 0x60
 8005676:	d10e      	bne.n	8005696 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff f909 	bl	80048a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005694:	e009      	b.n	80056aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7fb fa33 	bl	8000b10 <HAL_I2C_ErrorCallback>
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d103      	bne.n	80056d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2200      	movs	r2, #0
 80056ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d007      	beq.n	80056ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0201 	orr.w	r2, r2, #1
 80056ec:	619a      	str	r2, [r3, #24]
  }
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	2200      	movs	r2, #0
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	2200      	movs	r2, #0
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff ff9b 	bl	8005664 <I2C_TreatErrorCallback>
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	817b      	strh	r3, [r7, #10]
 8005746:	4613      	mov	r3, r2
 8005748:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800574a:	897b      	ldrh	r3, [r7, #10]
 800574c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005750:	7a7b      	ldrb	r3, [r7, #9]
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005758:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	4313      	orrs	r3, r2
 8005762:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005766:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	0d5b      	lsrs	r3, r3, #21
 8005772:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005776:	4b08      	ldr	r3, [pc, #32]	; (8005798 <I2C_TransferConfig+0x60>)
 8005778:	430b      	orrs	r3, r1
 800577a:	43db      	mvns	r3, r3
 800577c:	ea02 0103 	and.w	r1, r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	03ff63ff 	.word	0x03ff63ff

0800579c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b0:	4a2a      	ldr	r2, [pc, #168]	; (800585c <I2C_Enable_IRQ+0xc0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80057ba:	4a29      	ldr	r2, [pc, #164]	; (8005860 <I2C_Enable_IRQ+0xc4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d11d      	bne.n	80057fc <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80057c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	da03      	bge.n	80057d0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80057ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80057d0:	887b      	ldrh	r3, [r7, #2]
 80057d2:	2b10      	cmp	r3, #16
 80057d4:	d103      	bne.n	80057de <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80057dc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80057de:	887b      	ldrh	r3, [r7, #2]
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d103      	bne.n	80057ec <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80057ec:	887b      	ldrh	r3, [r7, #2]
 80057ee:	2b40      	cmp	r3, #64	; 0x40
 80057f0:	d125      	bne.n	800583e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80057fa:	e020      	b.n	800583e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80057fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005800:	2b00      	cmp	r3, #0
 8005802:	da03      	bge.n	800580c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800580a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800580c:	887b      	ldrh	r3, [r7, #2]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800581c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800581e:	887b      	ldrh	r3, [r7, #2]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800582e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005830:	887b      	ldrh	r3, [r7, #2]
 8005832:	2b20      	cmp	r3, #32
 8005834:	d103      	bne.n	800583e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f043 0320 	orr.w	r3, r3, #32
 800583c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]
}
 800584e:	bf00      	nop
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	08004ac3 	.word	0x08004ac3
 8005860:	08004c99 	.word	0x08004c99

08005864 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005874:	887b      	ldrh	r3, [r7, #2]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00f      	beq.n	800589e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005884:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005892:	2b28      	cmp	r3, #40	; 0x28
 8005894:	d003      	beq.n	800589e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800589c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800589e:	887b      	ldrh	r3, [r7, #2]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00f      	beq.n	80058c8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80058ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058bc:	2b28      	cmp	r3, #40	; 0x28
 80058be:	d003      	beq.n	80058c8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80058c6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80058c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	da03      	bge.n	80058d8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80058d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80058d8:	887b      	ldrh	r3, [r7, #2]
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d103      	bne.n	80058e6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80058e4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80058e6:	887b      	ldrh	r3, [r7, #2]
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d103      	bne.n	80058f4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f043 0320 	orr.w	r3, r3, #32
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80058f4:	887b      	ldrh	r3, [r7, #2]
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d103      	bne.n	8005902 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005900:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6819      	ldr	r1, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	43da      	mvns	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	400a      	ands	r2, r1
 8005912:	601a      	str	r2, [r3, #0]
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b20      	cmp	r3, #32
 8005934:	d138      	bne.n	80059a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005940:	2302      	movs	r3, #2
 8005942:	e032      	b.n	80059aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2224      	movs	r2, #36	; 0x24
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0201 	bic.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005972:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6819      	ldr	r1, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	e000      	b.n	80059aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059a8:	2302      	movs	r3, #2
  }
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d139      	bne.n	8005a40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e033      	b.n	8005a42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2224      	movs	r2, #36	; 0x24
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e000      	b.n	8005a42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a40:	2302      	movs	r3, #2
  }
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a50:	b08b      	sub	sp, #44	; 0x2c
 8005a52:	af06      	add	r7, sp, #24
 8005a54:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0d7      	b.n	8005c10 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fc fb89 	bl	800218c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2203      	movs	r2, #3
 8005a7e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f006 faa1 	bl	800bfce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	73fb      	strb	r3, [r7, #15]
 8005a90:	e04c      	b.n	8005b2c <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	4613      	mov	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	440b      	add	r3, r1
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	440b      	add	r3, r1
 8005ab8:	7bfa      	ldrb	r2, [r7, #15]
 8005aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005abc:	7bfa      	ldrb	r2, [r7, #15]
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	b298      	uxth	r0, r3
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	440b      	add	r3, r1
 8005ace:	3336      	adds	r3, #54	; 0x36
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	440b      	add	r3, r1
 8005ae4:	3303      	adds	r3, #3
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005aea:	7bfa      	ldrb	r2, [r7, #15]
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	440b      	add	r3, r1
 8005af8:	3338      	adds	r3, #56	; 0x38
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005afe:	7bfa      	ldrb	r2, [r7, #15]
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	440b      	add	r3, r1
 8005b0c:	333c      	adds	r3, #60	; 0x3c
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b12:	7bfa      	ldrb	r2, [r7, #15]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	440b      	add	r3, r1
 8005b20:	3340      	adds	r3, #64	; 0x40
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	73fb      	strb	r3, [r7, #15]
 8005b2c:	7bfa      	ldrb	r2, [r7, #15]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d3ad      	bcc.n	8005a92 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]
 8005b3a:	e044      	b.n	8005bc6 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b3c:	7bfa      	ldrb	r2, [r7, #15]
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	440b      	add	r3, r1
 8005b4a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005b4e:	2200      	movs	r2, #0
 8005b50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b52:	7bfa      	ldrb	r2, [r7, #15]
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	440b      	add	r3, r1
 8005b60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b64:	7bfa      	ldrb	r2, [r7, #15]
 8005b66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b68:	7bfa      	ldrb	r2, [r7, #15]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	440b      	add	r3, r1
 8005b76:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b7e:	7bfa      	ldrb	r2, [r7, #15]
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	440b      	add	r3, r1
 8005b8c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b94:	7bfa      	ldrb	r2, [r7, #15]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	440b      	add	r3, r1
 8005ba2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005baa:	7bfa      	ldrb	r2, [r7, #15]
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	440b      	add	r3, r1
 8005bb8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	73fb      	strb	r3, [r7, #15]
 8005bc6:	7bfa      	ldrb	r2, [r7, #15]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d3b5      	bcc.n	8005b3c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	603b      	str	r3, [r7, #0]
 8005bd6:	687e      	ldr	r6, [r7, #4]
 8005bd8:	466d      	mov	r5, sp
 8005bda:	f106 0410 	add.w	r4, r6, #16
 8005bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	602b      	str	r3, [r5, #0]
 8005be6:	1d33      	adds	r3, r6, #4
 8005be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bea:	6838      	ldr	r0, [r7, #0]
 8005bec:	f006 fa0a 	bl	800c004 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d102      	bne.n	8005c0e <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 fc58 	bl	80074be <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_PCD_Start+0x16>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e012      	b.n	8005c54 <HAL_PCD_Start+0x3c>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f006 f9b0 	bl	800bfa0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f008 fbc9 	bl	800e3dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_PCD_Stop+0x16>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e012      	b.n	8005c98 <HAL_PCD_Stop+0x3c>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f006 f9a5 	bl	800bfce <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f008 fbbe 	bl	800e40a <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f008 fbc1 	bl	800e434 <USB_ReadInterrupts>
 8005cb2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fb33 	bl	800632a <PCD_EP_ISR_Handler>

    return;
 8005cc4:	e110      	b.n	8005ee8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d013      	beq.n	8005cf8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f00f fa03 	bl	80150f4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005cee:	2100      	movs	r1, #0
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f8fc 	bl	8005eee <HAL_PCD_SetAddress>

    return;
 8005cf6:	e0f7      	b.n	8005ee8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00c      	beq.n	8005d1c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d14:	b292      	uxth	r2, r2
 8005d16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005d1a:	e0e5      	b.n	8005ee8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00c      	beq.n	8005d40 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d38:	b292      	uxth	r2, r2
 8005d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005d3e:	e0d3      	b.n	8005ee8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d034      	beq.n	8005db4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0204 	bic.w	r2, r2, #4
 8005d5c:	b292      	uxth	r2, r2
 8005d5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0208 	bic.w	r2, r2, #8
 8005d74:	b292      	uxth	r2, r2
 8005d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d107      	bne.n	8005d94 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 fbbf 	bl	8007512 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f00f f9eb 	bl	8015170 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dac:	b292      	uxth	r2, r2
 8005dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005db2:	e099      	b.n	8005ee8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d027      	beq.n	8005e0e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0208 	orr.w	r2, r2, #8
 8005dd0:	b292      	uxth	r2, r2
 8005dd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005de8:	b292      	uxth	r2, r2
 8005dea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0204 	orr.w	r2, r2, #4
 8005e00:	b292      	uxth	r2, r2
 8005e02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f00f f99c 	bl	8015144 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005e0c:	e06c      	b.n	8005ee8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d040      	beq.n	8005e9a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e2a:	b292      	uxth	r2, r2
 8005e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d12b      	bne.n	8005e92 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0204 	orr.w	r2, r2, #4
 8005e4c:	b292      	uxth	r2, r2
 8005e4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0208 	orr.w	r2, r2, #8
 8005e64:	b292      	uxth	r2, r2
 8005e66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	089b      	lsrs	r3, r3, #2
 8005e7e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e88:	2101      	movs	r1, #1
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f001 fb41 	bl	8007512 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005e90:	e02a      	b.n	8005ee8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f00f f956 	bl	8015144 <HAL_PCD_SuspendCallback>
    return;
 8005e98:	e026      	b.n	8005ee8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00f      	beq.n	8005ec4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005eb6:	b292      	uxth	r2, r2
 8005eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f00f f96d 	bl	801519c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005ec2:	e011      	b.n	8005ee8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00c      	beq.n	8005ee8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ee0:	b292      	uxth	r2, r2
 8005ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005ee6:	bf00      	nop
  }
}
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_PCD_SetAddress+0x1a>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e013      	b.n	8005f30 <HAL_PCD_SetAddress+0x42>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	78fa      	ldrb	r2, [r7, #3]
 8005f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	4611      	mov	r1, r2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f008 fa47 	bl	800e3b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	4608      	mov	r0, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	461a      	mov	r2, r3
 8005f46:	4603      	mov	r3, r0
 8005f48:	70fb      	strb	r3, [r7, #3]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	803b      	strh	r3, [r7, #0]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da0e      	bge.n	8005f7c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	4413      	add	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	705a      	strb	r2, [r3, #1]
 8005f7a:	e00e      	b.n	8005f9a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	f003 0207 	and.w	r2, r3, #7
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4413      	add	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005fa6:	883a      	ldrh	r2, [r7, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	78ba      	ldrb	r2, [r7, #2]
 8005fb0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fc4:	78bb      	ldrb	r3, [r7, #2]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d102      	bne.n	8005fd0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_PCD_EP_Open+0xa6>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e00e      	b.n	8005ffc <HAL_PCD_EP_Open+0xc4>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68f9      	ldr	r1, [r7, #12]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f006 f82b 	bl	800c048 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006014:	2b00      	cmp	r3, #0
 8006016:	da0e      	bge.n	8006036 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	4413      	add	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	705a      	strb	r2, [r3, #1]
 8006034:	e00e      	b.n	8006054 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	f003 0207 	and.w	r2, r3, #7
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	4413      	add	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	b2da      	uxtb	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_PCD_EP_Close+0x6a>
 800606a:	2302      	movs	r3, #2
 800606c:	e00e      	b.n	800608c <HAL_PCD_EP_Close+0x88>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68f9      	ldr	r1, [r7, #12]
 800607c:	4618      	mov	r0, r3
 800607e:	f006 fb77 	bl	800c770 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	607a      	str	r2, [r7, #4]
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	460b      	mov	r3, r1
 80060a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060a4:	7afb      	ldrb	r3, [r7, #11]
 80060a6:	f003 0207 	and.w	r2, r3, #7
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2200      	movs	r2, #0
 80060cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2200      	movs	r2, #0
 80060d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060d4:	7afb      	ldrb	r3, [r7, #11]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060e0:	7afb      	ldrb	r3, [r7, #11]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6979      	ldr	r1, [r7, #20]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f006 fd2a 	bl	800cb4a <USB_EPStartXfer>
 80060f6:	e005      	b.n	8006104 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6979      	ldr	r1, [r7, #20]
 80060fe:	4618      	mov	r0, r3
 8006100:	f006 fd23 	bl	800cb4a <USB_EPStartXfer>
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	f003 0207 	and.w	r2, r3, #7
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	440b      	add	r3, r1
 800612c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006130:	681b      	ldr	r3, [r3, #0]
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b086      	sub	sp, #24
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	460b      	mov	r3, r1
 800614c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800614e:	7afb      	ldrb	r3, [r7, #11]
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2200      	movs	r2, #0
 8006182:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2201      	movs	r2, #1
 8006188:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800618a:	7afb      	ldrb	r3, [r7, #11]
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	b2da      	uxtb	r2, r3
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006196:	7afb      	ldrb	r3, [r7, #11]
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6979      	ldr	r1, [r7, #20]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f006 fccf 	bl	800cb4a <USB_EPStartXfer>
 80061ac:	e005      	b.n	80061ba <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6979      	ldr	r1, [r7, #20]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f006 fcc8 	bl	800cb4a <USB_EPStartXfer>
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	f003 0207 	and.w	r2, r3, #7
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d901      	bls.n	80061e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e03e      	b.n	8006260 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da0e      	bge.n	8006208 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	705a      	strb	r2, [r3, #1]
 8006206:	e00c      	b.n	8006222 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	4413      	add	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	b2da      	uxtb	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_PCD_EP_SetStall+0x7e>
 800623e:	2302      	movs	r3, #2
 8006240:	e00e      	b.n	8006260 <HAL_PCD_EP_SetStall+0x9c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68f9      	ldr	r1, [r7, #12]
 8006250:	4618      	mov	r0, r3
 8006252:	f007 ffb0 	bl	800e1b6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	f003 020f 	and.w	r2, r3, #15
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	429a      	cmp	r2, r3
 8006280:	d901      	bls.n	8006286 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e040      	b.n	8006308 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800628a:	2b00      	cmp	r3, #0
 800628c:	da0e      	bge.n	80062ac <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800628e:	78fb      	ldrb	r3, [r7, #3]
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	4413      	add	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	705a      	strb	r2, [r3, #1]
 80062aa:	e00e      	b.n	80062ca <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	f003 0207 	and.w	r2, r3, #7
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	4413      	add	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_PCD_EP_ClrStall+0x82>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e00e      	b.n	8006308 <HAL_PCD_EP_ClrStall+0xa0>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68f9      	ldr	r1, [r7, #12]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f007 ffad 	bl	800e258 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b096      	sub	sp, #88	; 0x58
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006332:	e39c      	b.n	8006a6e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800633c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006340:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800634e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006352:	2b00      	cmp	r3, #0
 8006354:	f040 815e 	bne.w	8006614 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006358:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2b00      	cmp	r3, #0
 8006362:	d150      	bne.n	8006406 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006374:	81fb      	strh	r3, [r7, #14]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	89fb      	ldrh	r3, [r7, #14]
 800637c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3328      	adds	r3, #40	; 0x28
 800638c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006396:	b29b      	uxth	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	4413      	add	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	4413      	add	r3, r2
 80063a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80063b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80063b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b8:	695a      	ldr	r2, [r3, #20]
 80063ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	441a      	add	r2, r3
 80063c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80063c4:	2100      	movs	r1, #0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f00e fd5c 	bl	8014e84 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 834a 	beq.w	8006a6e <PCD_EP_ISR_Handler+0x744>
 80063da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f040 8345 	bne.w	8006a6e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	b292      	uxth	r2, r2
 80063f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006404:	e333      	b.n	8006a6e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800640c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006418:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800641c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006420:	2b00      	cmp	r3, #0
 8006422:	d032      	beq.n	800648a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642c:	b29b      	uxth	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4413      	add	r3, r2
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6812      	ldr	r2, [r2, #0]
 800643c:	4413      	add	r3, r2
 800643e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006458:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800645a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800645c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800645e:	b29b      	uxth	r3, r3
 8006460:	f008 f83a 	bl	800e4d8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	b29a      	uxth	r2, r3
 800646c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006470:	4013      	ands	r3, r2
 8006472:	823b      	strh	r3, [r7, #16]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	8a3a      	ldrh	r2, [r7, #16]
 800647a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800647e:	b292      	uxth	r2, r2
 8006480:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f00e fc84 	bl	8014d90 <HAL_PCD_SetupStageCallback>
 8006488:	e2f1      	b.n	8006a6e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800648a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800648e:	2b00      	cmp	r3, #0
 8006490:	f280 82ed 	bge.w	8006a6e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29a      	uxth	r2, r3
 800649c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80064a0:	4013      	ands	r3, r2
 80064a2:	83fb      	strh	r3, [r7, #30]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	8bfa      	ldrh	r2, [r7, #30]
 80064aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064ae:	b292      	uxth	r2, r2
 80064b0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	4413      	add	r3, r2
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6812      	ldr	r2, [r2, #0]
 80064ca:	4413      	add	r3, r2
 80064cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80064d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80064da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d019      	beq.n	8006516 <PCD_EP_ISR_Handler+0x1ec>
 80064e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d015      	beq.n	8006516 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f0:	6959      	ldr	r1, [r3, #20]
 80064f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80064f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f007 ffec 	bl	800e4d8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	441a      	add	r2, r3
 800650a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800650e:	2100      	movs	r1, #0
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f00e fd6f 	bl	8014ff4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006522:	2b00      	cmp	r3, #0
 8006524:	f040 82a3 	bne.w	8006a6e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006536:	b29b      	uxth	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	4413      	add	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b3e      	cmp	r3, #62	; 0x3e
 800654e:	d918      	bls.n	8006582 <PCD_EP_ISR_Handler+0x258>
 8006550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	095b      	lsrs	r3, r3, #5
 8006556:	647b      	str	r3, [r7, #68]	; 0x44
 8006558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <PCD_EP_ISR_Handler+0x240>
 8006564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006566:	3b01      	subs	r3, #1
 8006568:	647b      	str	r3, [r7, #68]	; 0x44
 800656a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800656c:	b29b      	uxth	r3, r3
 800656e:	029b      	lsls	r3, r3, #10
 8006570:	b29b      	uxth	r3, r3
 8006572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657a:	b29a      	uxth	r2, r3
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	e029      	b.n	80065d6 <PCD_EP_ISR_Handler+0x2ac>
 8006582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d112      	bne.n	80065b0 <PCD_EP_ISR_Handler+0x286>
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006594:	b29a      	uxth	r2, r3
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	801a      	strh	r2, [r3, #0]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	801a      	strh	r2, [r3, #0]
 80065ae:	e012      	b.n	80065d6 <PCD_EP_ISR_Handler+0x2ac>
 80065b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	647b      	str	r3, [r7, #68]	; 0x44
 80065b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <PCD_EP_ISR_Handler+0x2a0>
 80065c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c6:	3301      	adds	r3, #1
 80065c8:	647b      	str	r3, [r7, #68]	; 0x44
 80065ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	029b      	lsls	r3, r3, #10
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e6:	827b      	strh	r3, [r7, #18]
 80065e8:	8a7b      	ldrh	r3, [r7, #18]
 80065ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065ee:	827b      	strh	r3, [r7, #18]
 80065f0:	8a7b      	ldrh	r3, [r7, #18]
 80065f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065f6:	827b      	strh	r3, [r7, #18]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	8a7b      	ldrh	r3, [r7, #18]
 80065fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660e:	b29b      	uxth	r3, r3
 8006610:	8013      	strh	r3, [r2, #0]
 8006612:	e22c      	b.n	8006a6e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006628:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800662c:	2b00      	cmp	r3, #0
 800662e:	f280 80f6 	bge.w	800681e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29a      	uxth	r2, r3
 8006644:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006648:	4013      	ands	r3, r2
 800664a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006660:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006664:	b292      	uxth	r2, r2
 8006666:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006668:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	4413      	add	r3, r2
 800667c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800667e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006680:	7b1b      	ldrb	r3, [r3, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d123      	bne.n	80066ce <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800668e:	b29b      	uxth	r3, r3
 8006690:	461a      	mov	r2, r3
 8006692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	4413      	add	r3, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	4413      	add	r3, r2
 80066a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80066ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 808e 	beq.w	80067d4 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066be:	6959      	ldr	r1, [r3, #20]
 80066c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c2:	88da      	ldrh	r2, [r3, #6]
 80066c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066c8:	f007 ff06 	bl	800e4d8 <USB_ReadPMA>
 80066cc:	e082      	b.n	80067d4 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80066ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d0:	78db      	ldrb	r3, [r3, #3]
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d10a      	bne.n	80066ec <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80066d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80066da:	461a      	mov	r2, r3
 80066dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f9d3 	bl	8006a8a <HAL_PCD_EP_DB_Receive>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80066ea:	e073      	b.n	80067d4 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006706:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	441a      	add	r2, r3
 8006718:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800671c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006728:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800672c:	b29b      	uxth	r3, r3
 800672e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d022      	beq.n	8006790 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006752:	b29b      	uxth	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	4413      	add	r3, r2
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	4413      	add	r3, r2
 8006764:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800676e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006772:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006776:	2b00      	cmp	r3, #0
 8006778:	d02c      	beq.n	80067d4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006780:	6959      	ldr	r1, [r3, #20]
 8006782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006784:	891a      	ldrh	r2, [r3, #8]
 8006786:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800678a:	f007 fea5 	bl	800e4d8 <USB_ReadPMA>
 800678e:	e021      	b.n	80067d4 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006798:	b29b      	uxth	r3, r3
 800679a:	461a      	mov	r2, r3
 800679c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	4413      	add	r3, r2
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	4413      	add	r3, r2
 80067aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067b4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80067b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d009      	beq.n	80067d4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c6:	6959      	ldr	r1, [r3, #20]
 80067c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ca:	895a      	ldrh	r2, [r3, #10]
 80067cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067d0:	f007 fe82 	bl	800e4d8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80067d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d6:	69da      	ldr	r2, [r3, #28]
 80067d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067dc:	441a      	add	r2, r3
 80067de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80067e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e4:	695a      	ldr	r2, [r3, #20]
 80067e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067ea:	441a      	add	r2, r3
 80067ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80067f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <PCD_EP_ISR_Handler+0x4da>
 80067f8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80067fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	429a      	cmp	r2, r3
 8006802:	d206      	bcs.n	8006812 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f00e fbf2 	bl	8014ff4 <HAL_PCD_DataOutStageCallback>
 8006810:	e005      	b.n	800681e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006818:	4618      	mov	r0, r3
 800681a:	f006 f996 	bl	800cb4a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800681e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8121 	beq.w	8006a6e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800682c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006878:	b29b      	uxth	r3, r3
 800687a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800687c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687e:	78db      	ldrb	r3, [r3, #3]
 8006880:	2b02      	cmp	r3, #2
 8006882:	f000 80a2 	beq.w	80069ca <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8006886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006888:	2200      	movs	r2, #0
 800688a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800688c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800688e:	7b1b      	ldrb	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 8093 	beq.w	80069bc <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006896:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800689a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d046      	beq.n	8006930 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80068a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d126      	bne.n	80068f8 <PCD_EP_ISR_Handler+0x5ce>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	4413      	add	r3, r2
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
 80068c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	00da      	lsls	r2, r3, #3
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	4413      	add	r3, r2
 80068cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068d0:	623b      	str	r3, [r7, #32]
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068dc:	b29a      	uxth	r2, r3
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	801a      	strh	r2, [r3, #0]
 80068f6:	e061      	b.n	80069bc <PCD_EP_ISR_Handler+0x692>
 80068f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d15d      	bne.n	80069bc <PCD_EP_ISR_Handler+0x692>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	4413      	add	r3, r2
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	00da      	lsls	r2, r3, #3
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	4413      	add	r3, r2
 8006922:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006926:	62bb      	str	r3, [r7, #40]	; 0x28
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	2200      	movs	r2, #0
 800692c:	801a      	strh	r2, [r3, #0]
 800692e:	e045      	b.n	80069bc <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006938:	785b      	ldrb	r3, [r3, #1]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d126      	bne.n	800698c <PCD_EP_ISR_Handler+0x662>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	637b      	str	r3, [r7, #52]	; 0x34
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800694c:	b29b      	uxth	r3, r3
 800694e:	461a      	mov	r2, r3
 8006950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006952:	4413      	add	r3, r2
 8006954:	637b      	str	r3, [r7, #52]	; 0x34
 8006956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	00da      	lsls	r2, r3, #3
 800695c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695e:	4413      	add	r3, r2
 8006960:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006964:	633b      	str	r3, [r7, #48]	; 0x30
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006970:	b29a      	uxth	r2, r3
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	801a      	strh	r2, [r3, #0]
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006984:	b29a      	uxth	r2, r3
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	801a      	strh	r2, [r3, #0]
 800698a:	e017      	b.n	80069bc <PCD_EP_ISR_Handler+0x692>
 800698c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698e:	785b      	ldrb	r3, [r3, #1]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d113      	bne.n	80069bc <PCD_EP_ISR_Handler+0x692>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699c:	b29b      	uxth	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a2:	4413      	add	r3, r2
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	00da      	lsls	r2, r3, #3
 80069ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ae:	4413      	add	r3, r2
 80069b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	2200      	movs	r2, #0
 80069ba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80069bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f00e fa5e 	bl	8014e84 <HAL_PCD_DataInStageCallback>
 80069c8:	e051      	b.n	8006a6e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80069ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80069ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d144      	bne.n	8006a60 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069de:	b29b      	uxth	r3, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4413      	add	r3, r2
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	4413      	add	r3, r2
 80069f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80069fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d907      	bls.n	8006a1a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8006a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0c:	699a      	ldr	r2, [r3, #24]
 8006a0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a12:	1ad2      	subs	r2, r2, r3
 8006a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a16:	619a      	str	r2, [r3, #24]
 8006a18:	e002      	b.n	8006a20 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8006a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d106      	bne.n	8006a36 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f00e fa28 	bl	8014e84 <HAL_PCD_DataInStageCallback>
 8006a34:	e01b      	b.n	8006a6e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a38:	695a      	ldr	r2, [r3, #20]
 8006a3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a3e:	441a      	add	r2, r3
 8006a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a42:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a4c:	441a      	add	r2, r3
 8006a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a50:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f006 f876 	bl	800cb4a <USB_EPStartXfer>
 8006a5e:	e006      	b.n	8006a6e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006a60:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006a64:	461a      	mov	r2, r3
 8006a66:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f917 	bl	8006c9c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	b21b      	sxth	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f6ff ac5a 	blt.w	8006334 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3758      	adds	r7, #88	; 0x58
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b088      	sub	sp, #32
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	4613      	mov	r3, r2
 8006a96:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d07c      	beq.n	8006b9c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	4413      	add	r3, r2
 8006abc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ac6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	699a      	ldr	r2, [r3, #24]
 8006acc:	8b7b      	ldrh	r3, [r7, #26]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d306      	bcc.n	8006ae0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	699a      	ldr	r2, [r3, #24]
 8006ad6:	8b7b      	ldrh	r3, [r7, #26]
 8006ad8:	1ad2      	subs	r2, r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	619a      	str	r2, [r3, #24]
 8006ade:	e002      	b.n	8006ae6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d123      	bne.n	8006b36 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b08:	833b      	strh	r3, [r7, #24]
 8006b0a:	8b3b      	ldrh	r3, [r7, #24]
 8006b0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b10:	833b      	strh	r3, [r7, #24]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	441a      	add	r2, r3
 8006b20:	8b3b      	ldrh	r3, [r7, #24]
 8006b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01f      	beq.n	8006b80 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5a:	82fb      	strh	r3, [r7, #22]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	441a      	add	r2, r3
 8006b6a:	8afb      	ldrh	r3, [r7, #22]
 8006b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006b80:	8b7b      	ldrh	r3, [r7, #26]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 8085 	beq.w	8006c92 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	6959      	ldr	r1, [r3, #20]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	891a      	ldrh	r2, [r3, #8]
 8006b94:	8b7b      	ldrh	r3, [r7, #26]
 8006b96:	f007 fc9f 	bl	800e4d8 <USB_ReadPMA>
 8006b9a:	e07a      	b.n	8006c92 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	4413      	add	r3, r2
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	6812      	ldr	r2, [r2, #0]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bc0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	8b7b      	ldrh	r3, [r7, #26]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d306      	bcc.n	8006bda <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	699a      	ldr	r2, [r3, #24]
 8006bd0:	8b7b      	ldrh	r3, [r7, #26]
 8006bd2:	1ad2      	subs	r2, r2, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	619a      	str	r2, [r3, #24]
 8006bd8:	e002      	b.n	8006be0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d123      	bne.n	8006c30 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	83fb      	strh	r3, [r7, #30]
 8006c04:	8bfb      	ldrh	r3, [r7, #30]
 8006c06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c0a:	83fb      	strh	r3, [r7, #30]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	441a      	add	r2, r3
 8006c1a:	8bfb      	ldrh	r3, [r7, #30]
 8006c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006c30:	88fb      	ldrh	r3, [r7, #6]
 8006c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d11f      	bne.n	8006c7a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	83bb      	strh	r3, [r7, #28]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	441a      	add	r2, r3
 8006c64:	8bbb      	ldrh	r3, [r7, #28]
 8006c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006c7a:	8b7b      	ldrh	r3, [r7, #26]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d008      	beq.n	8006c92 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6959      	ldr	r1, [r3, #20]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	895a      	ldrh	r2, [r3, #10]
 8006c8c:	8b7b      	ldrh	r3, [r7, #26]
 8006c8e:	f007 fc23 	bl	800e4d8 <USB_ReadPMA>
    }
  }

  return count;
 8006c92:	8b7b      	ldrh	r3, [r7, #26]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b0a2      	sub	sp, #136	; 0x88
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 81c5 	beq.w	8007040 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	4413      	add	r3, r2
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	6812      	ldr	r2, [r2, #0]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d907      	bls.n	8006cfa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	699a      	ldr	r2, [r3, #24]
 8006cee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006cf2:	1ad2      	subs	r2, r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	619a      	str	r2, [r3, #24]
 8006cf8:	e002      	b.n	8006d00 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f040 80b9 	bne.w	8006e7c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	785b      	ldrb	r3, [r3, #1]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d126      	bne.n	8006d60 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	4413      	add	r3, r2
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	00da      	lsls	r2, r3, #3
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	4413      	add	r3, r2
 8006d34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	e01a      	b.n	8006d96 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d116      	bne.n	8006d96 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	4413      	add	r3, r2
 8006d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	00da      	lsls	r2, r3, #3
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	4413      	add	r3, r2
 8006d8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	2200      	movs	r2, #0
 8006d94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	623b      	str	r3, [r7, #32]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d126      	bne.n	8006df2 <HAL_PCD_EP_DB_Transmit+0x156>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	4413      	add	r3, r2
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	00da      	lsls	r2, r3, #3
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	801a      	strh	r2, [r3, #0]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	801a      	strh	r2, [r3, #0]
 8006df0:	e017      	b.n	8006e22 <HAL_PCD_EP_DB_Transmit+0x186>
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d113      	bne.n	8006e22 <HAL_PCD_EP_DB_Transmit+0x186>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	4413      	add	r3, r2
 8006e0a:	623b      	str	r3, [r7, #32]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	00da      	lsls	r2, r3, #3
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	4413      	add	r3, r2
 8006e16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e1a:	61fb      	str	r3, [r7, #28]
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	4619      	mov	r1, r3
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f00e f82b 	bl	8014e84 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006e2e:	88fb      	ldrh	r3, [r7, #6]
 8006e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 82d2 	beq.w	80073de <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e54:	827b      	strh	r3, [r7, #18]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	441a      	add	r2, r3
 8006e64:	8a7b      	ldrh	r3, [r7, #18]
 8006e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	8013      	strh	r3, [r2, #0]
 8006e7a:	e2b0      	b.n	80073de <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d021      	beq.n	8006eca <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	441a      	add	r2, r3
 8006eb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	f040 8284 	bne.w	80073de <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	695a      	ldr	r2, [r3, #20]
 8006eda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ede:	441a      	add	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	69da      	ldr	r2, [r3, #28]
 8006ee8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006eec:	441a      	add	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6a1a      	ldr	r2, [r3, #32]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d309      	bcc.n	8006f12 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6a1a      	ldr	r2, [r3, #32]
 8006f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0a:	1ad2      	subs	r2, r2, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	621a      	str	r2, [r3, #32]
 8006f10:	e015      	b.n	8006f3e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d107      	bne.n	8006f2a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006f1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f1e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006f28:	e009      	b.n	8006f3e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	785b      	ldrb	r3, [r3, #1]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d155      	bne.n	8006ff2 <HAL_PCD_EP_DB_Transmit+0x356>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	4413      	add	r3, r2
 8006f5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	00da      	lsls	r2, r3, #3
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	4413      	add	r3, r2
 8006f68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f70:	2b3e      	cmp	r3, #62	; 0x3e
 8006f72:	d916      	bls.n	8006fa2 <HAL_PCD_EP_DB_Transmit+0x306>
 8006f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7c:	f003 031f 	and.w	r3, r3, #31
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d102      	bne.n	8006f8a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8006f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f86:	3b01      	subs	r3, #1
 8006f88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	029b      	lsls	r3, r3, #10
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9e:	801a      	strh	r2, [r3, #0]
 8006fa0:	e043      	b.n	800702a <HAL_PCD_EP_DB_Transmit+0x38e>
 8006fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d112      	bne.n	8006fce <HAL_PCD_EP_DB_Transmit+0x332>
 8006fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fca:	801a      	strh	r2, [r3, #0]
 8006fcc:	e02d      	b.n	800702a <HAL_PCD_EP_DB_Transmit+0x38e>
 8006fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd0:	085b      	lsrs	r3, r3, #1
 8006fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <HAL_PCD_EP_DB_Transmit+0x348>
 8006fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	029b      	lsls	r3, r3, #10
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fee:	801a      	strh	r2, [r3, #0]
 8006ff0:	e01b      	b.n	800702a <HAL_PCD_EP_DB_Transmit+0x38e>
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d117      	bne.n	800702a <HAL_PCD_EP_DB_Transmit+0x38e>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007008:	b29b      	uxth	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800700e:	4413      	add	r3, r2
 8007010:	643b      	str	r3, [r7, #64]	; 0x40
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	00da      	lsls	r2, r3, #3
 8007018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800701a:	4413      	add	r3, r2
 800701c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007024:	b29a      	uxth	r2, r3
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6818      	ldr	r0, [r3, #0]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	6959      	ldr	r1, [r3, #20]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	891a      	ldrh	r2, [r3, #8]
 8007036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007038:	b29b      	uxth	r3, r3
 800703a:	f007 fa0b 	bl	800e454 <USB_WritePMA>
 800703e:	e1ce      	b.n	80073de <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007048:	b29b      	uxth	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	4413      	add	r3, r2
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	4413      	add	r3, r2
 800705a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007064:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007070:	429a      	cmp	r2, r3
 8007072:	d307      	bcc.n	8007084 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	699a      	ldr	r2, [r3, #24]
 8007078:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800707c:	1ad2      	subs	r2, r2, r3
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	619a      	str	r2, [r3, #24]
 8007082:	e002      	b.n	800708a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2200      	movs	r2, #0
 8007088:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	2b00      	cmp	r3, #0
 8007090:	f040 80c4 	bne.w	800721c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	785b      	ldrb	r3, [r3, #1]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d126      	bne.n	80070ea <HAL_PCD_EP_DB_Transmit+0x44e>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070b0:	4413      	add	r3, r2
 80070b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	00da      	lsls	r2, r3, #3
 80070ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070bc:	4413      	add	r3, r2
 80070be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070c2:	667b      	str	r3, [r7, #100]	; 0x64
 80070c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070e6:	801a      	strh	r2, [r3, #0]
 80070e8:	e01a      	b.n	8007120 <HAL_PCD_EP_DB_Transmit+0x484>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	785b      	ldrb	r3, [r3, #1]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d116      	bne.n	8007120 <HAL_PCD_EP_DB_Transmit+0x484>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	673b      	str	r3, [r7, #112]	; 0x70
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007100:	b29b      	uxth	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007106:	4413      	add	r3, r2
 8007108:	673b      	str	r3, [r7, #112]	; 0x70
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	00da      	lsls	r2, r3, #3
 8007110:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007112:	4413      	add	r3, r2
 8007114:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007118:	66fb      	str	r3, [r7, #108]	; 0x6c
 800711a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711c:	2200      	movs	r2, #0
 800711e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d12f      	bne.n	800718e <HAL_PCD_EP_DB_Transmit+0x4f2>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800713e:	b29b      	uxth	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007146:	4413      	add	r3, r2
 8007148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	00da      	lsls	r2, r3, #3
 8007152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007156:	4413      	add	r3, r2
 8007158:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800715c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	b29b      	uxth	r3, r3
 8007168:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800716c:	b29a      	uxth	r2, r3
 800716e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007172:	801a      	strh	r2, [r3, #0]
 8007174:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007184:	b29a      	uxth	r2, r3
 8007186:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e017      	b.n	80071be <HAL_PCD_EP_DB_Transmit+0x522>
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	785b      	ldrb	r3, [r3, #1]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d113      	bne.n	80071be <HAL_PCD_EP_DB_Transmit+0x522>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800719e:	b29b      	uxth	r3, r3
 80071a0:	461a      	mov	r2, r3
 80071a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071a4:	4413      	add	r3, r2
 80071a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	00da      	lsls	r2, r3, #3
 80071ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071b0:	4413      	add	r3, r2
 80071b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80071b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ba:	2200      	movs	r2, #0
 80071bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	4619      	mov	r1, r3
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f00d fe5d 	bl	8014e84 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 8104 	bne.w	80073de <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	441a      	add	r2, r3
 8007202:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007216:	b29b      	uxth	r3, r3
 8007218:	8013      	strh	r3, [r2, #0]
 800721a:	e0e0      	b.n	80073de <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800721c:	88fb      	ldrh	r3, [r7, #6]
 800721e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d121      	bne.n	800726a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007240:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	441a      	add	r2, r3
 8007252:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800725a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800725e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007266:	b29b      	uxth	r3, r3
 8007268:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007270:	2b01      	cmp	r3, #1
 8007272:	f040 80b4 	bne.w	80073de <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	695a      	ldr	r2, [r3, #20]
 800727a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800727e:	441a      	add	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	69da      	ldr	r2, [r3, #28]
 8007288:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800728c:	441a      	add	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	6a1a      	ldr	r2, [r3, #32]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	429a      	cmp	r2, r3
 800729c:	d309      	bcc.n	80072b2 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	6a1a      	ldr	r2, [r3, #32]
 80072a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072aa:	1ad2      	subs	r2, r2, r3
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	621a      	str	r2, [r3, #32]
 80072b0:	e015      	b.n	80072de <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d107      	bne.n	80072ca <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80072ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072be:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80072c8:	e009      	b.n	80072de <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2200      	movs	r2, #0
 80072d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	663b      	str	r3, [r7, #96]	; 0x60
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	785b      	ldrb	r3, [r3, #1]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d155      	bne.n	8007398 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	461a      	mov	r2, r3
 80072fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007300:	4413      	add	r3, r2
 8007302:	65bb      	str	r3, [r7, #88]	; 0x58
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	00da      	lsls	r2, r3, #3
 800730a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800730c:	4413      	add	r3, r2
 800730e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007312:	657b      	str	r3, [r7, #84]	; 0x54
 8007314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007316:	2b3e      	cmp	r3, #62	; 0x3e
 8007318:	d916      	bls.n	8007348 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800731a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800731c:	095b      	lsrs	r3, r3, #5
 800731e:	677b      	str	r3, [r7, #116]	; 0x74
 8007320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	2b00      	cmp	r3, #0
 8007328:	d102      	bne.n	8007330 <HAL_PCD_EP_DB_Transmit+0x694>
 800732a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800732c:	3b01      	subs	r3, #1
 800732e:	677b      	str	r3, [r7, #116]	; 0x74
 8007330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007332:	b29b      	uxth	r3, r3
 8007334:	029b      	lsls	r3, r3, #10
 8007336:	b29b      	uxth	r3, r3
 8007338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007340:	b29a      	uxth	r2, r3
 8007342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	e040      	b.n	80073ca <HAL_PCD_EP_DB_Transmit+0x72e>
 8007348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800734a:	2b00      	cmp	r3, #0
 800734c:	d112      	bne.n	8007374 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800734e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	b29b      	uxth	r3, r3
 8007354:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007358:	b29a      	uxth	r2, r3
 800735a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800736c:	b29a      	uxth	r2, r3
 800736e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007370:	801a      	strh	r2, [r3, #0]
 8007372:	e02a      	b.n	80073ca <HAL_PCD_EP_DB_Transmit+0x72e>
 8007374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007376:	085b      	lsrs	r3, r3, #1
 8007378:	677b      	str	r3, [r7, #116]	; 0x74
 800737a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007386:	3301      	adds	r3, #1
 8007388:	677b      	str	r3, [r7, #116]	; 0x74
 800738a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800738c:	b29b      	uxth	r3, r3
 800738e:	029b      	lsls	r3, r3, #10
 8007390:	b29a      	uxth	r2, r3
 8007392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007394:	801a      	strh	r2, [r3, #0]
 8007396:	e018      	b.n	80073ca <HAL_PCD_EP_DB_Transmit+0x72e>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	785b      	ldrb	r3, [r3, #1]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d114      	bne.n	80073ca <HAL_PCD_EP_DB_Transmit+0x72e>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	461a      	mov	r2, r3
 80073ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ae:	4413      	add	r3, r2
 80073b0:	663b      	str	r3, [r7, #96]	; 0x60
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	00da      	lsls	r2, r3, #3
 80073b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ba:	4413      	add	r3, r2
 80073bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6818      	ldr	r0, [r3, #0]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6959      	ldr	r1, [r3, #20]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	895a      	ldrh	r2, [r3, #10]
 80073d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d8:	b29b      	uxth	r3, r3
 80073da:	f007 f83b 	bl	800e454 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f8:	823b      	strh	r3, [r7, #16]
 80073fa:	8a3b      	ldrh	r3, [r7, #16]
 80073fc:	f083 0310 	eor.w	r3, r3, #16
 8007400:	823b      	strh	r3, [r7, #16]
 8007402:	8a3b      	ldrh	r3, [r7, #16]
 8007404:	f083 0320 	eor.w	r3, r3, #32
 8007408:	823b      	strh	r3, [r7, #16]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	441a      	add	r2, r3
 8007418:	8a3b      	ldrh	r3, [r7, #16]
 800741a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742a:	b29b      	uxth	r3, r3
 800742c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3788      	adds	r7, #136	; 0x88
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	607b      	str	r3, [r7, #4]
 8007442:	460b      	mov	r3, r1
 8007444:	817b      	strh	r3, [r7, #10]
 8007446:	4613      	mov	r3, r2
 8007448:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800744a:	897b      	ldrh	r3, [r7, #10]
 800744c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007456:	897b      	ldrh	r3, [r7, #10]
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	4413      	add	r3, r2
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	e009      	b.n	8007482 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800746e:	897a      	ldrh	r2, [r7, #10]
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007482:	893b      	ldrh	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d107      	bne.n	8007498 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2200      	movs	r2, #0
 800748c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	b29a      	uxth	r2, r3
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	80da      	strh	r2, [r3, #6]
 8007496:	e00b      	b.n	80074b0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2201      	movs	r2, #1
 800749c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	0c1b      	lsrs	r3, r3, #16
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80074be:	b480      	push	{r7}
 80074c0:	b085      	sub	sp, #20
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	f043 0301 	orr.w	r3, r3, #1
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	f043 0302 	orr.w	r3, r3, #2
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
	...

0800752c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d141      	bne.n	80075be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800753a:	4b4b      	ldr	r3, [pc, #300]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007546:	d131      	bne.n	80075ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007548:	4b47      	ldr	r3, [pc, #284]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800754a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800754e:	4a46      	ldr	r2, [pc, #280]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007558:	4b43      	ldr	r3, [pc, #268]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007560:	4a41      	ldr	r2, [pc, #260]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007566:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007568:	4b40      	ldr	r3, [pc, #256]	; (800766c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2232      	movs	r2, #50	; 0x32
 800756e:	fb02 f303 	mul.w	r3, r2, r3
 8007572:	4a3f      	ldr	r2, [pc, #252]	; (8007670 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007574:	fba2 2303 	umull	r2, r3, r2, r3
 8007578:	0c9b      	lsrs	r3, r3, #18
 800757a:	3301      	adds	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800757e:	e002      	b.n	8007586 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3b01      	subs	r3, #1
 8007584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007586:	4b38      	ldr	r3, [pc, #224]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800758e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007592:	d102      	bne.n	800759a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f2      	bne.n	8007580 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800759a:	4b33      	ldr	r3, [pc, #204]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075a6:	d158      	bne.n	800765a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e057      	b.n	800765c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075ac:	4b2e      	ldr	r3, [pc, #184]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075b2:	4a2d      	ldr	r2, [pc, #180]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80075bc:	e04d      	b.n	800765a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c4:	d141      	bne.n	800764a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80075c6:	4b28      	ldr	r3, [pc, #160]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d2:	d131      	bne.n	8007638 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075d4:	4b24      	ldr	r3, [pc, #144]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075da:	4a23      	ldr	r2, [pc, #140]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075e4:	4b20      	ldr	r3, [pc, #128]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80075ec:	4a1e      	ldr	r2, [pc, #120]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075f4:	4b1d      	ldr	r3, [pc, #116]	; (800766c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2232      	movs	r2, #50	; 0x32
 80075fa:	fb02 f303 	mul.w	r3, r2, r3
 80075fe:	4a1c      	ldr	r2, [pc, #112]	; (8007670 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007600:	fba2 2303 	umull	r2, r3, r2, r3
 8007604:	0c9b      	lsrs	r3, r3, #18
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800760a:	e002      	b.n	8007612 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3b01      	subs	r3, #1
 8007610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800761a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761e:	d102      	bne.n	8007626 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1f2      	bne.n	800760c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007626:	4b10      	ldr	r3, [pc, #64]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800762e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007632:	d112      	bne.n	800765a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e011      	b.n	800765c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007638:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800763a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800763e:	4a0a      	ldr	r2, [pc, #40]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007644:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007648:	e007      	b.n	800765a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800764a:	4b07      	ldr	r3, [pc, #28]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007652:	4a05      	ldr	r2, [pc, #20]	; (8007668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007654:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007658:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	40007000 	.word	0x40007000
 800766c:	20000000 	.word	0x20000000
 8007670:	431bde83 	.word	0x431bde83

08007674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e306      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d075      	beq.n	800777e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007692:	4b97      	ldr	r3, [pc, #604]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 030c 	and.w	r3, r3, #12
 800769a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800769c:	4b94      	ldr	r3, [pc, #592]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	2b0c      	cmp	r3, #12
 80076aa:	d102      	bne.n	80076b2 <HAL_RCC_OscConfig+0x3e>
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d002      	beq.n	80076b8 <HAL_RCC_OscConfig+0x44>
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d10b      	bne.n	80076d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b8:	4b8d      	ldr	r3, [pc, #564]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d05b      	beq.n	800777c <HAL_RCC_OscConfig+0x108>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d157      	bne.n	800777c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e2e1      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d8:	d106      	bne.n	80076e8 <HAL_RCC_OscConfig+0x74>
 80076da:	4b85      	ldr	r3, [pc, #532]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a84      	ldr	r2, [pc, #528]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80076e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	e01d      	b.n	8007724 <HAL_RCC_OscConfig+0xb0>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076f0:	d10c      	bne.n	800770c <HAL_RCC_OscConfig+0x98>
 80076f2:	4b7f      	ldr	r3, [pc, #508]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a7e      	ldr	r2, [pc, #504]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80076f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	4b7c      	ldr	r3, [pc, #496]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a7b      	ldr	r2, [pc, #492]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	e00b      	b.n	8007724 <HAL_RCC_OscConfig+0xb0>
 800770c:	4b78      	ldr	r3, [pc, #480]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a77      	ldr	r2, [pc, #476]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	4b75      	ldr	r3, [pc, #468]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a74      	ldr	r2, [pc, #464]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 800771e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d013      	beq.n	8007754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772c:	f7fa feb2 	bl	8002494 <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007734:	f7fa feae 	bl	8002494 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b64      	cmp	r3, #100	; 0x64
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e2a6      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007746:	4b6a      	ldr	r3, [pc, #424]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0f0      	beq.n	8007734 <HAL_RCC_OscConfig+0xc0>
 8007752:	e014      	b.n	800777e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007754:	f7fa fe9e 	bl	8002494 <HAL_GetTick>
 8007758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800775a:	e008      	b.n	800776e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800775c:	f7fa fe9a 	bl	8002494 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b64      	cmp	r3, #100	; 0x64
 8007768:	d901      	bls.n	800776e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e292      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800776e:	4b60      	ldr	r3, [pc, #384]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1f0      	bne.n	800775c <HAL_RCC_OscConfig+0xe8>
 800777a:	e000      	b.n	800777e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800777c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d075      	beq.n	8007876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800778a:	4b59      	ldr	r3, [pc, #356]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f003 030c 	and.w	r3, r3, #12
 8007792:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007794:	4b56      	ldr	r3, [pc, #344]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f003 0303 	and.w	r3, r3, #3
 800779c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	2b0c      	cmp	r3, #12
 80077a2:	d102      	bne.n	80077aa <HAL_RCC_OscConfig+0x136>
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d002      	beq.n	80077b0 <HAL_RCC_OscConfig+0x13c>
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	d11f      	bne.n	80077f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077b0:	4b4f      	ldr	r3, [pc, #316]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <HAL_RCC_OscConfig+0x154>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e265      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077c8:	4b49      	ldr	r3, [pc, #292]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	061b      	lsls	r3, r3, #24
 80077d6:	4946      	ldr	r1, [pc, #280]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80077dc:	4b45      	ldr	r3, [pc, #276]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fa fd17 	bl	8002214 <HAL_InitTick>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d043      	beq.n	8007874 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e251      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d023      	beq.n	8007840 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077f8:	4b3d      	ldr	r3, [pc, #244]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a3c      	ldr	r2, [pc, #240]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80077fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007804:	f7fa fe46 	bl	8002494 <HAL_GetTick>
 8007808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800780a:	e008      	b.n	800781e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800780c:	f7fa fe42 	bl	8002494 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b02      	cmp	r3, #2
 8007818:	d901      	bls.n	800781e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e23a      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800781e:	4b34      	ldr	r3, [pc, #208]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0f0      	beq.n	800780c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800782a:	4b31      	ldr	r3, [pc, #196]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	061b      	lsls	r3, r3, #24
 8007838:	492d      	ldr	r1, [pc, #180]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 800783a:	4313      	orrs	r3, r2
 800783c:	604b      	str	r3, [r1, #4]
 800783e:	e01a      	b.n	8007876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007840:	4b2b      	ldr	r3, [pc, #172]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a2a      	ldr	r2, [pc, #168]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800784a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784c:	f7fa fe22 	bl	8002494 <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007854:	f7fa fe1e 	bl	8002494 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e216      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007866:	4b22      	ldr	r3, [pc, #136]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1f0      	bne.n	8007854 <HAL_RCC_OscConfig+0x1e0>
 8007872:	e000      	b.n	8007876 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007874:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d041      	beq.n	8007906 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01c      	beq.n	80078c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800788a:	4b19      	ldr	r3, [pc, #100]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 800788c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007890:	4a17      	ldr	r2, [pc, #92]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007892:	f043 0301 	orr.w	r3, r3, #1
 8007896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800789a:	f7fa fdfb 	bl	8002494 <HAL_GetTick>
 800789e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078a0:	e008      	b.n	80078b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078a2:	f7fa fdf7 	bl	8002494 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e1ef      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078b4:	4b0e      	ldr	r3, [pc, #56]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80078b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0ef      	beq.n	80078a2 <HAL_RCC_OscConfig+0x22e>
 80078c2:	e020      	b.n	8007906 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078c4:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80078c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ca:	4a09      	ldr	r2, [pc, #36]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80078cc:	f023 0301 	bic.w	r3, r3, #1
 80078d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d4:	f7fa fdde 	bl	8002494 <HAL_GetTick>
 80078d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078da:	e00d      	b.n	80078f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078dc:	f7fa fdda 	bl	8002494 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d906      	bls.n	80078f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e1d2      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
 80078ee:	bf00      	nop
 80078f0:	40021000 	.word	0x40021000
 80078f4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078f8:	4b8c      	ldr	r3, [pc, #560]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 80078fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1ea      	bne.n	80078dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0304 	and.w	r3, r3, #4
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 80a6 	beq.w	8007a60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007914:	2300      	movs	r3, #0
 8007916:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007918:	4b84      	ldr	r3, [pc, #528]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 800791a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <HAL_RCC_OscConfig+0x2b4>
 8007924:	2301      	movs	r3, #1
 8007926:	e000      	b.n	800792a <HAL_RCC_OscConfig+0x2b6>
 8007928:	2300      	movs	r3, #0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00d      	beq.n	800794a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800792e:	4b7f      	ldr	r3, [pc, #508]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007932:	4a7e      	ldr	r2, [pc, #504]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007938:	6593      	str	r3, [r2, #88]	; 0x58
 800793a:	4b7c      	ldr	r3, [pc, #496]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 800793c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007946:	2301      	movs	r3, #1
 8007948:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800794a:	4b79      	ldr	r3, [pc, #484]	; (8007b30 <HAL_RCC_OscConfig+0x4bc>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007952:	2b00      	cmp	r3, #0
 8007954:	d118      	bne.n	8007988 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007956:	4b76      	ldr	r3, [pc, #472]	; (8007b30 <HAL_RCC_OscConfig+0x4bc>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a75      	ldr	r2, [pc, #468]	; (8007b30 <HAL_RCC_OscConfig+0x4bc>)
 800795c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007962:	f7fa fd97 	bl	8002494 <HAL_GetTick>
 8007966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007968:	e008      	b.n	800797c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800796a:	f7fa fd93 	bl	8002494 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d901      	bls.n	800797c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e18b      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800797c:	4b6c      	ldr	r3, [pc, #432]	; (8007b30 <HAL_RCC_OscConfig+0x4bc>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0f0      	beq.n	800796a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d108      	bne.n	80079a2 <HAL_RCC_OscConfig+0x32e>
 8007990:	4b66      	ldr	r3, [pc, #408]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007996:	4a65      	ldr	r2, [pc, #404]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007998:	f043 0301 	orr.w	r3, r3, #1
 800799c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079a0:	e024      	b.n	80079ec <HAL_RCC_OscConfig+0x378>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	2b05      	cmp	r3, #5
 80079a8:	d110      	bne.n	80079cc <HAL_RCC_OscConfig+0x358>
 80079aa:	4b60      	ldr	r3, [pc, #384]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 80079ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b0:	4a5e      	ldr	r2, [pc, #376]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 80079b2:	f043 0304 	orr.w	r3, r3, #4
 80079b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079ba:	4b5c      	ldr	r3, [pc, #368]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 80079bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c0:	4a5a      	ldr	r2, [pc, #360]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 80079c2:	f043 0301 	orr.w	r3, r3, #1
 80079c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079ca:	e00f      	b.n	80079ec <HAL_RCC_OscConfig+0x378>
 80079cc:	4b57      	ldr	r3, [pc, #348]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 80079ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d2:	4a56      	ldr	r2, [pc, #344]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 80079d4:	f023 0301 	bic.w	r3, r3, #1
 80079d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079dc:	4b53      	ldr	r3, [pc, #332]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 80079de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e2:	4a52      	ldr	r2, [pc, #328]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 80079e4:	f023 0304 	bic.w	r3, r3, #4
 80079e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d016      	beq.n	8007a22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f4:	f7fa fd4e 	bl	8002494 <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079fa:	e00a      	b.n	8007a12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079fc:	f7fa fd4a 	bl	8002494 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e140      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a12:	4b46      	ldr	r3, [pc, #280]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0ed      	beq.n	80079fc <HAL_RCC_OscConfig+0x388>
 8007a20:	e015      	b.n	8007a4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a22:	f7fa fd37 	bl	8002494 <HAL_GetTick>
 8007a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a28:	e00a      	b.n	8007a40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a2a:	f7fa fd33 	bl	8002494 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d901      	bls.n	8007a40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e129      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a40:	4b3a      	ldr	r3, [pc, #232]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1ed      	bne.n	8007a2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a4e:	7ffb      	ldrb	r3, [r7, #31]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d105      	bne.n	8007a60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a54:	4b35      	ldr	r3, [pc, #212]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a58:	4a34      	ldr	r2, [pc, #208]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0320 	and.w	r3, r3, #32
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d03c      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d01c      	beq.n	8007aae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a74:	4b2d      	ldr	r3, [pc, #180]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a7a:	4a2c      	ldr	r2, [pc, #176]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007a7c:	f043 0301 	orr.w	r3, r3, #1
 8007a80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a84:	f7fa fd06 	bl	8002494 <HAL_GetTick>
 8007a88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a8c:	f7fa fd02 	bl	8002494 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e0fa      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a9e:	4b23      	ldr	r3, [pc, #140]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0ef      	beq.n	8007a8c <HAL_RCC_OscConfig+0x418>
 8007aac:	e01b      	b.n	8007ae6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007aae:	4b1f      	ldr	r3, [pc, #124]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ab4:	4a1d      	ldr	r2, [pc, #116]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007ab6:	f023 0301 	bic.w	r3, r3, #1
 8007aba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007abe:	f7fa fce9 	bl	8002494 <HAL_GetTick>
 8007ac2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ac4:	e008      	b.n	8007ad8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ac6:	f7fa fce5 	bl	8002494 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e0dd      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ad8:	4b14      	ldr	r3, [pc, #80]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1ef      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 80d1 	beq.w	8007c92 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007af0:	4b0e      	ldr	r3, [pc, #56]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f003 030c 	and.w	r3, r3, #12
 8007af8:	2b0c      	cmp	r3, #12
 8007afa:	f000 808b 	beq.w	8007c14 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d15e      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b06:	4b09      	ldr	r3, [pc, #36]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a08      	ldr	r2, [pc, #32]	; (8007b2c <HAL_RCC_OscConfig+0x4b8>)
 8007b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b12:	f7fa fcbf 	bl	8002494 <HAL_GetTick>
 8007b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b18:	e00c      	b.n	8007b34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b1a:	f7fa fcbb 	bl	8002494 <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d905      	bls.n	8007b34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e0b3      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b34:	4b59      	ldr	r3, [pc, #356]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1ec      	bne.n	8007b1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b40:	4b56      	ldr	r3, [pc, #344]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	4b56      	ldr	r3, [pc, #344]	; (8007ca0 <HAL_RCC_OscConfig+0x62c>)
 8007b46:	4013      	ands	r3, r2
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6a11      	ldr	r1, [r2, #32]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b50:	3a01      	subs	r2, #1
 8007b52:	0112      	lsls	r2, r2, #4
 8007b54:	4311      	orrs	r1, r2
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007b5a:	0212      	lsls	r2, r2, #8
 8007b5c:	4311      	orrs	r1, r2
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007b62:	0852      	lsrs	r2, r2, #1
 8007b64:	3a01      	subs	r2, #1
 8007b66:	0552      	lsls	r2, r2, #21
 8007b68:	4311      	orrs	r1, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b6e:	0852      	lsrs	r2, r2, #1
 8007b70:	3a01      	subs	r2, #1
 8007b72:	0652      	lsls	r2, r2, #25
 8007b74:	4311      	orrs	r1, r2
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007b7a:	06d2      	lsls	r2, r2, #27
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	4947      	ldr	r1, [pc, #284]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b84:	4b45      	ldr	r3, [pc, #276]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a44      	ldr	r2, [pc, #272]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b90:	4b42      	ldr	r3, [pc, #264]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	4a41      	ldr	r2, [pc, #260]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9c:	f7fa fc7a 	bl	8002494 <HAL_GetTick>
 8007ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ba4:	f7fa fc76 	bl	8002494 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e06e      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bb6:	4b39      	ldr	r3, [pc, #228]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0f0      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x530>
 8007bc2:	e066      	b.n	8007c92 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bc4:	4b35      	ldr	r3, [pc, #212]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a34      	ldr	r2, [pc, #208]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007bd0:	4b32      	ldr	r3, [pc, #200]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	4a31      	ldr	r2, [pc, #196]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007bd6:	f023 0303 	bic.w	r3, r3, #3
 8007bda:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007bdc:	4b2f      	ldr	r3, [pc, #188]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	4a2e      	ldr	r2, [pc, #184]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007be2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bec:	f7fa fc52 	bl	8002494 <HAL_GetTick>
 8007bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bf2:	e008      	b.n	8007c06 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf4:	f7fa fc4e 	bl	8002494 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e046      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c06:	4b25      	ldr	r3, [pc, #148]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f0      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x580>
 8007c12:	e03e      	b.n	8007c92 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e039      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007c20:	4b1e      	ldr	r3, [pc, #120]	; (8007c9c <HAL_RCC_OscConfig+0x628>)
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f003 0203 	and.w	r2, r3, #3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d12c      	bne.n	8007c8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d123      	bne.n	8007c8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d11b      	bne.n	8007c8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d113      	bne.n	8007c8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c70:	085b      	lsrs	r3, r3, #1
 8007c72:	3b01      	subs	r3, #1
 8007c74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d109      	bne.n	8007c8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c84:	085b      	lsrs	r3, r3, #1
 8007c86:	3b01      	subs	r3, #1
 8007c88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d001      	beq.n	8007c92 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e000      	b.n	8007c94 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3720      	adds	r7, #32
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	40021000 	.word	0x40021000
 8007ca0:	019f800c 	.word	0x019f800c

08007ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e11e      	b.n	8007efa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cbc:	4b91      	ldr	r3, [pc, #580]	; (8007f04 <HAL_RCC_ClockConfig+0x260>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 030f 	and.w	r3, r3, #15
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d910      	bls.n	8007cec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cca:	4b8e      	ldr	r3, [pc, #568]	; (8007f04 <HAL_RCC_ClockConfig+0x260>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f023 020f 	bic.w	r2, r3, #15
 8007cd2:	498c      	ldr	r1, [pc, #560]	; (8007f04 <HAL_RCC_ClockConfig+0x260>)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cda:	4b8a      	ldr	r3, [pc, #552]	; (8007f04 <HAL_RCC_ClockConfig+0x260>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 030f 	and.w	r3, r3, #15
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d001      	beq.n	8007cec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e106      	b.n	8007efa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d073      	beq.n	8007de0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d129      	bne.n	8007d54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d00:	4b81      	ldr	r3, [pc, #516]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e0f4      	b.n	8007efa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007d10:	f000 f9d0 	bl	80080b4 <RCC_GetSysClockFreqFromPLLSource>
 8007d14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	4a7c      	ldr	r2, [pc, #496]	; (8007f0c <HAL_RCC_ClockConfig+0x268>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d93f      	bls.n	8007d9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d1e:	4b7a      	ldr	r3, [pc, #488]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d009      	beq.n	8007d3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d033      	beq.n	8007d9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d12f      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007d3e:	4b72      	ldr	r3, [pc, #456]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d46:	4a70      	ldr	r2, [pc, #448]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007d4e:	2380      	movs	r3, #128	; 0x80
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	e024      	b.n	8007d9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d107      	bne.n	8007d6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d5c:	4b6a      	ldr	r3, [pc, #424]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d109      	bne.n	8007d7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e0c6      	b.n	8007efa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d6c:	4b66      	ldr	r3, [pc, #408]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e0be      	b.n	8007efa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007d7c:	f000 f8ce 	bl	8007f1c <HAL_RCC_GetSysClockFreq>
 8007d80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	4a61      	ldr	r2, [pc, #388]	; (8007f0c <HAL_RCC_ClockConfig+0x268>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d909      	bls.n	8007d9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007d8a:	4b5f      	ldr	r3, [pc, #380]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d92:	4a5d      	ldr	r2, [pc, #372]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007d9a:	2380      	movs	r3, #128	; 0x80
 8007d9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d9e:	4b5a      	ldr	r3, [pc, #360]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f023 0203 	bic.w	r2, r3, #3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	4957      	ldr	r1, [pc, #348]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007db0:	f7fa fb70 	bl	8002494 <HAL_GetTick>
 8007db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007db6:	e00a      	b.n	8007dce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007db8:	f7fa fb6c 	bl	8002494 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e095      	b.n	8007efa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dce:	4b4e      	ldr	r3, [pc, #312]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 020c 	and.w	r2, r3, #12
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d1eb      	bne.n	8007db8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d023      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d005      	beq.n	8007e04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007df8:	4b43      	ldr	r3, [pc, #268]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	4a42      	ldr	r2, [pc, #264]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007dfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007e02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0308 	and.w	r3, r3, #8
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d007      	beq.n	8007e20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007e10:	4b3d      	ldr	r3, [pc, #244]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e18:	4a3b      	ldr	r2, [pc, #236]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007e1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e20:	4b39      	ldr	r3, [pc, #228]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	4936      	ldr	r1, [pc, #216]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	608b      	str	r3, [r1, #8]
 8007e32:	e008      	b.n	8007e46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2b80      	cmp	r3, #128	; 0x80
 8007e38:	d105      	bne.n	8007e46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007e3a:	4b33      	ldr	r3, [pc, #204]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	4a32      	ldr	r2, [pc, #200]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e46:	4b2f      	ldr	r3, [pc, #188]	; (8007f04 <HAL_RCC_ClockConfig+0x260>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 030f 	and.w	r3, r3, #15
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d21d      	bcs.n	8007e90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e54:	4b2b      	ldr	r3, [pc, #172]	; (8007f04 <HAL_RCC_ClockConfig+0x260>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f023 020f 	bic.w	r2, r3, #15
 8007e5c:	4929      	ldr	r1, [pc, #164]	; (8007f04 <HAL_RCC_ClockConfig+0x260>)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007e64:	f7fa fb16 	bl	8002494 <HAL_GetTick>
 8007e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e6a:	e00a      	b.n	8007e82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e6c:	f7fa fb12 	bl	8002494 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d901      	bls.n	8007e82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e03b      	b.n	8007efa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e82:	4b20      	ldr	r3, [pc, #128]	; (8007f04 <HAL_RCC_ClockConfig+0x260>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d1ed      	bne.n	8007e6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d008      	beq.n	8007eae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e9c:	4b1a      	ldr	r3, [pc, #104]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	4917      	ldr	r1, [pc, #92]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d009      	beq.n	8007ece <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007eba:	4b13      	ldr	r3, [pc, #76]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	490f      	ldr	r1, [pc, #60]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ece:	f000 f825 	bl	8007f1c <HAL_RCC_GetSysClockFreq>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <HAL_RCC_ClockConfig+0x264>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	091b      	lsrs	r3, r3, #4
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	490c      	ldr	r1, [pc, #48]	; (8007f10 <HAL_RCC_ClockConfig+0x26c>)
 8007ee0:	5ccb      	ldrb	r3, [r1, r3]
 8007ee2:	f003 031f 	and.w	r3, r3, #31
 8007ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eea:	4a0a      	ldr	r2, [pc, #40]	; (8007f14 <HAL_RCC_ClockConfig+0x270>)
 8007eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007eee:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <HAL_RCC_ClockConfig+0x274>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fa f98e 	bl	8002214 <HAL_InitTick>
 8007ef8:	4603      	mov	r3, r0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	40022000 	.word	0x40022000
 8007f08:	40021000 	.word	0x40021000
 8007f0c:	04c4b400 	.word	0x04c4b400
 8007f10:	08016ef8 	.word	0x08016ef8
 8007f14:	20000000 	.word	0x20000000
 8007f18:	20000004 	.word	0x20000004

08007f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007f22:	4b2c      	ldr	r3, [pc, #176]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f003 030c 	and.w	r3, r3, #12
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d102      	bne.n	8007f34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f2e:	4b2a      	ldr	r3, [pc, #168]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f30:	613b      	str	r3, [r7, #16]
 8007f32:	e047      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007f34:	4b27      	ldr	r3, [pc, #156]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f003 030c 	and.w	r3, r3, #12
 8007f3c:	2b08      	cmp	r3, #8
 8007f3e:	d102      	bne.n	8007f46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f40:	4b26      	ldr	r3, [pc, #152]	; (8007fdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007f42:	613b      	str	r3, [r7, #16]
 8007f44:	e03e      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007f46:	4b23      	ldr	r3, [pc, #140]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 030c 	and.w	r3, r3, #12
 8007f4e:	2b0c      	cmp	r3, #12
 8007f50:	d136      	bne.n	8007fc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f52:	4b20      	ldr	r3, [pc, #128]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f5c:	4b1d      	ldr	r3, [pc, #116]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	091b      	lsrs	r3, r3, #4
 8007f62:	f003 030f 	and.w	r3, r3, #15
 8007f66:	3301      	adds	r3, #1
 8007f68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d10c      	bne.n	8007f8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f70:	4a1a      	ldr	r2, [pc, #104]	; (8007fdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f78:	4a16      	ldr	r2, [pc, #88]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f7a:	68d2      	ldr	r2, [r2, #12]
 8007f7c:	0a12      	lsrs	r2, r2, #8
 8007f7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	617b      	str	r3, [r7, #20]
      break;
 8007f88:	e00c      	b.n	8007fa4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f8a:	4a13      	ldr	r2, [pc, #76]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f92:	4a10      	ldr	r2, [pc, #64]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f94:	68d2      	ldr	r2, [r2, #12]
 8007f96:	0a12      	lsrs	r2, r2, #8
 8007f98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f9c:	fb02 f303 	mul.w	r3, r2, r3
 8007fa0:	617b      	str	r3, [r7, #20]
      break;
 8007fa2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	0e5b      	lsrs	r3, r3, #25
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	3301      	adds	r3, #1
 8007fb0:	005b      	lsls	r3, r3, #1
 8007fb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	e001      	b.n	8007fc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007fc4:	693b      	ldr	r3, [r7, #16]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	40021000 	.word	0x40021000
 8007fd8:	00f42400 	.word	0x00f42400
 8007fdc:	007a1200 	.word	0x007a1200

08007fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fe4:	4b03      	ldr	r3, [pc, #12]	; (8007ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	20000000 	.word	0x20000000

08007ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ffc:	f7ff fff0 	bl	8007fe0 <HAL_RCC_GetHCLKFreq>
 8008000:	4602      	mov	r2, r0
 8008002:	4b06      	ldr	r3, [pc, #24]	; (800801c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	0a1b      	lsrs	r3, r3, #8
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	4904      	ldr	r1, [pc, #16]	; (8008020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800800e:	5ccb      	ldrb	r3, [r1, r3]
 8008010:	f003 031f 	and.w	r3, r3, #31
 8008014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008018:	4618      	mov	r0, r3
 800801a:	bd80      	pop	{r7, pc}
 800801c:	40021000 	.word	0x40021000
 8008020:	08016f08 	.word	0x08016f08

08008024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008028:	f7ff ffda 	bl	8007fe0 <HAL_RCC_GetHCLKFreq>
 800802c:	4602      	mov	r2, r0
 800802e:	4b06      	ldr	r3, [pc, #24]	; (8008048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	0adb      	lsrs	r3, r3, #11
 8008034:	f003 0307 	and.w	r3, r3, #7
 8008038:	4904      	ldr	r1, [pc, #16]	; (800804c <HAL_RCC_GetPCLK2Freq+0x28>)
 800803a:	5ccb      	ldrb	r3, [r1, r3]
 800803c:	f003 031f 	and.w	r3, r3, #31
 8008040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008044:	4618      	mov	r0, r3
 8008046:	bd80      	pop	{r7, pc}
 8008048:	40021000 	.word	0x40021000
 800804c:	08016f08 	.word	0x08016f08

08008050 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	220f      	movs	r2, #15
 800805e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008060:	4b12      	ldr	r3, [pc, #72]	; (80080ac <HAL_RCC_GetClockConfig+0x5c>)
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f003 0203 	and.w	r2, r3, #3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800806c:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <HAL_RCC_GetClockConfig+0x5c>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008078:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <HAL_RCC_GetClockConfig+0x5c>)
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008084:	4b09      	ldr	r3, [pc, #36]	; (80080ac <HAL_RCC_GetClockConfig+0x5c>)
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	08db      	lsrs	r3, r3, #3
 800808a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008092:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <HAL_RCC_GetClockConfig+0x60>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 020f 	and.w	r2, r3, #15
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	601a      	str	r2, [r3, #0]
}
 800809e:	bf00      	nop
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	40021000 	.word	0x40021000
 80080b0:	40022000 	.word	0x40022000

080080b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80080ba:	4b1e      	ldr	r3, [pc, #120]	; (8008134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f003 0303 	and.w	r3, r3, #3
 80080c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080c4:	4b1b      	ldr	r3, [pc, #108]	; (8008134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	091b      	lsrs	r3, r3, #4
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	3301      	adds	r3, #1
 80080d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d10c      	bne.n	80080f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080d8:	4a17      	ldr	r2, [pc, #92]	; (8008138 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e0:	4a14      	ldr	r2, [pc, #80]	; (8008134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080e2:	68d2      	ldr	r2, [r2, #12]
 80080e4:	0a12      	lsrs	r2, r2, #8
 80080e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80080ea:	fb02 f303 	mul.w	r3, r2, r3
 80080ee:	617b      	str	r3, [r7, #20]
    break;
 80080f0:	e00c      	b.n	800810c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080f2:	4a12      	ldr	r2, [pc, #72]	; (800813c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fa:	4a0e      	ldr	r2, [pc, #56]	; (8008134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080fc:	68d2      	ldr	r2, [r2, #12]
 80080fe:	0a12      	lsrs	r2, r2, #8
 8008100:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008104:	fb02 f303 	mul.w	r3, r2, r3
 8008108:	617b      	str	r3, [r7, #20]
    break;
 800810a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800810c:	4b09      	ldr	r3, [pc, #36]	; (8008134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	0e5b      	lsrs	r3, r3, #25
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	3301      	adds	r3, #1
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	fbb2 f3f3 	udiv	r3, r2, r3
 8008124:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008126:	687b      	ldr	r3, [r7, #4]
}
 8008128:	4618      	mov	r0, r3
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	40021000 	.word	0x40021000
 8008138:	007a1200 	.word	0x007a1200
 800813c:	00f42400 	.word	0x00f42400

08008140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008148:	2300      	movs	r3, #0
 800814a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800814c:	2300      	movs	r3, #0
 800814e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 8098 	beq.w	800828e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800815e:	2300      	movs	r3, #0
 8008160:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008162:	4b43      	ldr	r3, [pc, #268]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10d      	bne.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800816e:	4b40      	ldr	r3, [pc, #256]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008172:	4a3f      	ldr	r2, [pc, #252]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008178:	6593      	str	r3, [r2, #88]	; 0x58
 800817a:	4b3d      	ldr	r3, [pc, #244]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800817c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008182:	60bb      	str	r3, [r7, #8]
 8008184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008186:	2301      	movs	r3, #1
 8008188:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800818a:	4b3a      	ldr	r3, [pc, #232]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a39      	ldr	r2, [pc, #228]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008194:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008196:	f7fa f97d 	bl	8002494 <HAL_GetTick>
 800819a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800819c:	e009      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800819e:	f7fa f979 	bl	8002494 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d902      	bls.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	74fb      	strb	r3, [r7, #19]
        break;
 80081b0:	e005      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081b2:	4b30      	ldr	r3, [pc, #192]	; (8008274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0ef      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80081be:	7cfb      	ldrb	r3, [r7, #19]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d159      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80081c4:	4b2a      	ldr	r3, [pc, #168]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d01e      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d019      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80081e0:	4b23      	ldr	r3, [pc, #140]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081ec:	4b20      	ldr	r3, [pc, #128]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f2:	4a1f      	ldr	r2, [pc, #124]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081fc:	4b1c      	ldr	r3, [pc, #112]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008202:	4a1b      	ldr	r2, [pc, #108]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800820c:	4a18      	ldr	r2, [pc, #96]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d016      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800821e:	f7fa f939 	bl	8002494 <HAL_GetTick>
 8008222:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008224:	e00b      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008226:	f7fa f935 	bl	8002494 <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	f241 3288 	movw	r2, #5000	; 0x1388
 8008234:	4293      	cmp	r3, r2
 8008236:	d902      	bls.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	74fb      	strb	r3, [r7, #19]
            break;
 800823c:	e006      	b.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800823e:	4b0c      	ldr	r3, [pc, #48]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0ec      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800824c:	7cfb      	ldrb	r3, [r7, #19]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10b      	bne.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008252:	4b07      	ldr	r3, [pc, #28]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008260:	4903      	ldr	r1, [pc, #12]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008268:	e008      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800826a:	7cfb      	ldrb	r3, [r7, #19]
 800826c:	74bb      	strb	r3, [r7, #18]
 800826e:	e005      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008270:	40021000 	.word	0x40021000
 8008274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008278:	7cfb      	ldrb	r3, [r7, #19]
 800827a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800827c:	7c7b      	ldrb	r3, [r7, #17]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d105      	bne.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008282:	4ba6      	ldr	r3, [pc, #664]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008286:	4aa5      	ldr	r2, [pc, #660]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800828c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800829a:	4ba0      	ldr	r3, [pc, #640]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800829c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a0:	f023 0203 	bic.w	r2, r3, #3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	499c      	ldr	r1, [pc, #624]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082bc:	4b97      	ldr	r3, [pc, #604]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c2:	f023 020c 	bic.w	r2, r3, #12
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	4994      	ldr	r1, [pc, #592]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0304 	and.w	r3, r3, #4
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082de:	4b8f      	ldr	r3, [pc, #572]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	498b      	ldr	r1, [pc, #556]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0308 	and.w	r3, r3, #8
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008300:	4b86      	ldr	r3, [pc, #536]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008306:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	4983      	ldr	r1, [pc, #524]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008310:	4313      	orrs	r3, r2
 8008312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0320 	and.w	r3, r3, #32
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008322:	4b7e      	ldr	r3, [pc, #504]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008328:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	497a      	ldr	r1, [pc, #488]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008332:	4313      	orrs	r3, r2
 8008334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00a      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008344:	4b75      	ldr	r3, [pc, #468]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	4972      	ldr	r1, [pc, #456]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008354:	4313      	orrs	r3, r2
 8008356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008366:	4b6d      	ldr	r3, [pc, #436]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	4969      	ldr	r1, [pc, #420]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008376:	4313      	orrs	r3, r2
 8008378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00a      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008388:	4b64      	ldr	r3, [pc, #400]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800838a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	4961      	ldr	r1, [pc, #388]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008398:	4313      	orrs	r3, r2
 800839a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00a      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083aa:	4b5c      	ldr	r3, [pc, #368]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	4958      	ldr	r1, [pc, #352]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d015      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083cc:	4b53      	ldr	r3, [pc, #332]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	4950      	ldr	r1, [pc, #320]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083ea:	d105      	bne.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083ec:	4b4b      	ldr	r3, [pc, #300]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	4a4a      	ldr	r2, [pc, #296]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008400:	2b00      	cmp	r3, #0
 8008402:	d015      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008404:	4b45      	ldr	r3, [pc, #276]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008412:	4942      	ldr	r1, [pc, #264]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008414:	4313      	orrs	r3, r2
 8008416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008422:	d105      	bne.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008424:	4b3d      	ldr	r3, [pc, #244]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	4a3c      	ldr	r2, [pc, #240]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800842a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800842e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d015      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800843c:	4b37      	ldr	r3, [pc, #220]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800843e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008442:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844a:	4934      	ldr	r1, [pc, #208]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800844c:	4313      	orrs	r3, r2
 800844e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008456:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800845a:	d105      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800845c:	4b2f      	ldr	r3, [pc, #188]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	4a2e      	ldr	r2, [pc, #184]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008466:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d015      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008474:	4b29      	ldr	r3, [pc, #164]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800847a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008482:	4926      	ldr	r1, [pc, #152]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008484:	4313      	orrs	r3, r2
 8008486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008492:	d105      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008494:	4b21      	ldr	r3, [pc, #132]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	4a20      	ldr	r2, [pc, #128]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800849a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800849e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d015      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084ac:	4b1b      	ldr	r3, [pc, #108]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ba:	4918      	ldr	r1, [pc, #96]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084ca:	d105      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084cc:	4b13      	ldr	r3, [pc, #76]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	4a12      	ldr	r2, [pc, #72]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d015      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80084e4:	4b0d      	ldr	r3, [pc, #52]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f2:	490a      	ldr	r1, [pc, #40]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008502:	d105      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	4a04      	ldr	r2, [pc, #16]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800850a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800850e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008510:	7cbb      	ldrb	r3, [r7, #18]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	40021000 	.word	0x40021000

08008520 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8008528:	4b1c      	ldr	r3, [pc, #112]	; (800859c <HAL_RCCEx_CRSConfig+0x7c>)
 800852a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852c:	4a1b      	ldr	r2, [pc, #108]	; (800859c <HAL_RCCEx_CRSConfig+0x7c>)
 800852e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008532:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8008534:	4b19      	ldr	r3, [pc, #100]	; (800859c <HAL_RCCEx_CRSConfig+0x7c>)
 8008536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008538:	4a18      	ldr	r2, [pc, #96]	; (800859c <HAL_RCCEx_CRSConfig+0x7c>)
 800853a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800853e:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	4313      	orrs	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	4313      	orrs	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	041b      	lsls	r3, r3, #16
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4313      	orrs	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8008568:	4a0d      	ldr	r2, [pc, #52]	; (80085a0 <HAL_RCCEx_CRSConfig+0x80>)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800856e:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <HAL_RCCEx_CRSConfig+0x80>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	021b      	lsls	r3, r3, #8
 800857c:	4908      	ldr	r1, [pc, #32]	; (80085a0 <HAL_RCCEx_CRSConfig+0x80>)
 800857e:	4313      	orrs	r3, r2
 8008580:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8008582:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <HAL_RCCEx_CRSConfig+0x80>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a06      	ldr	r2, [pc, #24]	; (80085a0 <HAL_RCCEx_CRSConfig+0x80>)
 8008588:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800858c:	6013      	str	r3, [r2, #0]
}
 800858e:	bf00      	nop
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	40021000 	.word	0x40021000
 80085a0:	40002000 	.word	0x40002000

080085a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e049      	b.n	800864a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d106      	bne.n	80085d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7f9 fb5a 	bl	8001c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3304      	adds	r3, #4
 80085e0:	4619      	mov	r1, r3
 80085e2:	4610      	mov	r0, r2
 80085e4:	f000 fddc 	bl	80091a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	d001      	beq.n	800866c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e04a      	b.n	8008702 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68da      	ldr	r2, [r3, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f042 0201 	orr.w	r2, r2, #1
 8008682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a21      	ldr	r2, [pc, #132]	; (8008710 <HAL_TIM_Base_Start_IT+0xbc>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d018      	beq.n	80086c0 <HAL_TIM_Base_Start_IT+0x6c>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008696:	d013      	beq.n	80086c0 <HAL_TIM_Base_Start_IT+0x6c>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a1d      	ldr	r2, [pc, #116]	; (8008714 <HAL_TIM_Base_Start_IT+0xc0>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d00e      	beq.n	80086c0 <HAL_TIM_Base_Start_IT+0x6c>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a1c      	ldr	r2, [pc, #112]	; (8008718 <HAL_TIM_Base_Start_IT+0xc4>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d009      	beq.n	80086c0 <HAL_TIM_Base_Start_IT+0x6c>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a1a      	ldr	r2, [pc, #104]	; (800871c <HAL_TIM_Base_Start_IT+0xc8>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d004      	beq.n	80086c0 <HAL_TIM_Base_Start_IT+0x6c>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a19      	ldr	r2, [pc, #100]	; (8008720 <HAL_TIM_Base_Start_IT+0xcc>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d115      	bne.n	80086ec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689a      	ldr	r2, [r3, #8]
 80086c6:	4b17      	ldr	r3, [pc, #92]	; (8008724 <HAL_TIM_Base_Start_IT+0xd0>)
 80086c8:	4013      	ands	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b06      	cmp	r3, #6
 80086d0:	d015      	beq.n	80086fe <HAL_TIM_Base_Start_IT+0xaa>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d8:	d011      	beq.n	80086fe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f042 0201 	orr.w	r2, r2, #1
 80086e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ea:	e008      	b.n	80086fe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	e000      	b.n	8008700 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	40012c00 	.word	0x40012c00
 8008714:	40000400 	.word	0x40000400
 8008718:	40000800 	.word	0x40000800
 800871c:	40013400 	.word	0x40013400
 8008720:	40014000 	.word	0x40014000
 8008724:	00010007 	.word	0x00010007

08008728 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 0201 	bic.w	r2, r2, #1
 800873e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6a1a      	ldr	r2, [r3, #32]
 8008746:	f241 1311 	movw	r3, #4369	; 0x1111
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10f      	bne.n	8008770 <HAL_TIM_Base_Stop_IT+0x48>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6a1a      	ldr	r2, [r3, #32]
 8008756:	f244 4344 	movw	r3, #17476	; 0x4444
 800875a:	4013      	ands	r3, r2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d107      	bne.n	8008770 <HAL_TIM_Base_Stop_IT+0x48>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0201 	bic.w	r2, r2, #1
 800876e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e049      	b.n	800882c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d106      	bne.n	80087b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7f9 faf1 	bl	8001d94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2202      	movs	r2, #2
 80087b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	3304      	adds	r3, #4
 80087c2:	4619      	mov	r1, r3
 80087c4:	4610      	mov	r0, r2
 80087c6:	f000 fceb 	bl	80091a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d109      	bne.n	8008858 <HAL_TIM_PWM_Start+0x24>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b01      	cmp	r3, #1
 800884e:	bf14      	ite	ne
 8008850:	2301      	movne	r3, #1
 8008852:	2300      	moveq	r3, #0
 8008854:	b2db      	uxtb	r3, r3
 8008856:	e03c      	b.n	80088d2 <HAL_TIM_PWM_Start+0x9e>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	2b04      	cmp	r3, #4
 800885c:	d109      	bne.n	8008872 <HAL_TIM_PWM_Start+0x3e>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b01      	cmp	r3, #1
 8008868:	bf14      	ite	ne
 800886a:	2301      	movne	r3, #1
 800886c:	2300      	moveq	r3, #0
 800886e:	b2db      	uxtb	r3, r3
 8008870:	e02f      	b.n	80088d2 <HAL_TIM_PWM_Start+0x9e>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b08      	cmp	r3, #8
 8008876:	d109      	bne.n	800888c <HAL_TIM_PWM_Start+0x58>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b01      	cmp	r3, #1
 8008882:	bf14      	ite	ne
 8008884:	2301      	movne	r3, #1
 8008886:	2300      	moveq	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	e022      	b.n	80088d2 <HAL_TIM_PWM_Start+0x9e>
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b0c      	cmp	r3, #12
 8008890:	d109      	bne.n	80088a6 <HAL_TIM_PWM_Start+0x72>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b01      	cmp	r3, #1
 800889c:	bf14      	ite	ne
 800889e:	2301      	movne	r3, #1
 80088a0:	2300      	moveq	r3, #0
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	e015      	b.n	80088d2 <HAL_TIM_PWM_Start+0x9e>
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2b10      	cmp	r3, #16
 80088aa:	d109      	bne.n	80088c0 <HAL_TIM_PWM_Start+0x8c>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	bf14      	ite	ne
 80088b8:	2301      	movne	r3, #1
 80088ba:	2300      	moveq	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	e008      	b.n	80088d2 <HAL_TIM_PWM_Start+0x9e>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	bf14      	ite	ne
 80088cc:	2301      	movne	r3, #1
 80088ce:	2300      	moveq	r3, #0
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e097      	b.n	8008a0a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d104      	bne.n	80088ea <HAL_TIM_PWM_Start+0xb6>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088e8:	e023      	b.n	8008932 <HAL_TIM_PWM_Start+0xfe>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	d104      	bne.n	80088fa <HAL_TIM_PWM_Start+0xc6>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088f8:	e01b      	b.n	8008932 <HAL_TIM_PWM_Start+0xfe>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d104      	bne.n	800890a <HAL_TIM_PWM_Start+0xd6>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008908:	e013      	b.n	8008932 <HAL_TIM_PWM_Start+0xfe>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b0c      	cmp	r3, #12
 800890e:	d104      	bne.n	800891a <HAL_TIM_PWM_Start+0xe6>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008918:	e00b      	b.n	8008932 <HAL_TIM_PWM_Start+0xfe>
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b10      	cmp	r3, #16
 800891e:	d104      	bne.n	800892a <HAL_TIM_PWM_Start+0xf6>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008928:	e003      	b.n	8008932 <HAL_TIM_PWM_Start+0xfe>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2202      	movs	r2, #2
 800892e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2201      	movs	r2, #1
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f001 f852 	bl	80099e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a33      	ldr	r2, [pc, #204]	; (8008a14 <HAL_TIM_PWM_Start+0x1e0>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d013      	beq.n	8008972 <HAL_TIM_PWM_Start+0x13e>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a32      	ldr	r2, [pc, #200]	; (8008a18 <HAL_TIM_PWM_Start+0x1e4>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d00e      	beq.n	8008972 <HAL_TIM_PWM_Start+0x13e>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a30      	ldr	r2, [pc, #192]	; (8008a1c <HAL_TIM_PWM_Start+0x1e8>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d009      	beq.n	8008972 <HAL_TIM_PWM_Start+0x13e>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a2f      	ldr	r2, [pc, #188]	; (8008a20 <HAL_TIM_PWM_Start+0x1ec>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d004      	beq.n	8008972 <HAL_TIM_PWM_Start+0x13e>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a2d      	ldr	r2, [pc, #180]	; (8008a24 <HAL_TIM_PWM_Start+0x1f0>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d101      	bne.n	8008976 <HAL_TIM_PWM_Start+0x142>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <HAL_TIM_PWM_Start+0x144>
 8008976:	2300      	movs	r3, #0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d007      	beq.n	800898c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800898a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a20      	ldr	r2, [pc, #128]	; (8008a14 <HAL_TIM_PWM_Start+0x1e0>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d018      	beq.n	80089c8 <HAL_TIM_PWM_Start+0x194>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800899e:	d013      	beq.n	80089c8 <HAL_TIM_PWM_Start+0x194>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a20      	ldr	r2, [pc, #128]	; (8008a28 <HAL_TIM_PWM_Start+0x1f4>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d00e      	beq.n	80089c8 <HAL_TIM_PWM_Start+0x194>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a1f      	ldr	r2, [pc, #124]	; (8008a2c <HAL_TIM_PWM_Start+0x1f8>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d009      	beq.n	80089c8 <HAL_TIM_PWM_Start+0x194>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a17      	ldr	r2, [pc, #92]	; (8008a18 <HAL_TIM_PWM_Start+0x1e4>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d004      	beq.n	80089c8 <HAL_TIM_PWM_Start+0x194>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a16      	ldr	r2, [pc, #88]	; (8008a1c <HAL_TIM_PWM_Start+0x1e8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d115      	bne.n	80089f4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689a      	ldr	r2, [r3, #8]
 80089ce:	4b18      	ldr	r3, [pc, #96]	; (8008a30 <HAL_TIM_PWM_Start+0x1fc>)
 80089d0:	4013      	ands	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b06      	cmp	r3, #6
 80089d8:	d015      	beq.n	8008a06 <HAL_TIM_PWM_Start+0x1d2>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e0:	d011      	beq.n	8008a06 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f042 0201 	orr.w	r2, r2, #1
 80089f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089f2:	e008      	b.n	8008a06 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0201 	orr.w	r2, r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	e000      	b.n	8008a08 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	40012c00 	.word	0x40012c00
 8008a18:	40013400 	.word	0x40013400
 8008a1c:	40014000 	.word	0x40014000
 8008a20:	40014400 	.word	0x40014400
 8008a24:	40014800 	.word	0x40014800
 8008a28:	40000400 	.word	0x40000400
 8008a2c:	40000800 	.word	0x40000800
 8008a30:	00010007 	.word	0x00010007

08008a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d122      	bne.n	8008a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d11b      	bne.n	8008a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f06f 0202 	mvn.w	r2, #2
 8008a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fb74 	bl	8009164 <HAL_TIM_IC_CaptureCallback>
 8008a7c:	e005      	b.n	8008a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fb66 	bl	8009150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fb77 	bl	8009178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d122      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d11b      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f06f 0204 	mvn.w	r2, #4
 8008ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fb4a 	bl	8009164 <HAL_TIM_IC_CaptureCallback>
 8008ad0:	e005      	b.n	8008ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fb3c 	bl	8009150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fb4d 	bl	8009178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	f003 0308 	and.w	r3, r3, #8
 8008aee:	2b08      	cmp	r3, #8
 8008af0:	d122      	bne.n	8008b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f003 0308 	and.w	r3, r3, #8
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d11b      	bne.n	8008b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f06f 0208 	mvn.w	r2, #8
 8008b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2204      	movs	r2, #4
 8008b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fb20 	bl	8009164 <HAL_TIM_IC_CaptureCallback>
 8008b24:	e005      	b.n	8008b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fb12 	bl	8009150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fb23 	bl	8009178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	f003 0310 	and.w	r3, r3, #16
 8008b42:	2b10      	cmp	r3, #16
 8008b44:	d122      	bne.n	8008b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f003 0310 	and.w	r3, r3, #16
 8008b50:	2b10      	cmp	r3, #16
 8008b52:	d11b      	bne.n	8008b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f06f 0210 	mvn.w	r2, #16
 8008b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2208      	movs	r2, #8
 8008b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 faf6 	bl	8009164 <HAL_TIM_IC_CaptureCallback>
 8008b78:	e005      	b.n	8008b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fae8 	bl	8009150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 faf9 	bl	8009178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d10e      	bne.n	8008bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d107      	bne.n	8008bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f06f 0201 	mvn.w	r2, #1
 8008bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7f8 ff32 	bl	8001a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d10e      	bne.n	8008be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd0:	2b80      	cmp	r3, #128	; 0x80
 8008bd2:	d107      	bne.n	8008be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 f852 	bl	8009c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf2:	d10e      	bne.n	8008c12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bfe:	2b80      	cmp	r3, #128	; 0x80
 8008c00:	d107      	bne.n	8008c12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 f845 	bl	8009c9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1c:	2b40      	cmp	r3, #64	; 0x40
 8008c1e:	d10e      	bne.n	8008c3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2a:	2b40      	cmp	r3, #64	; 0x40
 8008c2c:	d107      	bne.n	8008c3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 faa7 	bl	800918c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	f003 0320 	and.w	r3, r3, #32
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d10e      	bne.n	8008c6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b20      	cmp	r3, #32
 8008c58:	d107      	bne.n	8008c6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f06f 0220 	mvn.w	r2, #32
 8008c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 f805 	bl	8009c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c78:	d10f      	bne.n	8008c9a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c88:	d107      	bne.n	8008c9a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f001 f80b 	bl	8009cb0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ca8:	d10f      	bne.n	8008cca <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cb8:	d107      	bne.n	8008cca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fffd 	bl	8009cc4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cd8:	d10f      	bne.n	8008cfa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ce8:	d107      	bne.n	8008cfa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 ffef 	bl	8009cd8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d08:	d10f      	bne.n	8008d2a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d18:	d107      	bne.n	8008d2a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 ffe1 	bl	8009cec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d2a:	bf00      	nop
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
	...

08008d34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d101      	bne.n	8008d52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e0ff      	b.n	8008f52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b14      	cmp	r3, #20
 8008d5e:	f200 80f0 	bhi.w	8008f42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d62:	a201      	add	r2, pc, #4	; (adr r2, 8008d68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008dbd 	.word	0x08008dbd
 8008d6c:	08008f43 	.word	0x08008f43
 8008d70:	08008f43 	.word	0x08008f43
 8008d74:	08008f43 	.word	0x08008f43
 8008d78:	08008dfd 	.word	0x08008dfd
 8008d7c:	08008f43 	.word	0x08008f43
 8008d80:	08008f43 	.word	0x08008f43
 8008d84:	08008f43 	.word	0x08008f43
 8008d88:	08008e3f 	.word	0x08008e3f
 8008d8c:	08008f43 	.word	0x08008f43
 8008d90:	08008f43 	.word	0x08008f43
 8008d94:	08008f43 	.word	0x08008f43
 8008d98:	08008e7f 	.word	0x08008e7f
 8008d9c:	08008f43 	.word	0x08008f43
 8008da0:	08008f43 	.word	0x08008f43
 8008da4:	08008f43 	.word	0x08008f43
 8008da8:	08008ec1 	.word	0x08008ec1
 8008dac:	08008f43 	.word	0x08008f43
 8008db0:	08008f43 	.word	0x08008f43
 8008db4:	08008f43 	.word	0x08008f43
 8008db8:	08008f01 	.word	0x08008f01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68b9      	ldr	r1, [r7, #8]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 fa7c 	bl	80092c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	699a      	ldr	r2, [r3, #24]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f042 0208 	orr.w	r2, r2, #8
 8008dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	699a      	ldr	r2, [r3, #24]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0204 	bic.w	r2, r2, #4
 8008de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6999      	ldr	r1, [r3, #24]
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	691a      	ldr	r2, [r3, #16]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	619a      	str	r2, [r3, #24]
      break;
 8008dfa:	e0a5      	b.n	8008f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68b9      	ldr	r1, [r7, #8]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 faec 	bl	80093e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	699a      	ldr	r2, [r3, #24]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	699a      	ldr	r2, [r3, #24]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6999      	ldr	r1, [r3, #24]
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	021a      	lsls	r2, r3, #8
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	619a      	str	r2, [r3, #24]
      break;
 8008e3c:	e084      	b.n	8008f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68b9      	ldr	r1, [r7, #8]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 fb55 	bl	80094f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69da      	ldr	r2, [r3, #28]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f042 0208 	orr.w	r2, r2, #8
 8008e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69da      	ldr	r2, [r3, #28]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0204 	bic.w	r2, r2, #4
 8008e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69d9      	ldr	r1, [r3, #28]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	691a      	ldr	r2, [r3, #16]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	430a      	orrs	r2, r1
 8008e7a:	61da      	str	r2, [r3, #28]
      break;
 8008e7c:	e064      	b.n	8008f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68b9      	ldr	r1, [r7, #8]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 fbbd 	bl	8009604 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69da      	ldr	r2, [r3, #28]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	69da      	ldr	r2, [r3, #28]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	69d9      	ldr	r1, [r3, #28]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	021a      	lsls	r2, r3, #8
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	61da      	str	r2, [r3, #28]
      break;
 8008ebe:	e043      	b.n	8008f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68b9      	ldr	r1, [r7, #8]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 fc26 	bl	8009718 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f042 0208 	orr.w	r2, r2, #8
 8008eda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f022 0204 	bic.w	r2, r2, #4
 8008eea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	691a      	ldr	r2, [r3, #16]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008efe:	e023      	b.n	8008f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68b9      	ldr	r1, [r7, #8]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 fc6a 	bl	80097e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f2a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	021a      	lsls	r2, r3, #8
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008f40:	e002      	b.n	8008f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	75fb      	strb	r3, [r7, #23]
      break;
 8008f46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop

08008f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d101      	bne.n	8008f78 <HAL_TIM_ConfigClockSource+0x1c>
 8008f74:	2302      	movs	r3, #2
 8008f76:	e0de      	b.n	8009136 <HAL_TIM_ConfigClockSource+0x1da>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2202      	movs	r2, #2
 8008f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008f96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a63      	ldr	r2, [pc, #396]	; (8009140 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	f000 80a9 	beq.w	800910a <HAL_TIM_ConfigClockSource+0x1ae>
 8008fb8:	4a61      	ldr	r2, [pc, #388]	; (8009140 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	f200 80ae 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 8008fc0:	4a60      	ldr	r2, [pc, #384]	; (8009144 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	f000 80a1 	beq.w	800910a <HAL_TIM_ConfigClockSource+0x1ae>
 8008fc8:	4a5e      	ldr	r2, [pc, #376]	; (8009144 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	f200 80a6 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 8008fd0:	4a5d      	ldr	r2, [pc, #372]	; (8009148 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	f000 8099 	beq.w	800910a <HAL_TIM_ConfigClockSource+0x1ae>
 8008fd8:	4a5b      	ldr	r2, [pc, #364]	; (8009148 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	f200 809e 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 8008fe0:	4a5a      	ldr	r2, [pc, #360]	; (800914c <HAL_TIM_ConfigClockSource+0x1f0>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	f000 8091 	beq.w	800910a <HAL_TIM_ConfigClockSource+0x1ae>
 8008fe8:	4a58      	ldr	r2, [pc, #352]	; (800914c <HAL_TIM_ConfigClockSource+0x1f0>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	f200 8096 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 8008ff0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008ff4:	f000 8089 	beq.w	800910a <HAL_TIM_ConfigClockSource+0x1ae>
 8008ff8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008ffc:	f200 808e 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 8009000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009004:	d03e      	beq.n	8009084 <HAL_TIM_ConfigClockSource+0x128>
 8009006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800900a:	f200 8087 	bhi.w	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 800900e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009012:	f000 8086 	beq.w	8009122 <HAL_TIM_ConfigClockSource+0x1c6>
 8009016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901a:	d87f      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 800901c:	2b70      	cmp	r3, #112	; 0x70
 800901e:	d01a      	beq.n	8009056 <HAL_TIM_ConfigClockSource+0xfa>
 8009020:	2b70      	cmp	r3, #112	; 0x70
 8009022:	d87b      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 8009024:	2b60      	cmp	r3, #96	; 0x60
 8009026:	d050      	beq.n	80090ca <HAL_TIM_ConfigClockSource+0x16e>
 8009028:	2b60      	cmp	r3, #96	; 0x60
 800902a:	d877      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 800902c:	2b50      	cmp	r3, #80	; 0x50
 800902e:	d03c      	beq.n	80090aa <HAL_TIM_ConfigClockSource+0x14e>
 8009030:	2b50      	cmp	r3, #80	; 0x50
 8009032:	d873      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 8009034:	2b40      	cmp	r3, #64	; 0x40
 8009036:	d058      	beq.n	80090ea <HAL_TIM_ConfigClockSource+0x18e>
 8009038:	2b40      	cmp	r3, #64	; 0x40
 800903a:	d86f      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 800903c:	2b30      	cmp	r3, #48	; 0x30
 800903e:	d064      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x1ae>
 8009040:	2b30      	cmp	r3, #48	; 0x30
 8009042:	d86b      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 8009044:	2b20      	cmp	r3, #32
 8009046:	d060      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x1ae>
 8009048:	2b20      	cmp	r3, #32
 800904a:	d867      	bhi.n	800911c <HAL_TIM_ConfigClockSource+0x1c0>
 800904c:	2b00      	cmp	r3, #0
 800904e:	d05c      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x1ae>
 8009050:	2b10      	cmp	r3, #16
 8009052:	d05a      	beq.n	800910a <HAL_TIM_ConfigClockSource+0x1ae>
 8009054:	e062      	b.n	800911c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6818      	ldr	r0, [r3, #0]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	6899      	ldr	r1, [r3, #8]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f000 fc9d 	bl	80099a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	609a      	str	r2, [r3, #8]
      break;
 8009082:	e04f      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	6899      	ldr	r1, [r3, #8]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	f000 fc86 	bl	80099a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689a      	ldr	r2, [r3, #8]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090a6:	609a      	str	r2, [r3, #8]
      break;
 80090a8:	e03c      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6818      	ldr	r0, [r3, #0]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	6859      	ldr	r1, [r3, #4]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f000 fbf8 	bl	80098ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2150      	movs	r1, #80	; 0x50
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fc51 	bl	800996a <TIM_ITRx_SetConfig>
      break;
 80090c8:	e02c      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6818      	ldr	r0, [r3, #0]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	6859      	ldr	r1, [r3, #4]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	461a      	mov	r2, r3
 80090d8:	f000 fc17 	bl	800990a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2160      	movs	r1, #96	; 0x60
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fc41 	bl	800996a <TIM_ITRx_SetConfig>
      break;
 80090e8:	e01c      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6818      	ldr	r0, [r3, #0]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	6859      	ldr	r1, [r3, #4]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	461a      	mov	r2, r3
 80090f8:	f000 fbd8 	bl	80098ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2140      	movs	r1, #64	; 0x40
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fc31 	bl	800996a <TIM_ITRx_SetConfig>
      break;
 8009108:	e00c      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4619      	mov	r1, r3
 8009114:	4610      	mov	r0, r2
 8009116:	f000 fc28 	bl	800996a <TIM_ITRx_SetConfig>
      break;
 800911a:	e003      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	73fb      	strb	r3, [r7, #15]
      break;
 8009120:	e000      	b.n	8009124 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	00100070 	.word	0x00100070
 8009144:	00100040 	.word	0x00100040
 8009148:	00100030 	.word	0x00100030
 800914c:	00100020 	.word	0x00100020

08009150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a3c      	ldr	r2, [pc, #240]	; (80092a4 <TIM_Base_SetConfig+0x104>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d00f      	beq.n	80091d8 <TIM_Base_SetConfig+0x38>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091be:	d00b      	beq.n	80091d8 <TIM_Base_SetConfig+0x38>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a39      	ldr	r2, [pc, #228]	; (80092a8 <TIM_Base_SetConfig+0x108>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d007      	beq.n	80091d8 <TIM_Base_SetConfig+0x38>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a38      	ldr	r2, [pc, #224]	; (80092ac <TIM_Base_SetConfig+0x10c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d003      	beq.n	80091d8 <TIM_Base_SetConfig+0x38>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a37      	ldr	r2, [pc, #220]	; (80092b0 <TIM_Base_SetConfig+0x110>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d108      	bne.n	80091ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a2d      	ldr	r2, [pc, #180]	; (80092a4 <TIM_Base_SetConfig+0x104>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d01b      	beq.n	800922a <TIM_Base_SetConfig+0x8a>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091f8:	d017      	beq.n	800922a <TIM_Base_SetConfig+0x8a>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a2a      	ldr	r2, [pc, #168]	; (80092a8 <TIM_Base_SetConfig+0x108>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d013      	beq.n	800922a <TIM_Base_SetConfig+0x8a>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a29      	ldr	r2, [pc, #164]	; (80092ac <TIM_Base_SetConfig+0x10c>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00f      	beq.n	800922a <TIM_Base_SetConfig+0x8a>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a28      	ldr	r2, [pc, #160]	; (80092b0 <TIM_Base_SetConfig+0x110>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d00b      	beq.n	800922a <TIM_Base_SetConfig+0x8a>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a27      	ldr	r2, [pc, #156]	; (80092b4 <TIM_Base_SetConfig+0x114>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d007      	beq.n	800922a <TIM_Base_SetConfig+0x8a>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a26      	ldr	r2, [pc, #152]	; (80092b8 <TIM_Base_SetConfig+0x118>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d003      	beq.n	800922a <TIM_Base_SetConfig+0x8a>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a25      	ldr	r2, [pc, #148]	; (80092bc <TIM_Base_SetConfig+0x11c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d108      	bne.n	800923c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	4313      	orrs	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a10      	ldr	r2, [pc, #64]	; (80092a4 <TIM_Base_SetConfig+0x104>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d00f      	beq.n	8009288 <TIM_Base_SetConfig+0xe8>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a11      	ldr	r2, [pc, #68]	; (80092b0 <TIM_Base_SetConfig+0x110>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d00b      	beq.n	8009288 <TIM_Base_SetConfig+0xe8>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a10      	ldr	r2, [pc, #64]	; (80092b4 <TIM_Base_SetConfig+0x114>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d007      	beq.n	8009288 <TIM_Base_SetConfig+0xe8>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a0f      	ldr	r2, [pc, #60]	; (80092b8 <TIM_Base_SetConfig+0x118>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d003      	beq.n	8009288 <TIM_Base_SetConfig+0xe8>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a0e      	ldr	r2, [pc, #56]	; (80092bc <TIM_Base_SetConfig+0x11c>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d103      	bne.n	8009290 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	691a      	ldr	r2, [r3, #16]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	615a      	str	r2, [r3, #20]
}
 8009296:	bf00      	nop
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	40012c00 	.word	0x40012c00
 80092a8:	40000400 	.word	0x40000400
 80092ac:	40000800 	.word	0x40000800
 80092b0:	40013400 	.word	0x40013400
 80092b4:	40014000 	.word	0x40014000
 80092b8:	40014400 	.word	0x40014400
 80092bc:	40014800 	.word	0x40014800

080092c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	f023 0201 	bic.w	r2, r3, #1
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 0303 	bic.w	r3, r3, #3
 80092fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f023 0302 	bic.w	r3, r3, #2
 800930c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	4313      	orrs	r3, r2
 8009316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a2c      	ldr	r2, [pc, #176]	; (80093cc <TIM_OC1_SetConfig+0x10c>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d00f      	beq.n	8009340 <TIM_OC1_SetConfig+0x80>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a2b      	ldr	r2, [pc, #172]	; (80093d0 <TIM_OC1_SetConfig+0x110>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d00b      	beq.n	8009340 <TIM_OC1_SetConfig+0x80>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a2a      	ldr	r2, [pc, #168]	; (80093d4 <TIM_OC1_SetConfig+0x114>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d007      	beq.n	8009340 <TIM_OC1_SetConfig+0x80>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a29      	ldr	r2, [pc, #164]	; (80093d8 <TIM_OC1_SetConfig+0x118>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d003      	beq.n	8009340 <TIM_OC1_SetConfig+0x80>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a28      	ldr	r2, [pc, #160]	; (80093dc <TIM_OC1_SetConfig+0x11c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d10c      	bne.n	800935a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f023 0308 	bic.w	r3, r3, #8
 8009346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	4313      	orrs	r3, r2
 8009350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f023 0304 	bic.w	r3, r3, #4
 8009358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a1b      	ldr	r2, [pc, #108]	; (80093cc <TIM_OC1_SetConfig+0x10c>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d00f      	beq.n	8009382 <TIM_OC1_SetConfig+0xc2>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a1a      	ldr	r2, [pc, #104]	; (80093d0 <TIM_OC1_SetConfig+0x110>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d00b      	beq.n	8009382 <TIM_OC1_SetConfig+0xc2>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a19      	ldr	r2, [pc, #100]	; (80093d4 <TIM_OC1_SetConfig+0x114>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d007      	beq.n	8009382 <TIM_OC1_SetConfig+0xc2>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a18      	ldr	r2, [pc, #96]	; (80093d8 <TIM_OC1_SetConfig+0x118>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d003      	beq.n	8009382 <TIM_OC1_SetConfig+0xc2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a17      	ldr	r2, [pc, #92]	; (80093dc <TIM_OC1_SetConfig+0x11c>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d111      	bne.n	80093a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	4313      	orrs	r3, r2
 800939a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	621a      	str	r2, [r3, #32]
}
 80093c0:	bf00      	nop
 80093c2:	371c      	adds	r7, #28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr
 80093cc:	40012c00 	.word	0x40012c00
 80093d0:	40013400 	.word	0x40013400
 80093d4:	40014000 	.word	0x40014000
 80093d8:	40014400 	.word	0x40014400
 80093dc:	40014800 	.word	0x40014800

080093e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	f023 0210 	bic.w	r2, r3, #16
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800940e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800941a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	021b      	lsls	r3, r3, #8
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	4313      	orrs	r3, r2
 8009426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f023 0320 	bic.w	r3, r3, #32
 800942e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	011b      	lsls	r3, r3, #4
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	4313      	orrs	r3, r2
 800943a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a28      	ldr	r2, [pc, #160]	; (80094e0 <TIM_OC2_SetConfig+0x100>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d003      	beq.n	800944c <TIM_OC2_SetConfig+0x6c>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a27      	ldr	r2, [pc, #156]	; (80094e4 <TIM_OC2_SetConfig+0x104>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d10d      	bne.n	8009468 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	011b      	lsls	r3, r3, #4
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	4313      	orrs	r3, r2
 800945e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009466:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a1d      	ldr	r2, [pc, #116]	; (80094e0 <TIM_OC2_SetConfig+0x100>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d00f      	beq.n	8009490 <TIM_OC2_SetConfig+0xb0>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a1c      	ldr	r2, [pc, #112]	; (80094e4 <TIM_OC2_SetConfig+0x104>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d00b      	beq.n	8009490 <TIM_OC2_SetConfig+0xb0>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a1b      	ldr	r2, [pc, #108]	; (80094e8 <TIM_OC2_SetConfig+0x108>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d007      	beq.n	8009490 <TIM_OC2_SetConfig+0xb0>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a1a      	ldr	r2, [pc, #104]	; (80094ec <TIM_OC2_SetConfig+0x10c>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_OC2_SetConfig+0xb0>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a19      	ldr	r2, [pc, #100]	; (80094f0 <TIM_OC2_SetConfig+0x110>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d113      	bne.n	80094b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800949e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	621a      	str	r2, [r3, #32]
}
 80094d2:	bf00      	nop
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	40012c00 	.word	0x40012c00
 80094e4:	40013400 	.word	0x40013400
 80094e8:	40014000 	.word	0x40014000
 80094ec:	40014400 	.word	0x40014400
 80094f0:	40014800 	.word	0x40014800

080094f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f023 0303 	bic.w	r3, r3, #3
 800952e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	4313      	orrs	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	021b      	lsls	r3, r3, #8
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	4313      	orrs	r3, r2
 800954c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a27      	ldr	r2, [pc, #156]	; (80095f0 <TIM_OC3_SetConfig+0xfc>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d003      	beq.n	800955e <TIM_OC3_SetConfig+0x6a>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a26      	ldr	r2, [pc, #152]	; (80095f4 <TIM_OC3_SetConfig+0x100>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d10d      	bne.n	800957a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	021b      	lsls	r3, r3, #8
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	4313      	orrs	r3, r2
 8009570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a1c      	ldr	r2, [pc, #112]	; (80095f0 <TIM_OC3_SetConfig+0xfc>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d00f      	beq.n	80095a2 <TIM_OC3_SetConfig+0xae>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a1b      	ldr	r2, [pc, #108]	; (80095f4 <TIM_OC3_SetConfig+0x100>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d00b      	beq.n	80095a2 <TIM_OC3_SetConfig+0xae>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a1a      	ldr	r2, [pc, #104]	; (80095f8 <TIM_OC3_SetConfig+0x104>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d007      	beq.n	80095a2 <TIM_OC3_SetConfig+0xae>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a19      	ldr	r2, [pc, #100]	; (80095fc <TIM_OC3_SetConfig+0x108>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d003      	beq.n	80095a2 <TIM_OC3_SetConfig+0xae>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a18      	ldr	r2, [pc, #96]	; (8009600 <TIM_OC3_SetConfig+0x10c>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d113      	bne.n	80095ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	011b      	lsls	r3, r3, #4
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	011b      	lsls	r3, r3, #4
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	621a      	str	r2, [r3, #32]
}
 80095e4:	bf00      	nop
 80095e6:	371c      	adds	r7, #28
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	40012c00 	.word	0x40012c00
 80095f4:	40013400 	.word	0x40013400
 80095f8:	40014000 	.word	0x40014000
 80095fc:	40014400 	.word	0x40014400
 8009600:	40014800 	.word	0x40014800

08009604 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800963e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	021b      	lsls	r3, r3, #8
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	4313      	orrs	r3, r2
 800964a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	031b      	lsls	r3, r3, #12
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	4313      	orrs	r3, r2
 800965e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a28      	ldr	r2, [pc, #160]	; (8009704 <TIM_OC4_SetConfig+0x100>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d003      	beq.n	8009670 <TIM_OC4_SetConfig+0x6c>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a27      	ldr	r2, [pc, #156]	; (8009708 <TIM_OC4_SetConfig+0x104>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d10d      	bne.n	800968c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	031b      	lsls	r3, r3, #12
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	4313      	orrs	r3, r2
 8009682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800968a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a1d      	ldr	r2, [pc, #116]	; (8009704 <TIM_OC4_SetConfig+0x100>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d00f      	beq.n	80096b4 <TIM_OC4_SetConfig+0xb0>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a1c      	ldr	r2, [pc, #112]	; (8009708 <TIM_OC4_SetConfig+0x104>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d00b      	beq.n	80096b4 <TIM_OC4_SetConfig+0xb0>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a1b      	ldr	r2, [pc, #108]	; (800970c <TIM_OC4_SetConfig+0x108>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d007      	beq.n	80096b4 <TIM_OC4_SetConfig+0xb0>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a1a      	ldr	r2, [pc, #104]	; (8009710 <TIM_OC4_SetConfig+0x10c>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d003      	beq.n	80096b4 <TIM_OC4_SetConfig+0xb0>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a19      	ldr	r2, [pc, #100]	; (8009714 <TIM_OC4_SetConfig+0x110>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d113      	bne.n	80096dc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	019b      	lsls	r3, r3, #6
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	019b      	lsls	r3, r3, #6
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	621a      	str	r2, [r3, #32]
}
 80096f6:	bf00      	nop
 80096f8:	371c      	adds	r7, #28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	40012c00 	.word	0x40012c00
 8009708:	40013400 	.word	0x40013400
 800970c:	40014000 	.word	0x40014000
 8009710:	40014400 	.word	0x40014400
 8009714:	40014800 	.word	0x40014800

08009718 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800973e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800974a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	4313      	orrs	r3, r2
 8009754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800975c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	041b      	lsls	r3, r3, #16
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	4313      	orrs	r3, r2
 8009768:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a17      	ldr	r2, [pc, #92]	; (80097cc <TIM_OC5_SetConfig+0xb4>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d00f      	beq.n	8009792 <TIM_OC5_SetConfig+0x7a>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a16      	ldr	r2, [pc, #88]	; (80097d0 <TIM_OC5_SetConfig+0xb8>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d00b      	beq.n	8009792 <TIM_OC5_SetConfig+0x7a>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a15      	ldr	r2, [pc, #84]	; (80097d4 <TIM_OC5_SetConfig+0xbc>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d007      	beq.n	8009792 <TIM_OC5_SetConfig+0x7a>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a14      	ldr	r2, [pc, #80]	; (80097d8 <TIM_OC5_SetConfig+0xc0>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d003      	beq.n	8009792 <TIM_OC5_SetConfig+0x7a>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a13      	ldr	r2, [pc, #76]	; (80097dc <TIM_OC5_SetConfig+0xc4>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d109      	bne.n	80097a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009798:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	021b      	lsls	r3, r3, #8
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	621a      	str	r2, [r3, #32]
}
 80097c0:	bf00      	nop
 80097c2:	371c      	adds	r7, #28
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	40012c00 	.word	0x40012c00
 80097d0:	40013400 	.word	0x40013400
 80097d4:	40014000 	.word	0x40014000
 80097d8:	40014400 	.word	0x40014400
 80097dc:	40014800 	.word	0x40014800

080097e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b087      	sub	sp, #28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800980e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	021b      	lsls	r3, r3, #8
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	4313      	orrs	r3, r2
 800981e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	051b      	lsls	r3, r3, #20
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	4313      	orrs	r3, r2
 8009832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a18      	ldr	r2, [pc, #96]	; (8009898 <TIM_OC6_SetConfig+0xb8>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d00f      	beq.n	800985c <TIM_OC6_SetConfig+0x7c>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a17      	ldr	r2, [pc, #92]	; (800989c <TIM_OC6_SetConfig+0xbc>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d00b      	beq.n	800985c <TIM_OC6_SetConfig+0x7c>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a16      	ldr	r2, [pc, #88]	; (80098a0 <TIM_OC6_SetConfig+0xc0>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d007      	beq.n	800985c <TIM_OC6_SetConfig+0x7c>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a15      	ldr	r2, [pc, #84]	; (80098a4 <TIM_OC6_SetConfig+0xc4>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d003      	beq.n	800985c <TIM_OC6_SetConfig+0x7c>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a14      	ldr	r2, [pc, #80]	; (80098a8 <TIM_OC6_SetConfig+0xc8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d109      	bne.n	8009870 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009862:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	029b      	lsls	r3, r3, #10
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	4313      	orrs	r3, r2
 800986e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	621a      	str	r2, [r3, #32]
}
 800988a:	bf00      	nop
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	40012c00 	.word	0x40012c00
 800989c:	40013400 	.word	0x40013400
 80098a0:	40014000 	.word	0x40014000
 80098a4:	40014400 	.word	0x40014400
 80098a8:	40014800 	.word	0x40014800

080098ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	f023 0201 	bic.w	r2, r3, #1
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	011b      	lsls	r3, r3, #4
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	4313      	orrs	r3, r2
 80098e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f023 030a 	bic.w	r3, r3, #10
 80098e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	621a      	str	r2, [r3, #32]
}
 80098fe:	bf00      	nop
 8009900:	371c      	adds	r7, #28
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800990a:	b480      	push	{r7}
 800990c:	b087      	sub	sp, #28
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	f023 0210 	bic.w	r2, r3, #16
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6a1b      	ldr	r3, [r3, #32]
 800992c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	031b      	lsls	r3, r3, #12
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	4313      	orrs	r3, r2
 800993e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009946:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	011b      	lsls	r3, r3, #4
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	4313      	orrs	r3, r2
 8009950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	621a      	str	r2, [r3, #32]
}
 800995e:	bf00      	nop
 8009960:	371c      	adds	r7, #28
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800996a:	b480      	push	{r7}
 800996c:	b085      	sub	sp, #20
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4313      	orrs	r3, r2
 800998c:	f043 0307 	orr.w	r3, r3, #7
 8009990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	609a      	str	r2, [r3, #8]
}
 8009998:	bf00      	nop
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	021a      	lsls	r2, r3, #8
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	431a      	orrs	r2, r3
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	609a      	str	r2, [r3, #8]
}
 80099d8:	bf00      	nop
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	f003 031f 	and.w	r3, r3, #31
 80099f6:	2201      	movs	r2, #1
 80099f8:	fa02 f303 	lsl.w	r3, r2, r3
 80099fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a1a      	ldr	r2, [r3, #32]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	43db      	mvns	r3, r3
 8009a06:	401a      	ands	r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6a1a      	ldr	r2, [r3, #32]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	f003 031f 	and.w	r3, r3, #31
 8009a16:	6879      	ldr	r1, [r7, #4]
 8009a18:	fa01 f303 	lsl.w	r3, r1, r3
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	621a      	str	r2, [r3, #32]
}
 8009a22:	bf00      	nop
 8009a24:	371c      	adds	r7, #28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
	...

08009a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d101      	bne.n	8009a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a44:	2302      	movs	r3, #2
 8009a46:	e065      	b.n	8009b14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a2c      	ldr	r2, [pc, #176]	; (8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d004      	beq.n	8009a7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a2b      	ldr	r2, [pc, #172]	; (8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d108      	bne.n	8009a8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a1b      	ldr	r2, [pc, #108]	; (8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d018      	beq.n	8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009abe:	d013      	beq.n	8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a18      	ldr	r2, [pc, #96]	; (8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d00e      	beq.n	8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a17      	ldr	r2, [pc, #92]	; (8009b2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d009      	beq.n	8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a12      	ldr	r2, [pc, #72]	; (8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d004      	beq.n	8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a13      	ldr	r2, [pc, #76]	; (8009b30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d10c      	bne.n	8009b02 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	40012c00 	.word	0x40012c00
 8009b24:	40013400 	.word	0x40013400
 8009b28:	40000400 	.word	0x40000400
 8009b2c:	40000800 	.word	0x40000800
 8009b30:	40014000 	.word	0x40014000

08009b34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e087      	b.n	8009c60 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	695b      	ldr	r3, [r3, #20]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	041b      	lsls	r3, r3, #16
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a27      	ldr	r2, [pc, #156]	; (8009c6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d004      	beq.n	8009bde <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a25      	ldr	r2, [pc, #148]	; (8009c70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d106      	bne.n	8009bec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a1e      	ldr	r2, [pc, #120]	; (8009c6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d004      	beq.n	8009c00 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a1d      	ldr	r2, [pc, #116]	; (8009c70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d126      	bne.n	8009c4e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0a:	051b      	lsls	r3, r3, #20
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a0e      	ldr	r2, [pc, #56]	; (8009c6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d004      	beq.n	8009c40 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a0d      	ldr	r2, [pc, #52]	; (8009c70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d106      	bne.n	8009c4e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	40012c00 	.word	0x40012c00
 8009c70:	40013400 	.word	0x40013400

08009c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e042      	b.n	8009d98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d106      	bne.n	8009d2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7f8 f97f 	bl	8002028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2224      	movs	r2, #36	; 0x24
 8009d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f022 0201 	bic.w	r2, r2, #1
 8009d40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fc7e 	bl	800a644 <UART_SetConfig>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d101      	bne.n	8009d52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e022      	b.n	8009d98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d002      	beq.n	8009d60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 ff3e 	bl	800abdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	689a      	ldr	r2, [r3, #8]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f042 0201 	orr.w	r2, r2, #1
 8009d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 ffc5 	bl	800ad20 <UART_CheckIdleState>
 8009d96:	4603      	mov	r3, r0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e02e      	b.n	8009e10 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2224      	movs	r2, #36	; 0x24
 8009db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f022 0201 	bic.w	r2, r2, #1
 8009dc8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2200      	movs	r2, #0
 8009de0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7f8 f9ae 	bl	8002144 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08a      	sub	sp, #40	; 0x28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	4613      	mov	r3, r2
 8009e24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2c:	2b20      	cmp	r3, #32
 8009e2e:	d142      	bne.n	8009eb6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <HAL_UART_Receive_IT+0x24>
 8009e36:	88fb      	ldrh	r3, [r7, #6]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d101      	bne.n	8009e40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e03b      	b.n	8009eb8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <HAL_UART_Receive_IT+0x36>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	e034      	b.n	8009eb8 <HAL_UART_Receive_IT+0xa0>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a17      	ldr	r2, [pc, #92]	; (8009ec0 <HAL_UART_Receive_IT+0xa8>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d01f      	beq.n	8009ea6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d018      	beq.n	8009ea6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	613b      	str	r3, [r7, #16]
   return(result);
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e88:	627b      	str	r3, [r7, #36]	; 0x24
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	623b      	str	r3, [r7, #32]
 8009e94:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	69f9      	ldr	r1, [r7, #28]
 8009e98:	6a3a      	ldr	r2, [r7, #32]
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e6      	bne.n	8009e74 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009ea6:	88fb      	ldrh	r3, [r7, #6]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	68b9      	ldr	r1, [r7, #8]
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f001 f84b 	bl	800af48 <UART_Start_Receive_IT>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	e000      	b.n	8009eb8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009eb6:	2302      	movs	r3, #2
  }
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3728      	adds	r7, #40	; 0x28
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	40008000 	.word	0x40008000

08009ec4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08a      	sub	sp, #40	; 0x28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ed8:	2b20      	cmp	r3, #32
 8009eda:	d17a      	bne.n	8009fd2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <HAL_UART_Transmit_DMA+0x24>
 8009ee2:	88fb      	ldrh	r3, [r7, #6]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d101      	bne.n	8009eec <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e073      	b.n	8009fd4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <HAL_UART_Transmit_DMA+0x36>
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e06c      	b.n	8009fd4 <HAL_UART_Transmit_DMA+0x110>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	88fa      	ldrh	r2, [r7, #6]
 8009f0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	88fa      	ldrh	r2, [r7, #6]
 8009f14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2221      	movs	r2, #33	; 0x21
 8009f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d02c      	beq.n	8009f8a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f34:	4a29      	ldr	r2, [pc, #164]	; (8009fdc <HAL_UART_Transmit_DMA+0x118>)
 8009f36:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f3c:	4a28      	ldr	r2, [pc, #160]	; (8009fe0 <HAL_UART_Transmit_DMA+0x11c>)
 8009f3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f44:	4a27      	ldr	r2, [pc, #156]	; (8009fe4 <HAL_UART_Transmit_DMA+0x120>)
 8009f46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f58:	4619      	mov	r1, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3328      	adds	r3, #40	; 0x28
 8009f60:	461a      	mov	r2, r3
 8009f62:	88fb      	ldrh	r3, [r7, #6]
 8009f64:	f7f9 fd78 	bl	8003a58 <HAL_DMA_Start_IT>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00d      	beq.n	8009f8a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2210      	movs	r2, #16
 8009f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2220      	movs	r2, #32
 8009f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e024      	b.n	8009fd4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2240      	movs	r2, #64	; 0x40
 8009f90:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	e853 3f00 	ldrex	r3, [r3]
 8009fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fba:	623a      	str	r2, [r7, #32]
 8009fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbe:	69f9      	ldr	r1, [r7, #28]
 8009fc0:	6a3a      	ldr	r2, [r7, #32]
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e5      	bne.n	8009f9a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	e000      	b.n	8009fd4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8009fd2:	2302      	movs	r3, #2
  }
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3728      	adds	r7, #40	; 0x28
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	0800b2eb 	.word	0x0800b2eb
 8009fe0:	0800b385 	.word	0x0800b385
 8009fe4:	0800b3a1 	.word	0x0800b3a1

08009fe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b0ba      	sub	sp, #232	; 0xe8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a00e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a012:	f640 030f 	movw	r3, #2063	; 0x80f
 800a016:	4013      	ands	r3, r2
 800a018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a01c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a020:	2b00      	cmp	r3, #0
 800a022:	d11b      	bne.n	800a05c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a028:	f003 0320 	and.w	r3, r3, #32
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d015      	beq.n	800a05c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a034:	f003 0320 	and.w	r3, r3, #32
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d105      	bne.n	800a048 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a03c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d009      	beq.n	800a05c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 82d6 	beq.w	800a5fe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	4798      	blx	r3
      }
      return;
 800a05a:	e2d0      	b.n	800a5fe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a05c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 811f 	beq.w	800a2a4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a066:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a06a:	4b8b      	ldr	r3, [pc, #556]	; (800a298 <HAL_UART_IRQHandler+0x2b0>)
 800a06c:	4013      	ands	r3, r2
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d106      	bne.n	800a080 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a072:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a076:	4b89      	ldr	r3, [pc, #548]	; (800a29c <HAL_UART_IRQHandler+0x2b4>)
 800a078:	4013      	ands	r3, r2
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f000 8112 	beq.w	800a2a4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d011      	beq.n	800a0b0 <HAL_UART_IRQHandler+0xc8>
 800a08c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00b      	beq.n	800a0b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2201      	movs	r2, #1
 800a09e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0a6:	f043 0201 	orr.w	r2, r3, #1
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0b4:	f003 0302 	and.w	r3, r3, #2
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d011      	beq.n	800a0e0 <HAL_UART_IRQHandler+0xf8>
 800a0bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0c0:	f003 0301 	and.w	r3, r3, #1
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00b      	beq.n	800a0e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0d6:	f043 0204 	orr.w	r2, r3, #4
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0e4:	f003 0304 	and.w	r3, r3, #4
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d011      	beq.n	800a110 <HAL_UART_IRQHandler+0x128>
 800a0ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00b      	beq.n	800a110 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a106:	f043 0202 	orr.w	r2, r3, #2
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a114:	f003 0308 	and.w	r3, r3, #8
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d017      	beq.n	800a14c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a11c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a120:	f003 0320 	and.w	r3, r3, #32
 800a124:	2b00      	cmp	r3, #0
 800a126:	d105      	bne.n	800a134 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a128:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a12c:	4b5a      	ldr	r3, [pc, #360]	; (800a298 <HAL_UART_IRQHandler+0x2b0>)
 800a12e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00b      	beq.n	800a14c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2208      	movs	r2, #8
 800a13a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a142:	f043 0208 	orr.w	r2, r3, #8
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a154:	2b00      	cmp	r3, #0
 800a156:	d012      	beq.n	800a17e <HAL_UART_IRQHandler+0x196>
 800a158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a15c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00c      	beq.n	800a17e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a16c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a174:	f043 0220 	orr.w	r2, r3, #32
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 823c 	beq.w	800a602 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a18e:	f003 0320 	and.w	r3, r3, #32
 800a192:	2b00      	cmp	r3, #0
 800a194:	d013      	beq.n	800a1be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a19a:	f003 0320 	and.w	r3, r3, #32
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d105      	bne.n	800a1ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a1a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d007      	beq.n	800a1be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d2:	2b40      	cmp	r3, #64	; 0x40
 800a1d4:	d005      	beq.n	800a1e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a1d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d04f      	beq.n	800a282 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f001 f81b 	bl	800b21e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f2:	2b40      	cmp	r3, #64	; 0x40
 800a1f4:	d141      	bne.n	800a27a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	3308      	adds	r3, #8
 800a1fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a204:	e853 3f00 	ldrex	r3, [r3]
 800a208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a20c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3308      	adds	r3, #8
 800a21e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a222:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a22e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a232:	e841 2300 	strex	r3, r2, [r1]
 800a236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a23a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1d9      	bne.n	800a1f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a246:	2b00      	cmp	r3, #0
 800a248:	d013      	beq.n	800a272 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a24e:	4a14      	ldr	r2, [pc, #80]	; (800a2a0 <HAL_UART_IRQHandler+0x2b8>)
 800a250:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a256:	4618      	mov	r0, r3
 800a258:	f7f9 fcd2 	bl	8003c00 <HAL_DMA_Abort_IT>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d017      	beq.n	800a292 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a26c:	4610      	mov	r0, r2
 800a26e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a270:	e00f      	b.n	800a292 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f00b fe6e 	bl	8015f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a278:	e00b      	b.n	800a292 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f00b fe6a 	bl	8015f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a280:	e007      	b.n	800a292 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f00b fe66 	bl	8015f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a290:	e1b7      	b.n	800a602 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a292:	bf00      	nop
    return;
 800a294:	e1b5      	b.n	800a602 <HAL_UART_IRQHandler+0x61a>
 800a296:	bf00      	nop
 800a298:	10000001 	.word	0x10000001
 800a29c:	04000120 	.word	0x04000120
 800a2a0:	0800b421 	.word	0x0800b421

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	f040 814a 	bne.w	800a542 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2b2:	f003 0310 	and.w	r3, r3, #16
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f000 8143 	beq.w	800a542 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a2bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2c0:	f003 0310 	and.w	r3, r3, #16
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f000 813c 	beq.w	800a542 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2210      	movs	r2, #16
 800a2d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2dc:	2b40      	cmp	r3, #64	; 0x40
 800a2de:	f040 80b5 	bne.w	800a44c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 8187 	beq.w	800a606 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a302:	429a      	cmp	r2, r3
 800a304:	f080 817f 	bcs.w	800a606 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a30e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0320 	and.w	r3, r3, #32
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f040 8086 	bne.w	800a430 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a338:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a33c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	461a      	mov	r2, r3
 800a34a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a34e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a352:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a356:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a35a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a35e:	e841 2300 	strex	r3, r2, [r1]
 800a362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1da      	bne.n	800a324 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3308      	adds	r3, #8
 800a374:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a37e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a380:	f023 0301 	bic.w	r3, r3, #1
 800a384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3308      	adds	r3, #8
 800a38e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a392:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a396:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a398:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a39a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a39e:	e841 2300 	strex	r3, r2, [r1]
 800a3a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a3a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1e1      	bne.n	800a36e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	3308      	adds	r3, #8
 800a3b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3b4:	e853 3f00 	ldrex	r3, [r3]
 800a3b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3308      	adds	r3, #8
 800a3ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a3ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3d6:	e841 2300 	strex	r3, r2, [r1]
 800a3da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1e3      	bne.n	800a3aa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2220      	movs	r2, #32
 800a3e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3f8:	e853 3f00 	ldrex	r3, [r3]
 800a3fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a3fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a400:	f023 0310 	bic.w	r3, r3, #16
 800a404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	461a      	mov	r2, r3
 800a40e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a412:	65bb      	str	r3, [r7, #88]	; 0x58
 800a414:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a416:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a418:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a41a:	e841 2300 	strex	r3, r2, [r1]
 800a41e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1e4      	bne.n	800a3f0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7f9 fb8f 	bl	8003b4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	b29b      	uxth	r3, r3
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f8f1 	bl	800a62c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a44a:	e0dc      	b.n	800a606 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a458:	b29b      	uxth	r3, r3
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a466:	b29b      	uxth	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f000 80ce 	beq.w	800a60a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a46e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 80c9 	beq.w	800a60a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	e853 3f00 	ldrex	r3, [r3]
 800a484:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a488:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a48c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	461a      	mov	r2, r3
 800a496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a49a:	647b      	str	r3, [r7, #68]	; 0x44
 800a49c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4a2:	e841 2300 	strex	r3, r2, [r1]
 800a4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1e4      	bne.n	800a478 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	3308      	adds	r3, #8
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	e853 3f00 	ldrex	r3, [r3]
 800a4bc:	623b      	str	r3, [r7, #32]
   return(result);
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4c4:	f023 0301 	bic.w	r3, r3, #1
 800a4c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a4d6:	633a      	str	r2, [r7, #48]	; 0x30
 800a4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4de:	e841 2300 	strex	r3, r2, [r1]
 800a4e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1e1      	bne.n	800a4ae <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	e853 3f00 	ldrex	r3, [r3]
 800a50a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f023 0310 	bic.w	r3, r3, #16
 800a512:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	461a      	mov	r2, r3
 800a51c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a520:	61fb      	str	r3, [r7, #28]
 800a522:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a524:	69b9      	ldr	r1, [r7, #24]
 800a526:	69fa      	ldr	r2, [r7, #28]
 800a528:	e841 2300 	strex	r3, r2, [r1]
 800a52c:	617b      	str	r3, [r7, #20]
   return(result);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1e4      	bne.n	800a4fe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a538:	4619      	mov	r1, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f876 	bl	800a62c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a540:	e063      	b.n	800a60a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00e      	beq.n	800a56c <HAL_UART_IRQHandler+0x584>
 800a54e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d008      	beq.n	800a56c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a562:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f001 fbf9 	bl	800bd5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a56a:	e051      	b.n	800a610 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a574:	2b00      	cmp	r3, #0
 800a576:	d014      	beq.n	800a5a2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a580:	2b00      	cmp	r3, #0
 800a582:	d105      	bne.n	800a590 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d008      	beq.n	800a5a2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a594:	2b00      	cmp	r3, #0
 800a596:	d03a      	beq.n	800a60e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	4798      	blx	r3
    }
    return;
 800a5a0:	e035      	b.n	800a60e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d009      	beq.n	800a5c2 <HAL_UART_IRQHandler+0x5da>
 800a5ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d003      	beq.n	800a5c2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 ff46 	bl	800b44c <UART_EndTransmit_IT>
    return;
 800a5c0:	e026      	b.n	800a610 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a5c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d009      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x5fa>
 800a5ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d003      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f001 fbd2 	bl	800bd84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5e0:	e016      	b.n	800a610 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d010      	beq.n	800a610 <HAL_UART_IRQHandler+0x628>
 800a5ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	da0c      	bge.n	800a610 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f001 fbba 	bl	800bd70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5fc:	e008      	b.n	800a610 <HAL_UART_IRQHandler+0x628>
      return;
 800a5fe:	bf00      	nop
 800a600:	e006      	b.n	800a610 <HAL_UART_IRQHandler+0x628>
    return;
 800a602:	bf00      	nop
 800a604:	e004      	b.n	800a610 <HAL_UART_IRQHandler+0x628>
      return;
 800a606:	bf00      	nop
 800a608:	e002      	b.n	800a610 <HAL_UART_IRQHandler+0x628>
      return;
 800a60a:	bf00      	nop
 800a60c:	e000      	b.n	800a610 <HAL_UART_IRQHandler+0x628>
    return;
 800a60e:	bf00      	nop
  }
}
 800a610:	37e8      	adds	r7, #232	; 0xe8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop

0800a618 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a648:	b08c      	sub	sp, #48	; 0x30
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a64e:	2300      	movs	r3, #0
 800a650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	689a      	ldr	r2, [r3, #8]
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	431a      	orrs	r2, r3
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	695b      	ldr	r3, [r3, #20]
 800a662:	431a      	orrs	r2, r3
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	69db      	ldr	r3, [r3, #28]
 800a668:	4313      	orrs	r3, r2
 800a66a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	4bab      	ldr	r3, [pc, #684]	; (800a920 <UART_SetConfig+0x2dc>)
 800a674:	4013      	ands	r3, r2
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	6812      	ldr	r2, [r2, #0]
 800a67a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a67c:	430b      	orrs	r3, r1
 800a67e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	430a      	orrs	r2, r1
 800a694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4aa0      	ldr	r2, [pc, #640]	; (800a924 <UART_SetConfig+0x2e0>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d004      	beq.n	800a6b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a6ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	6812      	ldr	r2, [r2, #0]
 800a6c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6c4:	430b      	orrs	r3, r1
 800a6c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ce:	f023 010f 	bic.w	r1, r3, #15
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	430a      	orrs	r2, r1
 800a6dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a91      	ldr	r2, [pc, #580]	; (800a928 <UART_SetConfig+0x2e4>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d125      	bne.n	800a734 <UART_SetConfig+0xf0>
 800a6e8:	4b90      	ldr	r3, [pc, #576]	; (800a92c <UART_SetConfig+0x2e8>)
 800a6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ee:	f003 0303 	and.w	r3, r3, #3
 800a6f2:	2b03      	cmp	r3, #3
 800a6f4:	d81a      	bhi.n	800a72c <UART_SetConfig+0xe8>
 800a6f6:	a201      	add	r2, pc, #4	; (adr r2, 800a6fc <UART_SetConfig+0xb8>)
 800a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fc:	0800a70d 	.word	0x0800a70d
 800a700:	0800a71d 	.word	0x0800a71d
 800a704:	0800a715 	.word	0x0800a715
 800a708:	0800a725 	.word	0x0800a725
 800a70c:	2301      	movs	r3, #1
 800a70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a712:	e0d6      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a714:	2302      	movs	r3, #2
 800a716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a71a:	e0d2      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a71c:	2304      	movs	r3, #4
 800a71e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a722:	e0ce      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a724:	2308      	movs	r3, #8
 800a726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a72a:	e0ca      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a72c:	2310      	movs	r3, #16
 800a72e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a732:	e0c6      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a7d      	ldr	r2, [pc, #500]	; (800a930 <UART_SetConfig+0x2ec>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d138      	bne.n	800a7b0 <UART_SetConfig+0x16c>
 800a73e:	4b7b      	ldr	r3, [pc, #492]	; (800a92c <UART_SetConfig+0x2e8>)
 800a740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a744:	f003 030c 	and.w	r3, r3, #12
 800a748:	2b0c      	cmp	r3, #12
 800a74a:	d82d      	bhi.n	800a7a8 <UART_SetConfig+0x164>
 800a74c:	a201      	add	r2, pc, #4	; (adr r2, 800a754 <UART_SetConfig+0x110>)
 800a74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a752:	bf00      	nop
 800a754:	0800a789 	.word	0x0800a789
 800a758:	0800a7a9 	.word	0x0800a7a9
 800a75c:	0800a7a9 	.word	0x0800a7a9
 800a760:	0800a7a9 	.word	0x0800a7a9
 800a764:	0800a799 	.word	0x0800a799
 800a768:	0800a7a9 	.word	0x0800a7a9
 800a76c:	0800a7a9 	.word	0x0800a7a9
 800a770:	0800a7a9 	.word	0x0800a7a9
 800a774:	0800a791 	.word	0x0800a791
 800a778:	0800a7a9 	.word	0x0800a7a9
 800a77c:	0800a7a9 	.word	0x0800a7a9
 800a780:	0800a7a9 	.word	0x0800a7a9
 800a784:	0800a7a1 	.word	0x0800a7a1
 800a788:	2300      	movs	r3, #0
 800a78a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a78e:	e098      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a790:	2302      	movs	r3, #2
 800a792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a796:	e094      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a798:	2304      	movs	r3, #4
 800a79a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a79e:	e090      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7a6:	e08c      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a7a8:	2310      	movs	r3, #16
 800a7aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7ae:	e088      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a5f      	ldr	r2, [pc, #380]	; (800a934 <UART_SetConfig+0x2f0>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d125      	bne.n	800a806 <UART_SetConfig+0x1c2>
 800a7ba:	4b5c      	ldr	r3, [pc, #368]	; (800a92c <UART_SetConfig+0x2e8>)
 800a7bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a7c4:	2b30      	cmp	r3, #48	; 0x30
 800a7c6:	d016      	beq.n	800a7f6 <UART_SetConfig+0x1b2>
 800a7c8:	2b30      	cmp	r3, #48	; 0x30
 800a7ca:	d818      	bhi.n	800a7fe <UART_SetConfig+0x1ba>
 800a7cc:	2b20      	cmp	r3, #32
 800a7ce:	d00a      	beq.n	800a7e6 <UART_SetConfig+0x1a2>
 800a7d0:	2b20      	cmp	r3, #32
 800a7d2:	d814      	bhi.n	800a7fe <UART_SetConfig+0x1ba>
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d002      	beq.n	800a7de <UART_SetConfig+0x19a>
 800a7d8:	2b10      	cmp	r3, #16
 800a7da:	d008      	beq.n	800a7ee <UART_SetConfig+0x1aa>
 800a7dc:	e00f      	b.n	800a7fe <UART_SetConfig+0x1ba>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7e4:	e06d      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7ec:	e069      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a7ee:	2304      	movs	r3, #4
 800a7f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7f4:	e065      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a7f6:	2308      	movs	r3, #8
 800a7f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7fc:	e061      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a7fe:	2310      	movs	r3, #16
 800a800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a804:	e05d      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a4b      	ldr	r2, [pc, #300]	; (800a938 <UART_SetConfig+0x2f4>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d125      	bne.n	800a85c <UART_SetConfig+0x218>
 800a810:	4b46      	ldr	r3, [pc, #280]	; (800a92c <UART_SetConfig+0x2e8>)
 800a812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a816:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a81a:	2bc0      	cmp	r3, #192	; 0xc0
 800a81c:	d016      	beq.n	800a84c <UART_SetConfig+0x208>
 800a81e:	2bc0      	cmp	r3, #192	; 0xc0
 800a820:	d818      	bhi.n	800a854 <UART_SetConfig+0x210>
 800a822:	2b80      	cmp	r3, #128	; 0x80
 800a824:	d00a      	beq.n	800a83c <UART_SetConfig+0x1f8>
 800a826:	2b80      	cmp	r3, #128	; 0x80
 800a828:	d814      	bhi.n	800a854 <UART_SetConfig+0x210>
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <UART_SetConfig+0x1f0>
 800a82e:	2b40      	cmp	r3, #64	; 0x40
 800a830:	d008      	beq.n	800a844 <UART_SetConfig+0x200>
 800a832:	e00f      	b.n	800a854 <UART_SetConfig+0x210>
 800a834:	2300      	movs	r3, #0
 800a836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a83a:	e042      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a83c:	2302      	movs	r3, #2
 800a83e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a842:	e03e      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a844:	2304      	movs	r3, #4
 800a846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a84a:	e03a      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a84c:	2308      	movs	r3, #8
 800a84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a852:	e036      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a854:	2310      	movs	r3, #16
 800a856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a85a:	e032      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a30      	ldr	r2, [pc, #192]	; (800a924 <UART_SetConfig+0x2e0>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d12a      	bne.n	800a8bc <UART_SetConfig+0x278>
 800a866:	4b31      	ldr	r3, [pc, #196]	; (800a92c <UART_SetConfig+0x2e8>)
 800a868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a870:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a874:	d01a      	beq.n	800a8ac <UART_SetConfig+0x268>
 800a876:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a87a:	d81b      	bhi.n	800a8b4 <UART_SetConfig+0x270>
 800a87c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a880:	d00c      	beq.n	800a89c <UART_SetConfig+0x258>
 800a882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a886:	d815      	bhi.n	800a8b4 <UART_SetConfig+0x270>
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <UART_SetConfig+0x250>
 800a88c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a890:	d008      	beq.n	800a8a4 <UART_SetConfig+0x260>
 800a892:	e00f      	b.n	800a8b4 <UART_SetConfig+0x270>
 800a894:	2300      	movs	r3, #0
 800a896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a89a:	e012      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a89c:	2302      	movs	r3, #2
 800a89e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8a2:	e00e      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a8a4:	2304      	movs	r3, #4
 800a8a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8aa:	e00a      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a8ac:	2308      	movs	r3, #8
 800a8ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8b2:	e006      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a8b4:	2310      	movs	r3, #16
 800a8b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8ba:	e002      	b.n	800a8c2 <UART_SetConfig+0x27e>
 800a8bc:	2310      	movs	r3, #16
 800a8be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a17      	ldr	r2, [pc, #92]	; (800a924 <UART_SetConfig+0x2e0>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	f040 80a8 	bne.w	800aa1e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8d2:	2b08      	cmp	r3, #8
 800a8d4:	d834      	bhi.n	800a940 <UART_SetConfig+0x2fc>
 800a8d6:	a201      	add	r2, pc, #4	; (adr r2, 800a8dc <UART_SetConfig+0x298>)
 800a8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8dc:	0800a901 	.word	0x0800a901
 800a8e0:	0800a941 	.word	0x0800a941
 800a8e4:	0800a909 	.word	0x0800a909
 800a8e8:	0800a941 	.word	0x0800a941
 800a8ec:	0800a90f 	.word	0x0800a90f
 800a8f0:	0800a941 	.word	0x0800a941
 800a8f4:	0800a941 	.word	0x0800a941
 800a8f8:	0800a941 	.word	0x0800a941
 800a8fc:	0800a917 	.word	0x0800a917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a900:	f7fd fb7a 	bl	8007ff8 <HAL_RCC_GetPCLK1Freq>
 800a904:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a906:	e021      	b.n	800a94c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a908:	4b0c      	ldr	r3, [pc, #48]	; (800a93c <UART_SetConfig+0x2f8>)
 800a90a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a90c:	e01e      	b.n	800a94c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a90e:	f7fd fb05 	bl	8007f1c <HAL_RCC_GetSysClockFreq>
 800a912:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a914:	e01a      	b.n	800a94c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a91a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a91c:	e016      	b.n	800a94c <UART_SetConfig+0x308>
 800a91e:	bf00      	nop
 800a920:	cfff69f3 	.word	0xcfff69f3
 800a924:	40008000 	.word	0x40008000
 800a928:	40013800 	.word	0x40013800
 800a92c:	40021000 	.word	0x40021000
 800a930:	40004400 	.word	0x40004400
 800a934:	40004800 	.word	0x40004800
 800a938:	40004c00 	.word	0x40004c00
 800a93c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a940:	2300      	movs	r3, #0
 800a942:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a94a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f000 812a 	beq.w	800aba8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	4a9e      	ldr	r2, [pc, #632]	; (800abd4 <UART_SetConfig+0x590>)
 800a95a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a95e:	461a      	mov	r2, r3
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	fbb3 f3f2 	udiv	r3, r3, r2
 800a966:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	4613      	mov	r3, r2
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	4413      	add	r3, r2
 800a972:	69ba      	ldr	r2, [r7, #24]
 800a974:	429a      	cmp	r2, r3
 800a976:	d305      	bcc.n	800a984 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a97e:	69ba      	ldr	r2, [r7, #24]
 800a980:	429a      	cmp	r2, r3
 800a982:	d903      	bls.n	800a98c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a98a:	e10d      	b.n	800aba8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98e:	2200      	movs	r2, #0
 800a990:	60bb      	str	r3, [r7, #8]
 800a992:	60fa      	str	r2, [r7, #12]
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	4a8e      	ldr	r2, [pc, #568]	; (800abd4 <UART_SetConfig+0x590>)
 800a99a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	603b      	str	r3, [r7, #0]
 800a9a4:	607a      	str	r2, [r7, #4]
 800a9a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9ae:	f7f5 fd5b 	bl	8000468 <__aeabi_uldivmod>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	f04f 0200 	mov.w	r2, #0
 800a9be:	f04f 0300 	mov.w	r3, #0
 800a9c2:	020b      	lsls	r3, r1, #8
 800a9c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9c8:	0202      	lsls	r2, r0, #8
 800a9ca:	6979      	ldr	r1, [r7, #20]
 800a9cc:	6849      	ldr	r1, [r1, #4]
 800a9ce:	0849      	lsrs	r1, r1, #1
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	eb12 0804 	adds.w	r8, r2, r4
 800a9da:	eb43 0905 	adc.w	r9, r3, r5
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	469a      	mov	sl, r3
 800a9e6:	4693      	mov	fp, r2
 800a9e8:	4652      	mov	r2, sl
 800a9ea:	465b      	mov	r3, fp
 800a9ec:	4640      	mov	r0, r8
 800a9ee:	4649      	mov	r1, r9
 800a9f0:	f7f5 fd3a 	bl	8000468 <__aeabi_uldivmod>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa02:	d308      	bcc.n	800aa16 <UART_SetConfig+0x3d2>
 800aa04:	6a3b      	ldr	r3, [r7, #32]
 800aa06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa0a:	d204      	bcs.n	800aa16 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6a3a      	ldr	r2, [r7, #32]
 800aa12:	60da      	str	r2, [r3, #12]
 800aa14:	e0c8      	b.n	800aba8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aa1c:	e0c4      	b.n	800aba8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	69db      	ldr	r3, [r3, #28]
 800aa22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa26:	d167      	bne.n	800aaf8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800aa28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa2c:	2b08      	cmp	r3, #8
 800aa2e:	d828      	bhi.n	800aa82 <UART_SetConfig+0x43e>
 800aa30:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <UART_SetConfig+0x3f4>)
 800aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa36:	bf00      	nop
 800aa38:	0800aa5d 	.word	0x0800aa5d
 800aa3c:	0800aa65 	.word	0x0800aa65
 800aa40:	0800aa6d 	.word	0x0800aa6d
 800aa44:	0800aa83 	.word	0x0800aa83
 800aa48:	0800aa73 	.word	0x0800aa73
 800aa4c:	0800aa83 	.word	0x0800aa83
 800aa50:	0800aa83 	.word	0x0800aa83
 800aa54:	0800aa83 	.word	0x0800aa83
 800aa58:	0800aa7b 	.word	0x0800aa7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa5c:	f7fd facc 	bl	8007ff8 <HAL_RCC_GetPCLK1Freq>
 800aa60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa62:	e014      	b.n	800aa8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa64:	f7fd fade 	bl	8008024 <HAL_RCC_GetPCLK2Freq>
 800aa68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa6a:	e010      	b.n	800aa8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa6c:	4b5a      	ldr	r3, [pc, #360]	; (800abd8 <UART_SetConfig+0x594>)
 800aa6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aa70:	e00d      	b.n	800aa8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa72:	f7fd fa53 	bl	8007f1c <HAL_RCC_GetSysClockFreq>
 800aa76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa78:	e009      	b.n	800aa8e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aa80:	e005      	b.n	800aa8e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aa8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 8089 	beq.w	800aba8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9a:	4a4e      	ldr	r2, [pc, #312]	; (800abd4 <UART_SetConfig+0x590>)
 800aa9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaa8:	005a      	lsls	r2, r3, #1
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	085b      	lsrs	r3, r3, #1
 800aab0:	441a      	add	r2, r3
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	2b0f      	cmp	r3, #15
 800aac0:	d916      	bls.n	800aaf0 <UART_SetConfig+0x4ac>
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aac8:	d212      	bcs.n	800aaf0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	b29b      	uxth	r3, r3
 800aace:	f023 030f 	bic.w	r3, r3, #15
 800aad2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aad4:	6a3b      	ldr	r3, [r7, #32]
 800aad6:	085b      	lsrs	r3, r3, #1
 800aad8:	b29b      	uxth	r3, r3
 800aada:	f003 0307 	and.w	r3, r3, #7
 800aade:	b29a      	uxth	r2, r3
 800aae0:	8bfb      	ldrh	r3, [r7, #30]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	8bfa      	ldrh	r2, [r7, #30]
 800aaec:	60da      	str	r2, [r3, #12]
 800aaee:	e05b      	b.n	800aba8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aaf6:	e057      	b.n	800aba8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aaf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aafc:	2b08      	cmp	r3, #8
 800aafe:	d828      	bhi.n	800ab52 <UART_SetConfig+0x50e>
 800ab00:	a201      	add	r2, pc, #4	; (adr r2, 800ab08 <UART_SetConfig+0x4c4>)
 800ab02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab06:	bf00      	nop
 800ab08:	0800ab2d 	.word	0x0800ab2d
 800ab0c:	0800ab35 	.word	0x0800ab35
 800ab10:	0800ab3d 	.word	0x0800ab3d
 800ab14:	0800ab53 	.word	0x0800ab53
 800ab18:	0800ab43 	.word	0x0800ab43
 800ab1c:	0800ab53 	.word	0x0800ab53
 800ab20:	0800ab53 	.word	0x0800ab53
 800ab24:	0800ab53 	.word	0x0800ab53
 800ab28:	0800ab4b 	.word	0x0800ab4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab2c:	f7fd fa64 	bl	8007ff8 <HAL_RCC_GetPCLK1Freq>
 800ab30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab32:	e014      	b.n	800ab5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab34:	f7fd fa76 	bl	8008024 <HAL_RCC_GetPCLK2Freq>
 800ab38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab3a:	e010      	b.n	800ab5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab3c:	4b26      	ldr	r3, [pc, #152]	; (800abd8 <UART_SetConfig+0x594>)
 800ab3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ab40:	e00d      	b.n	800ab5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab42:	f7fd f9eb 	bl	8007f1c <HAL_RCC_GetSysClockFreq>
 800ab46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab48:	e009      	b.n	800ab5e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ab50:	e005      	b.n	800ab5e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800ab52:	2300      	movs	r3, #0
 800ab54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ab5c:	bf00      	nop
    }

    if (pclk != 0U)
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d021      	beq.n	800aba8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab68:	4a1a      	ldr	r2, [pc, #104]	; (800abd4 <UART_SetConfig+0x590>)
 800ab6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	085b      	lsrs	r3, r3, #1
 800ab7c:	441a      	add	r2, r3
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	2b0f      	cmp	r3, #15
 800ab8c:	d909      	bls.n	800aba2 <UART_SetConfig+0x55e>
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab94:	d205      	bcs.n	800aba2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	60da      	str	r2, [r3, #12]
 800aba0:	e002      	b.n	800aba8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	2201      	movs	r2, #1
 800abac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2200      	movs	r2, #0
 800abbc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2200      	movs	r2, #0
 800abc2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800abc4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3730      	adds	r7, #48	; 0x30
 800abcc:	46bd      	mov	sp, r7
 800abce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abd2:	bf00      	nop
 800abd4:	08016f10 	.word	0x08016f10
 800abd8:	00f42400 	.word	0x00f42400

0800abdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe8:	f003 0301 	and.w	r3, r3, #1
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00a      	beq.n	800ac06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	430a      	orrs	r2, r1
 800ac04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0a:	f003 0302 	and.w	r3, r3, #2
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00a      	beq.n	800ac28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	430a      	orrs	r2, r1
 800ac26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2c:	f003 0304 	and.w	r3, r3, #4
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00a      	beq.n	800ac4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	430a      	orrs	r2, r1
 800ac48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4e:	f003 0308 	and.w	r3, r3, #8
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00a      	beq.n	800ac6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac70:	f003 0310 	and.w	r3, r3, #16
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00a      	beq.n	800ac8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	430a      	orrs	r2, r1
 800ac8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac92:	f003 0320 	and.w	r3, r3, #32
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00a      	beq.n	800acb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	430a      	orrs	r2, r1
 800acae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d01a      	beq.n	800acf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	430a      	orrs	r2, r1
 800acd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acda:	d10a      	bne.n	800acf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	430a      	orrs	r2, r1
 800acf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00a      	beq.n	800ad14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	430a      	orrs	r2, r1
 800ad12:	605a      	str	r2, [r3, #4]
  }
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b086      	sub	sp, #24
 800ad24:	af02      	add	r7, sp, #8
 800ad26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad30:	f7f7 fbb0 	bl	8002494 <HAL_GetTick>
 800ad34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 0308 	and.w	r3, r3, #8
 800ad40:	2b08      	cmp	r3, #8
 800ad42:	d10e      	bne.n	800ad62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f82f 	bl	800adb6 <UART_WaitOnFlagUntilTimeout>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	e025      	b.n	800adae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0304 	and.w	r3, r3, #4
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	d10e      	bne.n	800ad8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad74:	9300      	str	r3, [sp, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f819 	bl	800adb6 <UART_WaitOnFlagUntilTimeout>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e00f      	b.n	800adae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2220      	movs	r2, #32
 800ad92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2220      	movs	r2, #32
 800ad9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b09c      	sub	sp, #112	; 0x70
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	603b      	str	r3, [r7, #0]
 800adc2:	4613      	mov	r3, r2
 800adc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adc6:	e0a9      	b.n	800af1c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adce:	f000 80a5 	beq.w	800af1c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800add2:	f7f7 fb5f 	bl	8002494 <HAL_GetTick>
 800add6:	4602      	mov	r2, r0
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800adde:	429a      	cmp	r2, r3
 800ade0:	d302      	bcc.n	800ade8 <UART_WaitOnFlagUntilTimeout+0x32>
 800ade2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d140      	bne.n	800ae6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adf0:	e853 3f00 	ldrex	r3, [r3]
 800adf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800adf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800adfc:	667b      	str	r3, [r7, #100]	; 0x64
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	461a      	mov	r2, r3
 800ae04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae06:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae0e:	e841 2300 	strex	r3, r2, [r1]
 800ae12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ae14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1e6      	bne.n	800ade8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	3308      	adds	r3, #8
 800ae20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae24:	e853 3f00 	ldrex	r3, [r3]
 800ae28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2c:	f023 0301 	bic.w	r3, r3, #1
 800ae30:	663b      	str	r3, [r7, #96]	; 0x60
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	3308      	adds	r3, #8
 800ae38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae3a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ae3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae42:	e841 2300 	strex	r3, r2, [r1]
 800ae46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ae48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1e5      	bne.n	800ae1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2220      	movs	r2, #32
 800ae52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2220      	movs	r2, #32
 800ae5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ae66:	2303      	movs	r3, #3
 800ae68:	e069      	b.n	800af3e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d051      	beq.n	800af1c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	69db      	ldr	r3, [r3, #28]
 800ae7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae86:	d149      	bne.n	800af1c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9a:	e853 3f00 	ldrex	r3, [r3]
 800ae9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aea6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	461a      	mov	r2, r3
 800aeae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeb0:	637b      	str	r3, [r7, #52]	; 0x34
 800aeb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aeb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeb8:	e841 2300 	strex	r3, r2, [r1]
 800aebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1e6      	bne.n	800ae92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3308      	adds	r3, #8
 800aeca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	e853 3f00 	ldrex	r3, [r3]
 800aed2:	613b      	str	r3, [r7, #16]
   return(result);
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f023 0301 	bic.w	r3, r3, #1
 800aeda:	66bb      	str	r3, [r7, #104]	; 0x68
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	3308      	adds	r3, #8
 800aee2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aee4:	623a      	str	r2, [r7, #32]
 800aee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee8:	69f9      	ldr	r1, [r7, #28]
 800aeea:	6a3a      	ldr	r2, [r7, #32]
 800aeec:	e841 2300 	strex	r3, r2, [r1]
 800aef0:	61bb      	str	r3, [r7, #24]
   return(result);
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1e5      	bne.n	800aec4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2220      	movs	r2, #32
 800aefc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2220      	movs	r2, #32
 800af04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2220      	movs	r2, #32
 800af0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800af18:	2303      	movs	r3, #3
 800af1a:	e010      	b.n	800af3e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	69da      	ldr	r2, [r3, #28]
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	4013      	ands	r3, r2
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	429a      	cmp	r2, r3
 800af2a:	bf0c      	ite	eq
 800af2c:	2301      	moveq	r3, #1
 800af2e:	2300      	movne	r3, #0
 800af30:	b2db      	uxtb	r3, r3
 800af32:	461a      	mov	r2, r3
 800af34:	79fb      	ldrb	r3, [r7, #7]
 800af36:	429a      	cmp	r2, r3
 800af38:	f43f af46 	beq.w	800adc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3770      	adds	r7, #112	; 0x70
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
	...

0800af48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af48:	b480      	push	{r7}
 800af4a:	b0a3      	sub	sp, #140	; 0x8c
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	4613      	mov	r3, r2
 800af54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	88fa      	ldrh	r2, [r7, #6]
 800af60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	88fa      	ldrh	r2, [r7, #6]
 800af68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af7a:	d10e      	bne.n	800af9a <UART_Start_Receive_IT+0x52>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d105      	bne.n	800af90 <UART_Start_Receive_IT+0x48>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f240 12ff 	movw	r2, #511	; 0x1ff
 800af8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800af8e:	e02d      	b.n	800afec <UART_Start_Receive_IT+0xa4>
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	22ff      	movs	r2, #255	; 0xff
 800af94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800af98:	e028      	b.n	800afec <UART_Start_Receive_IT+0xa4>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10d      	bne.n	800afbe <UART_Start_Receive_IT+0x76>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d104      	bne.n	800afb4 <UART_Start_Receive_IT+0x6c>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	22ff      	movs	r2, #255	; 0xff
 800afae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800afb2:	e01b      	b.n	800afec <UART_Start_Receive_IT+0xa4>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	227f      	movs	r2, #127	; 0x7f
 800afb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800afbc:	e016      	b.n	800afec <UART_Start_Receive_IT+0xa4>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afc6:	d10d      	bne.n	800afe4 <UART_Start_Receive_IT+0x9c>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d104      	bne.n	800afda <UART_Start_Receive_IT+0x92>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	227f      	movs	r2, #127	; 0x7f
 800afd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800afd8:	e008      	b.n	800afec <UART_Start_Receive_IT+0xa4>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	223f      	movs	r2, #63	; 0x3f
 800afde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800afe2:	e003      	b.n	800afec <UART_Start_Receive_IT+0xa4>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2222      	movs	r2, #34	; 0x22
 800aff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3308      	adds	r3, #8
 800b002:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b006:	e853 3f00 	ldrex	r3, [r3]
 800b00a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b00c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b00e:	f043 0301 	orr.w	r3, r3, #1
 800b012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	3308      	adds	r3, #8
 800b01c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b020:	673a      	str	r2, [r7, #112]	; 0x70
 800b022:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b024:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b026:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b028:	e841 2300 	strex	r3, r2, [r1]
 800b02c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b02e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1e3      	bne.n	800affc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b03c:	d153      	bne.n	800b0e6 <UART_Start_Receive_IT+0x19e>
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b044:	88fa      	ldrh	r2, [r7, #6]
 800b046:	429a      	cmp	r2, r3
 800b048:	d34d      	bcc.n	800b0e6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b052:	d107      	bne.n	800b064 <UART_Start_Receive_IT+0x11c>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d103      	bne.n	800b064 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4a4b      	ldr	r2, [pc, #300]	; (800b18c <UART_Start_Receive_IT+0x244>)
 800b060:	671a      	str	r2, [r3, #112]	; 0x70
 800b062:	e002      	b.n	800b06a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	4a4a      	ldr	r2, [pc, #296]	; (800b190 <UART_Start_Receive_IT+0x248>)
 800b068:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d01a      	beq.n	800b0b0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b082:	e853 3f00 	ldrex	r3, [r3]
 800b086:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b08a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b08e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	461a      	mov	r2, r3
 800b098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b09c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b09e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b0a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0a4:	e841 2300 	strex	r3, r2, [r1]
 800b0a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b0aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d1e4      	bne.n	800b07a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ba:	e853 3f00 	ldrex	r3, [r3]
 800b0be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b0d0:	64ba      	str	r2, [r7, #72]	; 0x48
 800b0d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0d8:	e841 2300 	strex	r3, r2, [r1]
 800b0dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b0de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1e5      	bne.n	800b0b0 <UART_Start_Receive_IT+0x168>
 800b0e4:	e04a      	b.n	800b17c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0ee:	d107      	bne.n	800b100 <UART_Start_Receive_IT+0x1b8>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d103      	bne.n	800b100 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	4a26      	ldr	r2, [pc, #152]	; (800b194 <UART_Start_Receive_IT+0x24c>)
 800b0fc:	671a      	str	r2, [r3, #112]	; 0x70
 800b0fe:	e002      	b.n	800b106 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	4a25      	ldr	r2, [pc, #148]	; (800b198 <UART_Start_Receive_IT+0x250>)
 800b104:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d019      	beq.n	800b14a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	e853 3f00 	ldrex	r3, [r3]
 800b122:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b12a:	677b      	str	r3, [r7, #116]	; 0x74
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	461a      	mov	r2, r3
 800b132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b134:	637b      	str	r3, [r7, #52]	; 0x34
 800b136:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b13a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b13c:	e841 2300 	strex	r3, r2, [r1]
 800b140:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b144:	2b00      	cmp	r3, #0
 800b146:	d1e6      	bne.n	800b116 <UART_Start_Receive_IT+0x1ce>
 800b148:	e018      	b.n	800b17c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	e853 3f00 	ldrex	r3, [r3]
 800b156:	613b      	str	r3, [r7, #16]
   return(result);
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	f043 0320 	orr.w	r3, r3, #32
 800b15e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	461a      	mov	r2, r3
 800b166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b168:	623b      	str	r3, [r7, #32]
 800b16a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16c:	69f9      	ldr	r1, [r7, #28]
 800b16e:	6a3a      	ldr	r2, [r7, #32]
 800b170:	e841 2300 	strex	r3, r2, [r1]
 800b174:	61bb      	str	r3, [r7, #24]
   return(result);
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1e6      	bne.n	800b14a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	378c      	adds	r7, #140	; 0x8c
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	0800ba5d 	.word	0x0800ba5d
 800b190:	0800b765 	.word	0x0800b765
 800b194:	0800b603 	.word	0x0800b603
 800b198:	0800b4a3 	.word	0x0800b4a3

0800b19c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b08f      	sub	sp, #60	; 0x3c
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	e853 3f00 	ldrex	r3, [r3]
 800b1b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b1b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1c4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ca:	e841 2300 	strex	r3, r2, [r1]
 800b1ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1e6      	bne.n	800b1a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3308      	adds	r3, #8
 800b1dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	e853 3f00 	ldrex	r3, [r3]
 800b1e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b1ec:	633b      	str	r3, [r7, #48]	; 0x30
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3308      	adds	r3, #8
 800b1f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1f6:	61ba      	str	r2, [r7, #24]
 800b1f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fa:	6979      	ldr	r1, [r7, #20]
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	e841 2300 	strex	r3, r2, [r1]
 800b202:	613b      	str	r3, [r7, #16]
   return(result);
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1e5      	bne.n	800b1d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2220      	movs	r2, #32
 800b20e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800b212:	bf00      	nop
 800b214:	373c      	adds	r7, #60	; 0x3c
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b21e:	b480      	push	{r7}
 800b220:	b095      	sub	sp, #84	; 0x54
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b22e:	e853 3f00 	ldrex	r3, [r3]
 800b232:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b23a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	461a      	mov	r2, r3
 800b242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b244:	643b      	str	r3, [r7, #64]	; 0x40
 800b246:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b24a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b24c:	e841 2300 	strex	r3, r2, [r1]
 800b250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1e6      	bne.n	800b226 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	3308      	adds	r3, #8
 800b25e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	e853 3f00 	ldrex	r3, [r3]
 800b266:	61fb      	str	r3, [r7, #28]
   return(result);
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b26e:	f023 0301 	bic.w	r3, r3, #1
 800b272:	64bb      	str	r3, [r7, #72]	; 0x48
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3308      	adds	r3, #8
 800b27a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b27c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b27e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b284:	e841 2300 	strex	r3, r2, [r1]
 800b288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1e3      	bne.n	800b258 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b294:	2b01      	cmp	r3, #1
 800b296:	d118      	bne.n	800b2ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	e853 3f00 	ldrex	r3, [r3]
 800b2a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	f023 0310 	bic.w	r3, r3, #16
 800b2ac:	647b      	str	r3, [r7, #68]	; 0x44
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2b6:	61bb      	str	r3, [r7, #24]
 800b2b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ba:	6979      	ldr	r1, [r7, #20]
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	e841 2300 	strex	r3, r2, [r1]
 800b2c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1e6      	bne.n	800b298 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b2de:	bf00      	nop
 800b2e0:	3754      	adds	r7, #84	; 0x54
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr

0800b2ea <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b090      	sub	sp, #64	; 0x40
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 0320 	and.w	r3, r3, #32
 800b302:	2b00      	cmp	r3, #0
 800b304:	d137      	bne.n	800b376 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b308:	2200      	movs	r2, #0
 800b30a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3308      	adds	r3, #8
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	e853 3f00 	ldrex	r3, [r3]
 800b31c:	623b      	str	r3, [r7, #32]
   return(result);
 800b31e:	6a3b      	ldr	r3, [r7, #32]
 800b320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b324:	63bb      	str	r3, [r7, #56]	; 0x38
 800b326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3308      	adds	r3, #8
 800b32c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b32e:	633a      	str	r2, [r7, #48]	; 0x30
 800b330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b336:	e841 2300 	strex	r3, r2, [r1]
 800b33a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1e5      	bne.n	800b30e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	e853 3f00 	ldrex	r3, [r3]
 800b34e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b356:	637b      	str	r3, [r7, #52]	; 0x34
 800b358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	461a      	mov	r2, r3
 800b35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b360:	61fb      	str	r3, [r7, #28]
 800b362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b364:	69b9      	ldr	r1, [r7, #24]
 800b366:	69fa      	ldr	r2, [r7, #28]
 800b368:	e841 2300 	strex	r3, r2, [r1]
 800b36c:	617b      	str	r3, [r7, #20]
   return(result);
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1e6      	bne.n	800b342 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b374:	e002      	b.n	800b37c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b376:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b378:	f00a fda2 	bl	8015ec0 <HAL_UART_TxCpltCallback>
}
 800b37c:	bf00      	nop
 800b37e:	3740      	adds	r7, #64	; 0x40
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b390:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f7ff f940 	bl	800a618 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b398:	bf00      	nop
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3b4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3bc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3c8:	2b80      	cmp	r3, #128	; 0x80
 800b3ca:	d109      	bne.n	800b3e0 <UART_DMAError+0x40>
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	2b21      	cmp	r3, #33	; 0x21
 800b3d0:	d106      	bne.n	800b3e0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b3da:	6978      	ldr	r0, [r7, #20]
 800b3dc:	f7ff fede 	bl	800b19c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3ea:	2b40      	cmp	r3, #64	; 0x40
 800b3ec:	d109      	bne.n	800b402 <UART_DMAError+0x62>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b22      	cmp	r3, #34	; 0x22
 800b3f2:	d106      	bne.n	800b402 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b3fc:	6978      	ldr	r0, [r7, #20]
 800b3fe:	f7ff ff0e 	bl	800b21e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b408:	f043 0210 	orr.w	r2, r3, #16
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b412:	6978      	ldr	r0, [r7, #20]
 800b414:	f00a fd9e 	bl	8015f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b418:	bf00      	nop
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b42c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f00a fd88 	bl	8015f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b444:	bf00      	nop
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b088      	sub	sp, #32
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	e853 3f00 	ldrex	r3, [r3]
 800b460:	60bb      	str	r3, [r7, #8]
   return(result);
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b468:	61fb      	str	r3, [r7, #28]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	461a      	mov	r2, r3
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	61bb      	str	r3, [r7, #24]
 800b474:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b476:	6979      	ldr	r1, [r7, #20]
 800b478:	69ba      	ldr	r2, [r7, #24]
 800b47a:	e841 2300 	strex	r3, r2, [r1]
 800b47e:	613b      	str	r3, [r7, #16]
   return(result);
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1e6      	bne.n	800b454 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2220      	movs	r2, #32
 800b48a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f00a fd13 	bl	8015ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b49a:	bf00      	nop
 800b49c:	3720      	adds	r7, #32
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b096      	sub	sp, #88	; 0x58
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ba:	2b22      	cmp	r3, #34	; 0x22
 800b4bc:	f040 8095 	bne.w	800b5ea <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b4ca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b4ce:	b2d9      	uxtb	r1, r3
 800b4d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4da:	400a      	ands	r2, r1
 800b4dc:	b2d2      	uxtb	r2, r2
 800b4de:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b502:	b29b      	uxth	r3, r3
 800b504:	2b00      	cmp	r3, #0
 800b506:	d178      	bne.n	800b5fa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b510:	e853 3f00 	ldrex	r3, [r3]
 800b514:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b51c:	653b      	str	r3, [r7, #80]	; 0x50
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	461a      	mov	r2, r3
 800b524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b526:	647b      	str	r3, [r7, #68]	; 0x44
 800b528:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b52c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b52e:	e841 2300 	strex	r3, r2, [r1]
 800b532:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1e6      	bne.n	800b508 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	3308      	adds	r3, #8
 800b540:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b544:	e853 3f00 	ldrex	r3, [r3]
 800b548:	623b      	str	r3, [r7, #32]
   return(result);
 800b54a:	6a3b      	ldr	r3, [r7, #32]
 800b54c:	f023 0301 	bic.w	r3, r3, #1
 800b550:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3308      	adds	r3, #8
 800b558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b55a:	633a      	str	r2, [r7, #48]	; 0x30
 800b55c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b562:	e841 2300 	strex	r3, r2, [r1]
 800b566:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1e5      	bne.n	800b53a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2220      	movs	r2, #32
 800b572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b580:	2b01      	cmp	r3, #1
 800b582:	d12e      	bne.n	800b5e2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	e853 3f00 	ldrex	r3, [r3]
 800b596:	60fb      	str	r3, [r7, #12]
   return(result);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f023 0310 	bic.w	r3, r3, #16
 800b59e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5a8:	61fb      	str	r3, [r7, #28]
 800b5aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ac:	69b9      	ldr	r1, [r7, #24]
 800b5ae:	69fa      	ldr	r2, [r7, #28]
 800b5b0:	e841 2300 	strex	r3, r2, [r1]
 800b5b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1e6      	bne.n	800b58a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	69db      	ldr	r3, [r3, #28]
 800b5c2:	f003 0310 	and.w	r3, r3, #16
 800b5c6:	2b10      	cmp	r3, #16
 800b5c8:	d103      	bne.n	800b5d2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2210      	movs	r2, #16
 800b5d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7ff f826 	bl	800a62c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b5e0:	e00b      	b.n	800b5fa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f00a fc80 	bl	8015ee8 <HAL_UART_RxCpltCallback>
}
 800b5e8:	e007      	b.n	800b5fa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	699a      	ldr	r2, [r3, #24]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f042 0208 	orr.w	r2, r2, #8
 800b5f8:	619a      	str	r2, [r3, #24]
}
 800b5fa:	bf00      	nop
 800b5fc:	3758      	adds	r7, #88	; 0x58
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b096      	sub	sp, #88	; 0x58
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b610:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b61a:	2b22      	cmp	r3, #34	; 0x22
 800b61c:	f040 8095 	bne.w	800b74a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b626:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b62e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b630:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b634:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b638:	4013      	ands	r3, r2
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b63e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b644:	1c9a      	adds	r2, r3, #2
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b650:	b29b      	uxth	r3, r3
 800b652:	3b01      	subs	r3, #1
 800b654:	b29a      	uxth	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b662:	b29b      	uxth	r3, r3
 800b664:	2b00      	cmp	r3, #0
 800b666:	d178      	bne.n	800b75a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b670:	e853 3f00 	ldrex	r3, [r3]
 800b674:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b67c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	461a      	mov	r2, r3
 800b684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b686:	643b      	str	r3, [r7, #64]	; 0x40
 800b688:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b68c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b68e:	e841 2300 	strex	r3, r2, [r1]
 800b692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1e6      	bne.n	800b668 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	3308      	adds	r3, #8
 800b6a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	e853 3f00 	ldrex	r3, [r3]
 800b6a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	f023 0301 	bic.w	r3, r3, #1
 800b6b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	3308      	adds	r3, #8
 800b6b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c2:	e841 2300 	strex	r3, r2, [r1]
 800b6c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1e5      	bne.n	800b69a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2220      	movs	r2, #32
 800b6d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d12e      	bne.n	800b742 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	e853 3f00 	ldrex	r3, [r3]
 800b6f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f023 0310 	bic.w	r3, r3, #16
 800b6fe:	647b      	str	r3, [r7, #68]	; 0x44
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	461a      	mov	r2, r3
 800b706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b708:	61bb      	str	r3, [r7, #24]
 800b70a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70c:	6979      	ldr	r1, [r7, #20]
 800b70e:	69ba      	ldr	r2, [r7, #24]
 800b710:	e841 2300 	strex	r3, r2, [r1]
 800b714:	613b      	str	r3, [r7, #16]
   return(result);
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1e6      	bne.n	800b6ea <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	69db      	ldr	r3, [r3, #28]
 800b722:	f003 0310 	and.w	r3, r3, #16
 800b726:	2b10      	cmp	r3, #16
 800b728:	d103      	bne.n	800b732 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2210      	movs	r2, #16
 800b730:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f7fe ff76 	bl	800a62c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b740:	e00b      	b.n	800b75a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f00a fbd0 	bl	8015ee8 <HAL_UART_RxCpltCallback>
}
 800b748:	e007      	b.n	800b75a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	699a      	ldr	r2, [r3, #24]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f042 0208 	orr.w	r2, r2, #8
 800b758:	619a      	str	r2, [r3, #24]
}
 800b75a:	bf00      	nop
 800b75c:	3758      	adds	r7, #88	; 0x58
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
	...

0800b764 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b0a6      	sub	sp, #152	; 0x98
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b772:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	69db      	ldr	r3, [r3, #28]
 800b77c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b79a:	2b22      	cmp	r3, #34	; 0x22
 800b79c:	f040 814f 	bne.w	800ba3e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b7a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b7aa:	e0f6      	b.n	800b99a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b7b6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b7ba:	b2d9      	uxtb	r1, r3
 800b7bc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b7c0:	b2da      	uxtb	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7c6:	400a      	ands	r2, r1
 800b7c8:	b2d2      	uxtb	r2, r2
 800b7ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	69db      	ldr	r3, [r3, #28]
 800b7ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b7f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b7f6:	f003 0307 	and.w	r3, r3, #7
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d053      	beq.n	800b8a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b00      	cmp	r3, #0
 800b808:	d011      	beq.n	800b82e <UART_RxISR_8BIT_FIFOEN+0xca>
 800b80a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00b      	beq.n	800b82e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2201      	movs	r2, #1
 800b81c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b824:	f043 0201 	orr.w	r2, r3, #1
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b82e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b832:	f003 0302 	and.w	r3, r3, #2
 800b836:	2b00      	cmp	r3, #0
 800b838:	d011      	beq.n	800b85e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b83a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b83e:	f003 0301 	and.w	r3, r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00b      	beq.n	800b85e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2202      	movs	r2, #2
 800b84c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b854:	f043 0204 	orr.w	r2, r3, #4
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b85e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b862:	f003 0304 	and.w	r3, r3, #4
 800b866:	2b00      	cmp	r3, #0
 800b868:	d011      	beq.n	800b88e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b86a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b86e:	f003 0301 	and.w	r3, r3, #1
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00b      	beq.n	800b88e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2204      	movs	r2, #4
 800b87c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b884:	f043 0202 	orr.w	r2, r3, #2
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b894:	2b00      	cmp	r3, #0
 800b896:	d006      	beq.n	800b8a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f00a fb5b 	bl	8015f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d173      	bne.n	800b99a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8ba:	e853 3f00 	ldrex	r3, [r3]
 800b8be:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b8c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b8d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8d6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b8da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b8dc:	e841 2300 	strex	r3, r2, [r1]
 800b8e0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b8e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1e4      	bne.n	800b8b2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	3308      	adds	r3, #8
 800b8ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8f2:	e853 3f00 	ldrex	r3, [r3]
 800b8f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b8f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8fe:	f023 0301 	bic.w	r3, r3, #1
 800b902:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3308      	adds	r3, #8
 800b90a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b90c:	657a      	str	r2, [r7, #84]	; 0x54
 800b90e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b910:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b912:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b914:	e841 2300 	strex	r3, r2, [r1]
 800b918:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1e3      	bne.n	800b8e8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2220      	movs	r2, #32
 800b924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b932:	2b01      	cmp	r3, #1
 800b934:	d12e      	bne.n	800b994 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b944:	e853 3f00 	ldrex	r3, [r3]
 800b948:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94c:	f023 0310 	bic.w	r3, r3, #16
 800b950:	67bb      	str	r3, [r7, #120]	; 0x78
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	461a      	mov	r2, r3
 800b958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b95a:	643b      	str	r3, [r7, #64]	; 0x40
 800b95c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b962:	e841 2300 	strex	r3, r2, [r1]
 800b966:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1e6      	bne.n	800b93c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	69db      	ldr	r3, [r3, #28]
 800b974:	f003 0310 	and.w	r3, r3, #16
 800b978:	2b10      	cmp	r3, #16
 800b97a:	d103      	bne.n	800b984 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2210      	movs	r2, #16
 800b982:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7fe fe4d 	bl	800a62c <HAL_UARTEx_RxEventCallback>
 800b992:	e002      	b.n	800b99a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f00a faa7 	bl	8015ee8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b99a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d006      	beq.n	800b9b0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800b9a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b9a6:	f003 0320 	and.w	r3, r3, #32
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f47f aefe 	bne.w	800b7ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b9ba:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d045      	beq.n	800ba4e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b9c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d23e      	bcs.n	800ba4e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	3308      	adds	r3, #8
 800b9d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d8:	6a3b      	ldr	r3, [r7, #32]
 800b9da:	e853 3f00 	ldrex	r3, [r3]
 800b9de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9e6:	673b      	str	r3, [r7, #112]	; 0x70
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	3308      	adds	r3, #8
 800b9ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b9f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9f8:	e841 2300 	strex	r3, r2, [r1]
 800b9fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e5      	bne.n	800b9d0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a14      	ldr	r2, [pc, #80]	; (800ba58 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800ba08:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	e853 3f00 	ldrex	r3, [r3]
 800ba16:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	f043 0320 	orr.w	r3, r3, #32
 800ba1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	461a      	mov	r2, r3
 800ba26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba28:	61bb      	str	r3, [r7, #24]
 800ba2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2c:	6979      	ldr	r1, [r7, #20]
 800ba2e:	69ba      	ldr	r2, [r7, #24]
 800ba30:	e841 2300 	strex	r3, r2, [r1]
 800ba34:	613b      	str	r3, [r7, #16]
   return(result);
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d1e6      	bne.n	800ba0a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba3c:	e007      	b.n	800ba4e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	699a      	ldr	r2, [r3, #24]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f042 0208 	orr.w	r2, r2, #8
 800ba4c:	619a      	str	r2, [r3, #24]
}
 800ba4e:	bf00      	nop
 800ba50:	3798      	adds	r7, #152	; 0x98
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	0800b4a3 	.word	0x0800b4a3

0800ba5c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b0a8      	sub	sp, #160	; 0xa0
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba6a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	69db      	ldr	r3, [r3, #28]
 800ba74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba92:	2b22      	cmp	r3, #34	; 0x22
 800ba94:	f040 8153 	bne.w	800bd3e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ba9e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800baa2:	e0fa      	b.n	800bc9a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baaa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bab2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800bab6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800baba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800babe:	4013      	ands	r3, r2
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bac6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bacc:	1c9a      	adds	r2, r3, #2
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bad8:	b29b      	uxth	r3, r3
 800bada:	3b01      	subs	r3, #1
 800badc:	b29a      	uxth	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	69db      	ldr	r3, [r3, #28]
 800baea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800baee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800baf2:	f003 0307 	and.w	r3, r3, #7
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d053      	beq.n	800bba2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bafa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bafe:	f003 0301 	and.w	r3, r3, #1
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d011      	beq.n	800bb2a <UART_RxISR_16BIT_FIFOEN+0xce>
 800bb06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00b      	beq.n	800bb2a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2201      	movs	r2, #1
 800bb18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb20:	f043 0201 	orr.w	r2, r3, #1
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb2e:	f003 0302 	and.w	r3, r3, #2
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d011      	beq.n	800bb5a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bb36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00b      	beq.n	800bb5a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2202      	movs	r2, #2
 800bb48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb50:	f043 0204 	orr.w	r2, r3, #4
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb5e:	f003 0304 	and.w	r3, r3, #4
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d011      	beq.n	800bb8a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bb66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00b      	beq.n	800bb8a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2204      	movs	r2, #4
 800bb78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb80:	f043 0202 	orr.w	r2, r3, #2
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d006      	beq.n	800bba2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f00a f9dd 	bl	8015f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d175      	bne.n	800bc9a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbb6:	e853 3f00 	ldrex	r3, [r3]
 800bbba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bbbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbd2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bbd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bbd8:	e841 2300 	strex	r3, r2, [r1]
 800bbdc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bbde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1e4      	bne.n	800bbae <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3308      	adds	r3, #8
 800bbea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbee:	e853 3f00 	ldrex	r3, [r3]
 800bbf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bbf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbfa:	f023 0301 	bic.w	r3, r3, #1
 800bbfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3308      	adds	r3, #8
 800bc08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc0c:	65ba      	str	r2, [r7, #88]	; 0x58
 800bc0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc14:	e841 2300 	strex	r3, r2, [r1]
 800bc18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1e1      	bne.n	800bbe4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2220      	movs	r2, #32
 800bc24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d12e      	bne.n	800bc94 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc44:	e853 3f00 	ldrex	r3, [r3]
 800bc48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4c:	f023 0310 	bic.w	r3, r3, #16
 800bc50:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	461a      	mov	r2, r3
 800bc58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc5a:	647b      	str	r3, [r7, #68]	; 0x44
 800bc5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc62:	e841 2300 	strex	r3, r2, [r1]
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1e6      	bne.n	800bc3c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	69db      	ldr	r3, [r3, #28]
 800bc74:	f003 0310 	and.w	r3, r3, #16
 800bc78:	2b10      	cmp	r3, #16
 800bc7a:	d103      	bne.n	800bc84 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2210      	movs	r2, #16
 800bc82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7fe fccd 	bl	800a62c <HAL_UARTEx_RxEventCallback>
 800bc92:	e002      	b.n	800bc9a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f00a f927 	bl	8015ee8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bc9a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d006      	beq.n	800bcb0 <UART_RxISR_16BIT_FIFOEN+0x254>
 800bca2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bca6:	f003 0320 	and.w	r3, r3, #32
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f47f aefa 	bne.w	800baa4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcb6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bcba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d045      	beq.n	800bd4e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bcc8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d23e      	bcs.n	800bd4e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3308      	adds	r3, #8
 800bcd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcda:	e853 3f00 	ldrex	r3, [r3]
 800bcde:	623b      	str	r3, [r7, #32]
   return(result);
 800bce0:	6a3b      	ldr	r3, [r7, #32]
 800bce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bce6:	677b      	str	r3, [r7, #116]	; 0x74
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3308      	adds	r3, #8
 800bcee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bcf0:	633a      	str	r2, [r7, #48]	; 0x30
 800bcf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcf8:	e841 2300 	strex	r3, r2, [r1]
 800bcfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1e5      	bne.n	800bcd0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a14      	ldr	r2, [pc, #80]	; (800bd58 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800bd08:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	e853 3f00 	ldrex	r3, [r3]
 800bd16:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f043 0320 	orr.w	r3, r3, #32
 800bd1e:	673b      	str	r3, [r7, #112]	; 0x70
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	461a      	mov	r2, r3
 800bd26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd28:	61fb      	str	r3, [r7, #28]
 800bd2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2c:	69b9      	ldr	r1, [r7, #24]
 800bd2e:	69fa      	ldr	r2, [r7, #28]
 800bd30:	e841 2300 	strex	r3, r2, [r1]
 800bd34:	617b      	str	r3, [r7, #20]
   return(result);
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1e6      	bne.n	800bd0a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd3c:	e007      	b.n	800bd4e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	699a      	ldr	r2, [r3, #24]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f042 0208 	orr.w	r2, r2, #8
 800bd4c:	619a      	str	r2, [r3, #24]
}
 800bd4e:	bf00      	nop
 800bd50:	37a0      	adds	r7, #160	; 0xa0
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	0800b603 	.word	0x0800b603

0800bd5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd64:	bf00      	nop
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bd8c:	bf00      	nop
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d101      	bne.n	800bdae <HAL_UARTEx_DisableFifoMode+0x16>
 800bdaa:	2302      	movs	r3, #2
 800bdac:	e027      	b.n	800bdfe <HAL_UARTEx_DisableFifoMode+0x66>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2224      	movs	r2, #36	; 0x24
 800bdba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f022 0201 	bic.w	r2, r2, #1
 800bdd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bddc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2220      	movs	r2, #32
 800bdf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3714      	adds	r7, #20
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b084      	sub	sp, #16
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d101      	bne.n	800be22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be1e:	2302      	movs	r3, #2
 800be20:	e02d      	b.n	800be7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2201      	movs	r2, #1
 800be26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2224      	movs	r2, #36	; 0x24
 800be2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f022 0201 	bic.w	r2, r2, #1
 800be48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	430a      	orrs	r2, r1
 800be5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 f850 	bl	800bf04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2220      	movs	r2, #32
 800be70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be96:	2b01      	cmp	r3, #1
 800be98:	d101      	bne.n	800be9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800be9a:	2302      	movs	r3, #2
 800be9c:	e02d      	b.n	800befa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2224      	movs	r2, #36	; 0x24
 800beaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f022 0201 	bic.w	r2, r2, #1
 800bec4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	430a      	orrs	r2, r1
 800bed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f812 	bl	800bf04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2220      	movs	r2, #32
 800beec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
	...

0800bf04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d108      	bne.n	800bf26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf24:	e031      	b.n	800bf8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf26:	2308      	movs	r3, #8
 800bf28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf2a:	2308      	movs	r3, #8
 800bf2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	0e5b      	lsrs	r3, r3, #25
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	f003 0307 	and.w	r3, r3, #7
 800bf3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	0f5b      	lsrs	r3, r3, #29
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	f003 0307 	and.w	r3, r3, #7
 800bf4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf4e:	7bbb      	ldrb	r3, [r7, #14]
 800bf50:	7b3a      	ldrb	r2, [r7, #12]
 800bf52:	4911      	ldr	r1, [pc, #68]	; (800bf98 <UARTEx_SetNbDataToProcess+0x94>)
 800bf54:	5c8a      	ldrb	r2, [r1, r2]
 800bf56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bf5a:	7b3a      	ldrb	r2, [r7, #12]
 800bf5c:	490f      	ldr	r1, [pc, #60]	; (800bf9c <UARTEx_SetNbDataToProcess+0x98>)
 800bf5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf60:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
 800bf6e:	7b7a      	ldrb	r2, [r7, #13]
 800bf70:	4909      	ldr	r1, [pc, #36]	; (800bf98 <UARTEx_SetNbDataToProcess+0x94>)
 800bf72:	5c8a      	ldrb	r2, [r1, r2]
 800bf74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bf78:	7b7a      	ldrb	r2, [r7, #13]
 800bf7a:	4908      	ldr	r1, [pc, #32]	; (800bf9c <UARTEx_SetNbDataToProcess+0x98>)
 800bf7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bf8a:	bf00      	nop
 800bf8c:	3714      	adds	r7, #20
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr
 800bf96:	bf00      	nop
 800bf98:	08016f28 	.word	0x08016f28
 800bf9c:	08016f30 	.word	0x08016f30

0800bfa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bfb0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bfb4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3714      	adds	r7, #20
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b085      	sub	sp, #20
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bfd6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bfda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	43db      	mvns	r3, r3
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	4013      	ands	r3, r2
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c004:	b084      	sub	sp, #16
 800c006:	b480      	push	{r7}
 800c008:	b083      	sub	sp, #12
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
 800c00e:	f107 0014 	add.w	r0, r7, #20
 800c012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2201      	movs	r2, #1
 800c01a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	b004      	add	sp, #16
 800c044:	4770      	bx	lr
	...

0800c048 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c048:	b480      	push	{r7}
 800c04a:	b09d      	sub	sp, #116	; 0x74
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c052:	2300      	movs	r3, #0
 800c054:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	881b      	ldrh	r3, [r3, #0]
 800c064:	b29b      	uxth	r3, r3
 800c066:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c06a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c06e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	78db      	ldrb	r3, [r3, #3]
 800c076:	2b03      	cmp	r3, #3
 800c078:	d81f      	bhi.n	800c0ba <USB_ActivateEndpoint+0x72>
 800c07a:	a201      	add	r2, pc, #4	; (adr r2, 800c080 <USB_ActivateEndpoint+0x38>)
 800c07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c080:	0800c091 	.word	0x0800c091
 800c084:	0800c0ad 	.word	0x0800c0ad
 800c088:	0800c0c3 	.word	0x0800c0c3
 800c08c:	0800c09f 	.word	0x0800c09f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c090:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c094:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c098:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c09c:	e012      	b.n	800c0c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c09e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c0a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800c0a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c0aa:	e00b      	b.n	800c0c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c0ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c0b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c0b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c0b8:	e004      	b.n	800c0c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800c0c0:	e000      	b.n	800c0c4 <USB_ActivateEndpoint+0x7c>
      break;
 800c0c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	441a      	add	r2, r3
 800c0ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c0d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	881b      	ldrh	r3, [r3, #0]
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	b21b      	sxth	r3, r3
 800c0f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0fe:	b21a      	sxth	r2, r3
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	b21b      	sxth	r3, r3
 800c106:	4313      	orrs	r3, r2
 800c108:	b21b      	sxth	r3, r3
 800c10a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	441a      	add	r2, r3
 800c118:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c11c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	7b1b      	ldrb	r3, [r3, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	f040 8149 	bne.w	800c3cc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	785b      	ldrb	r3, [r3, #1]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f000 8084 	beq.w	800c24c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	61bb      	str	r3, [r7, #24]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c14e:	b29b      	uxth	r3, r3
 800c150:	461a      	mov	r2, r3
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	4413      	add	r3, r2
 800c156:	61bb      	str	r3, [r7, #24]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	00da      	lsls	r2, r3, #3
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	4413      	add	r3, r2
 800c162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c166:	617b      	str	r3, [r7, #20]
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	88db      	ldrh	r3, [r3, #6]
 800c16c:	085b      	lsrs	r3, r3, #1
 800c16e:	b29b      	uxth	r3, r3
 800c170:	005b      	lsls	r3, r3, #1
 800c172:	b29a      	uxth	r2, r3
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	881b      	ldrh	r3, [r3, #0]
 800c184:	827b      	strh	r3, [r7, #18]
 800c186:	8a7b      	ldrh	r3, [r7, #18]
 800c188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d01b      	beq.n	800c1c8 <USB_ActivateEndpoint+0x180>
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1a6:	823b      	strh	r3, [r7, #16]
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	441a      	add	r2, r3
 800c1b2:	8a3b      	ldrh	r3, [r7, #16]
 800c1b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	78db      	ldrb	r3, [r3, #3]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d020      	beq.n	800c212 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4413      	add	r3, r2
 800c1da:	881b      	ldrh	r3, [r3, #0]
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1e6:	81bb      	strh	r3, [r7, #12]
 800c1e8:	89bb      	ldrh	r3, [r7, #12]
 800c1ea:	f083 0320 	eor.w	r3, r3, #32
 800c1ee:	81bb      	strh	r3, [r7, #12]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	441a      	add	r2, r3
 800c1fa:	89bb      	ldrh	r3, [r7, #12]
 800c1fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	8013      	strh	r3, [r2, #0]
 800c210:	e2a6      	b.n	800c760 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	4413      	add	r3, r2
 800c21c:	881b      	ldrh	r3, [r3, #0]
 800c21e:	b29b      	uxth	r3, r3
 800c220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c228:	81fb      	strh	r3, [r7, #14]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	441a      	add	r2, r3
 800c234:	89fb      	ldrh	r3, [r7, #14]
 800c236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c23a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c23e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c246:	b29b      	uxth	r3, r3
 800c248:	8013      	strh	r3, [r2, #0]
 800c24a:	e289      	b.n	800c760 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	633b      	str	r3, [r7, #48]	; 0x30
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c256:	b29b      	uxth	r3, r3
 800c258:	461a      	mov	r2, r3
 800c25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25c:	4413      	add	r3, r2
 800c25e:	633b      	str	r3, [r7, #48]	; 0x30
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	00da      	lsls	r2, r3, #3
 800c266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c268:	4413      	add	r3, r2
 800c26a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c26e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	88db      	ldrh	r3, [r3, #6]
 800c274:	085b      	lsrs	r3, r3, #1
 800c276:	b29b      	uxth	r3, r3
 800c278:	005b      	lsls	r3, r3, #1
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	62bb      	str	r3, [r7, #40]	; 0x28
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	461a      	mov	r2, r3
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	4413      	add	r3, r2
 800c292:	62bb      	str	r3, [r7, #40]	; 0x28
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	00da      	lsls	r2, r3, #3
 800c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29c:	4413      	add	r3, r2
 800c29e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c2a2:	627b      	str	r3, [r7, #36]	; 0x24
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	2b3e      	cmp	r3, #62	; 0x3e
 800c2aa:	d918      	bls.n	800c2de <USB_ActivateEndpoint+0x296>
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	691b      	ldr	r3, [r3, #16]
 800c2b0:	095b      	lsrs	r3, r3, #5
 800c2b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	f003 031f 	and.w	r3, r3, #31
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d102      	bne.n	800c2c6 <USB_ActivateEndpoint+0x27e>
 800c2c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	029b      	lsls	r3, r3, #10
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2da:	801a      	strh	r2, [r3, #0]
 800c2dc:	e029      	b.n	800c332 <USB_ActivateEndpoint+0x2ea>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d112      	bne.n	800c30c <USB_ActivateEndpoint+0x2c4>
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e8:	881b      	ldrh	r3, [r3, #0]
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f4:	801a      	strh	r2, [r3, #0]
 800c2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f8:	881b      	ldrh	r3, [r3, #0]
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c304:	b29a      	uxth	r2, r3
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	801a      	strh	r2, [r3, #0]
 800c30a:	e012      	b.n	800c332 <USB_ActivateEndpoint+0x2ea>
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	085b      	lsrs	r3, r3, #1
 800c312:	66bb      	str	r3, [r7, #104]	; 0x68
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	f003 0301 	and.w	r3, r3, #1
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <USB_ActivateEndpoint+0x2de>
 800c320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c322:	3301      	adds	r3, #1
 800c324:	66bb      	str	r3, [r7, #104]	; 0x68
 800c326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c328:	b29b      	uxth	r3, r3
 800c32a:	029b      	lsls	r3, r3, #10
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c330:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	4413      	add	r3, r2
 800c33c:	881b      	ldrh	r3, [r3, #0]
 800c33e:	847b      	strh	r3, [r7, #34]	; 0x22
 800c340:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d01b      	beq.n	800c382 <USB_ActivateEndpoint+0x33a>
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4413      	add	r3, r2
 800c354:	881b      	ldrh	r3, [r3, #0]
 800c356:	b29b      	uxth	r3, r3
 800c358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c35c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c360:	843b      	strh	r3, [r7, #32]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	441a      	add	r2, r3
 800c36c:	8c3b      	ldrh	r3, [r7, #32]
 800c36e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c376:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c37a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c37e:	b29b      	uxth	r3, r3
 800c380:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	4413      	add	r3, r2
 800c38c:	881b      	ldrh	r3, [r3, #0]
 800c38e:	b29b      	uxth	r3, r3
 800c390:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c398:	83fb      	strh	r3, [r7, #30]
 800c39a:	8bfb      	ldrh	r3, [r7, #30]
 800c39c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c3a0:	83fb      	strh	r3, [r7, #30]
 800c3a2:	8bfb      	ldrh	r3, [r7, #30]
 800c3a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c3a8:	83fb      	strh	r3, [r7, #30]
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	441a      	add	r2, r3
 800c3b4:	8bfb      	ldrh	r3, [r7, #30]
 800c3b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	8013      	strh	r3, [r2, #0]
 800c3ca:	e1c9      	b.n	800c760 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	78db      	ldrb	r3, [r3, #3]
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	d11e      	bne.n	800c412 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	4413      	add	r3, r2
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3ea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	441a      	add	r2, r3
 800c3f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c3fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c404:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	8013      	strh	r3, [r2, #0]
 800c410:	e01d      	b.n	800c44e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4413      	add	r3, r2
 800c41c:	881b      	ldrh	r3, [r3, #0]
 800c41e:	b29b      	uxth	r3, r3
 800c420:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c428:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	441a      	add	r2, r3
 800c436:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800c43a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c43e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c458:	b29b      	uxth	r3, r3
 800c45a:	461a      	mov	r2, r3
 800c45c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c45e:	4413      	add	r3, r2
 800c460:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	00da      	lsls	r2, r3, #3
 800c468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c46a:	4413      	add	r3, r2
 800c46c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c470:	65bb      	str	r3, [r7, #88]	; 0x58
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	891b      	ldrh	r3, [r3, #8]
 800c476:	085b      	lsrs	r3, r3, #1
 800c478:	b29b      	uxth	r3, r3
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c480:	801a      	strh	r2, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	657b      	str	r3, [r7, #84]	; 0x54
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	461a      	mov	r2, r3
 800c490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c492:	4413      	add	r3, r2
 800c494:	657b      	str	r3, [r7, #84]	; 0x54
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	00da      	lsls	r2, r3, #3
 800c49c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c49e:	4413      	add	r3, r2
 800c4a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c4a4:	653b      	str	r3, [r7, #80]	; 0x50
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	895b      	ldrh	r3, [r3, #10]
 800c4aa:	085b      	lsrs	r3, r3, #1
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	005b      	lsls	r3, r3, #1
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4b4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	785b      	ldrb	r3, [r3, #1]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f040 8093 	bne.w	800c5e6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	4413      	add	r3, r2
 800c4ca:	881b      	ldrh	r3, [r3, #0]
 800c4cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c4d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c4d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d01b      	beq.n	800c514 <USB_ActivateEndpoint+0x4cc>
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4413      	add	r3, r2
 800c4e6:	881b      	ldrh	r3, [r3, #0]
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	441a      	add	r2, r3
 800c4fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c510:	b29b      	uxth	r3, r3
 800c512:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	4413      	add	r3, r2
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c522:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d01b      	beq.n	800c564 <USB_ActivateEndpoint+0x51c>
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4413      	add	r3, r2
 800c536:	881b      	ldrh	r3, [r3, #0]
 800c538:	b29b      	uxth	r3, r3
 800c53a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c542:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	441a      	add	r2, r3
 800c54e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c55c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c560:	b29b      	uxth	r3, r3
 800c562:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	4413      	add	r3, r2
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	b29b      	uxth	r3, r3
 800c572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c57a:	873b      	strh	r3, [r7, #56]	; 0x38
 800c57c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c57e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c582:	873b      	strh	r3, [r7, #56]	; 0x38
 800c584:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c586:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c58a:	873b      	strh	r3, [r7, #56]	; 0x38
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	441a      	add	r2, r3
 800c596:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c59c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	881b      	ldrh	r3, [r3, #0]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	441a      	add	r2, r3
 800c5ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c5d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	8013      	strh	r3, [r2, #0]
 800c5e4:	e0bc      	b.n	800c760 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	4413      	add	r3, r2
 800c5f0:	881b      	ldrh	r3, [r3, #0]
 800c5f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c5f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c5fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d01d      	beq.n	800c63e <USB_ActivateEndpoint+0x5f6>
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	881b      	ldrh	r3, [r3, #0]
 800c60e:	b29b      	uxth	r3, r3
 800c610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c618:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	441a      	add	r2, r3
 800c626:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c62a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c62e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4413      	add	r3, r2
 800c648:	881b      	ldrh	r3, [r3, #0]
 800c64a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c64e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c656:	2b00      	cmp	r3, #0
 800c658:	d01d      	beq.n	800c696 <USB_ActivateEndpoint+0x64e>
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	881b      	ldrh	r3, [r3, #0]
 800c666:	b29b      	uxth	r3, r3
 800c668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c66c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c670:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	441a      	add	r2, r3
 800c67e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c68a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c68e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c692:	b29b      	uxth	r3, r3
 800c694:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	78db      	ldrb	r3, [r3, #3]
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d024      	beq.n	800c6e8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4413      	add	r3, r2
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c6b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c6bc:	f083 0320 	eor.w	r3, r3, #32
 800c6c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	441a      	add	r2, r3
 800c6ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c6d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	8013      	strh	r3, [r2, #0]
 800c6e6:	e01d      	b.n	800c724 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	4413      	add	r3, r2
 800c6f2:	881b      	ldrh	r3, [r3, #0]
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	441a      	add	r2, r3
 800c70c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c71c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c720:	b29b      	uxth	r3, r3
 800c722:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	4413      	add	r3, r2
 800c72e:	881b      	ldrh	r3, [r3, #0]
 800c730:	b29b      	uxth	r3, r3
 800c732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c73a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	441a      	add	r2, r3
 800c748:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c74c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c760:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800c764:	4618      	mov	r0, r3
 800c766:	3774      	adds	r7, #116	; 0x74
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c770:	b480      	push	{r7}
 800c772:	b08d      	sub	sp, #52	; 0x34
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	7b1b      	ldrb	r3, [r3, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f040 808e 	bne.w	800c8a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	785b      	ldrb	r3, [r3, #1]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d044      	beq.n	800c816 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4413      	add	r3, r2
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	81bb      	strh	r3, [r7, #12]
 800c79a:	89bb      	ldrh	r3, [r7, #12]
 800c79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d01b      	beq.n	800c7dc <USB_DeactivateEndpoint+0x6c>
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7ba:	817b      	strh	r3, [r7, #10]
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	441a      	add	r2, r3
 800c7c6:	897b      	ldrh	r3, [r7, #10]
 800c7c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	4413      	add	r3, r2
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7f2:	813b      	strh	r3, [r7, #8]
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	441a      	add	r2, r3
 800c7fe:	893b      	ldrh	r3, [r7, #8]
 800c800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c810:	b29b      	uxth	r3, r3
 800c812:	8013      	strh	r3, [r2, #0]
 800c814:	e192      	b.n	800cb3c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	4413      	add	r3, r2
 800c820:	881b      	ldrh	r3, [r3, #0]
 800c822:	827b      	strh	r3, [r7, #18]
 800c824:	8a7b      	ldrh	r3, [r7, #18]
 800c826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d01b      	beq.n	800c866 <USB_DeactivateEndpoint+0xf6>
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	4413      	add	r3, r2
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c844:	823b      	strh	r3, [r7, #16]
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	441a      	add	r2, r3
 800c850:	8a3b      	ldrh	r3, [r7, #16]
 800c852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c85a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c85e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c862:	b29b      	uxth	r3, r3
 800c864:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	4413      	add	r3, r2
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	b29b      	uxth	r3, r3
 800c874:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c87c:	81fb      	strh	r3, [r7, #14]
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	441a      	add	r2, r3
 800c888:	89fb      	ldrh	r3, [r7, #14]
 800c88a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c88e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	8013      	strh	r3, [r2, #0]
 800c89e:	e14d      	b.n	800cb3c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	785b      	ldrb	r3, [r3, #1]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f040 80a5 	bne.w	800c9f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	4413      	add	r3, r2
 800c8b4:	881b      	ldrh	r3, [r3, #0]
 800c8b6:	843b      	strh	r3, [r7, #32]
 800c8b8:	8c3b      	ldrh	r3, [r7, #32]
 800c8ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d01b      	beq.n	800c8fa <USB_DeactivateEndpoint+0x18a>
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4413      	add	r3, r2
 800c8cc:	881b      	ldrh	r3, [r3, #0]
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8d8:	83fb      	strh	r3, [r7, #30]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	441a      	add	r2, r3
 800c8e4:	8bfb      	ldrh	r3, [r7, #30]
 800c8e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	4413      	add	r3, r2
 800c904:	881b      	ldrh	r3, [r3, #0]
 800c906:	83bb      	strh	r3, [r7, #28]
 800c908:	8bbb      	ldrh	r3, [r7, #28]
 800c90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d01b      	beq.n	800c94a <USB_DeactivateEndpoint+0x1da>
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c928:	837b      	strh	r3, [r7, #26]
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	441a      	add	r2, r3
 800c934:	8b7b      	ldrh	r3, [r7, #26]
 800c936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c93a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c93e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c942:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c946:	b29b      	uxth	r3, r3
 800c948:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	4413      	add	r3, r2
 800c954:	881b      	ldrh	r3, [r3, #0]
 800c956:	b29b      	uxth	r3, r3
 800c958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c95c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c960:	833b      	strh	r3, [r7, #24]
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	441a      	add	r2, r3
 800c96c:	8b3b      	ldrh	r3, [r7, #24]
 800c96e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c97a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c97e:	b29b      	uxth	r3, r3
 800c980:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4413      	add	r3, r2
 800c98c:	881b      	ldrh	r3, [r3, #0]
 800c98e:	b29b      	uxth	r3, r3
 800c990:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c998:	82fb      	strh	r3, [r7, #22]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	441a      	add	r2, r3
 800c9a4:	8afb      	ldrh	r3, [r7, #22]
 800c9a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	881b      	ldrh	r3, [r3, #0]
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9d0:	82bb      	strh	r3, [r7, #20]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	441a      	add	r2, r3
 800c9dc:	8abb      	ldrh	r3, [r7, #20]
 800c9de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	8013      	strh	r3, [r2, #0]
 800c9f2:	e0a3      	b.n	800cb3c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	4413      	add	r3, r2
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ca02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d01b      	beq.n	800ca44 <USB_DeactivateEndpoint+0x2d4>
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4413      	add	r3, r2
 800ca16:	881b      	ldrh	r3, [r3, #0]
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	441a      	add	r2, r3
 800ca2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ca3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	4413      	add	r3, r2
 800ca4e:	881b      	ldrh	r3, [r3, #0]
 800ca50:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ca52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ca54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d01b      	beq.n	800ca94 <USB_DeactivateEndpoint+0x324>
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	4413      	add	r3, r2
 800ca66:	881b      	ldrh	r3, [r3, #0]
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca72:	853b      	strh	r3, [r7, #40]	; 0x28
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	441a      	add	r2, r3
 800ca7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	4413      	add	r3, r2
 800ca9e:	881b      	ldrh	r3, [r3, #0]
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800caa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caaa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	441a      	add	r2, r3
 800cab6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cabc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cac8:	b29b      	uxth	r3, r3
 800caca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	4413      	add	r3, r2
 800cad6:	881b      	ldrh	r3, [r3, #0]
 800cad8:	b29b      	uxth	r3, r3
 800cada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cae2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	441a      	add	r2, r3
 800caee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800caf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800caf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	4413      	add	r3, r2
 800cb0e:	881b      	ldrh	r3, [r3, #0]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb1a:	847b      	strh	r3, [r7, #34]	; 0x22
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	009b      	lsls	r3, r3, #2
 800cb24:	441a      	add	r2, r3
 800cb26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3734      	adds	r7, #52	; 0x34
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr

0800cb4a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b0c2      	sub	sp, #264	; 0x108
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb58:	6018      	str	r0, [r3, #0]
 800cb5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb62:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	785b      	ldrb	r3, [r3, #1]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	f040 867b 	bne.w	800d86c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800cb76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	699a      	ldr	r2, [r3, #24]
 800cb82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d908      	bls.n	800cba4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800cb92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cba2:	e007      	b.n	800cbb4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800cba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	699b      	ldr	r3, [r3, #24]
 800cbb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cbb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	7b1b      	ldrb	r3, [r3, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d13a      	bne.n	800cc3a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cbc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	6959      	ldr	r1, [r3, #20]
 800cbd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	88da      	ldrh	r2, [r3, #6]
 800cbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cbe6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cbea:	6800      	ldr	r0, [r0, #0]
 800cbec:	f001 fc32 	bl	800e454 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cbf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	613b      	str	r3, [r7, #16]
 800cbfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	4413      	add	r3, r2
 800cc12:	613b      	str	r3, [r7, #16]
 800cc14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	00da      	lsls	r2, r3, #3
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	4413      	add	r3, r2
 800cc26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	801a      	strh	r2, [r3, #0]
 800cc36:	f000 bde3 	b.w	800d800 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cc3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	78db      	ldrb	r3, [r3, #3]
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	f040 843a 	bne.w	800d4c0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cc4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	6a1a      	ldr	r2, [r3, #32]
 800cc58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	691b      	ldr	r3, [r3, #16]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	f240 83b7 	bls.w	800d3d8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cc6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4413      	add	r3, r2
 800cc84:	881b      	ldrh	r3, [r3, #0]
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800cc94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	441a      	add	r2, r3
 800ccae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ccb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ccbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ccc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	6a1a      	ldr	r2, [r3, #32]
 800ccd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccd6:	1ad2      	subs	r2, r2, r3
 800ccd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cce8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	4413      	add	r3, r2
 800ccfe:	881b      	ldrh	r3, [r3, #0]
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	f000 81b3 	beq.w	800d072 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cd0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	633b      	str	r3, [r7, #48]	; 0x30
 800cd18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	785b      	ldrb	r3, [r3, #1]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d16d      	bne.n	800ce04 <USB_EPStartXfer+0x2ba>
 800cd28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	461a      	mov	r2, r3
 800cd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd48:	4413      	add	r3, r2
 800cd4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	00da      	lsls	r2, r3, #3
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	4413      	add	r3, r2
 800cd5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cd62:	627b      	str	r3, [r7, #36]	; 0x24
 800cd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd68:	2b3e      	cmp	r3, #62	; 0x3e
 800cd6a:	d91c      	bls.n	800cda6 <USB_EPStartXfer+0x25c>
 800cd6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd70:	095b      	lsrs	r3, r3, #5
 800cd72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd7a:	f003 031f 	and.w	r3, r3, #31
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d104      	bne.n	800cd8c <USB_EPStartXfer+0x242>
 800cd82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cd86:	3b01      	subs	r3, #1
 800cd88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cd8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	029b      	lsls	r3, r3, #10
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	801a      	strh	r2, [r3, #0]
 800cda4:	e053      	b.n	800ce4e <USB_EPStartXfer+0x304>
 800cda6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d112      	bne.n	800cdd4 <USB_EPStartXfer+0x28a>
 800cdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb0:	881b      	ldrh	r3, [r3, #0]
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbc:	801a      	strh	r2, [r3, #0]
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	881b      	ldrh	r3, [r3, #0]
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	801a      	strh	r2, [r3, #0]
 800cdd2:	e03c      	b.n	800ce4e <USB_EPStartXfer+0x304>
 800cdd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdd8:	085b      	lsrs	r3, r3, #1
 800cdda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cdde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cde2:	f003 0301 	and.w	r3, r3, #1
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d004      	beq.n	800cdf4 <USB_EPStartXfer+0x2aa>
 800cdea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cdee:	3301      	adds	r3, #1
 800cdf0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cdf4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	029b      	lsls	r3, r3, #10
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce00:	801a      	strh	r2, [r3, #0]
 800ce02:	e024      	b.n	800ce4e <USB_EPStartXfer+0x304>
 800ce04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	785b      	ldrb	r3, [r3, #1]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d11c      	bne.n	800ce4e <USB_EPStartXfer+0x304>
 800ce14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	461a      	mov	r2, r3
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	4413      	add	r3, r2
 800ce2a:	633b      	str	r3, [r7, #48]	; 0x30
 800ce2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	00da      	lsls	r2, r3, #3
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3c:	4413      	add	r3, r2
 800ce3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ce42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce48:	b29a      	uxth	r2, r3
 800ce4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ce4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	895b      	ldrh	r3, [r3, #10]
 800ce5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	6959      	ldr	r1, [r3, #20]
 800ce6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ce74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ce78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ce7c:	6800      	ldr	r0, [r0, #0]
 800ce7e:	f001 fae9 	bl	800e454 <USB_WritePMA>
            ep->xfer_buff += len;
 800ce82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	695a      	ldr	r2, [r3, #20]
 800ce8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce92:	441a      	add	r2, r3
 800ce94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	6a1a      	ldr	r2, [r3, #32]
 800ceac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d90f      	bls.n	800cedc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800cebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	6a1a      	ldr	r2, [r3, #32]
 800cec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cecc:	1ad2      	subs	r2, r2, r3
 800cece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ced2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	621a      	str	r2, [r3, #32]
 800ceda:	e00e      	b.n	800cefa <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800cedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	6a1b      	ldr	r3, [r3, #32]
 800cee8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ceec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	2200      	movs	r2, #0
 800cef8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cefe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	785b      	ldrb	r3, [r3, #1]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d16d      	bne.n	800cfe6 <USB_EPStartXfer+0x49c>
 800cf0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	61bb      	str	r3, [r7, #24]
 800cf16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	461a      	mov	r2, r3
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	61bb      	str	r3, [r7, #24]
 800cf2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	00da      	lsls	r2, r3, #3
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	4413      	add	r3, r2
 800cf40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cf44:	617b      	str	r3, [r7, #20]
 800cf46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf4a:	2b3e      	cmp	r3, #62	; 0x3e
 800cf4c:	d91c      	bls.n	800cf88 <USB_EPStartXfer+0x43e>
 800cf4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf52:	095b      	lsrs	r3, r3, #5
 800cf54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cf58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf5c:	f003 031f 	and.w	r3, r3, #31
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d104      	bne.n	800cf6e <USB_EPStartXfer+0x424>
 800cf64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cf6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	029b      	lsls	r3, r3, #10
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	801a      	strh	r2, [r3, #0]
 800cf86:	e059      	b.n	800d03c <USB_EPStartXfer+0x4f2>
 800cf88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d112      	bne.n	800cfb6 <USB_EPStartXfer+0x46c>
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	881b      	ldrh	r3, [r3, #0]
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cf9a:	b29a      	uxth	r2, r3
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	801a      	strh	r2, [r3, #0]
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	801a      	strh	r2, [r3, #0]
 800cfb4:	e042      	b.n	800d03c <USB_EPStartXfer+0x4f2>
 800cfb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfba:	085b      	lsrs	r3, r3, #1
 800cfbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfc4:	f003 0301 	and.w	r3, r3, #1
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d004      	beq.n	800cfd6 <USB_EPStartXfer+0x48c>
 800cfcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cfd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	029b      	lsls	r3, r3, #10
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	801a      	strh	r2, [r3, #0]
 800cfe4:	e02a      	b.n	800d03c <USB_EPStartXfer+0x4f2>
 800cfe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	785b      	ldrb	r3, [r3, #1]
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d122      	bne.n	800d03c <USB_EPStartXfer+0x4f2>
 800cff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	623b      	str	r3, [r7, #32]
 800d002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d010:	b29b      	uxth	r3, r3
 800d012:	461a      	mov	r2, r3
 800d014:	6a3b      	ldr	r3, [r7, #32]
 800d016:	4413      	add	r3, r2
 800d018:	623b      	str	r3, [r7, #32]
 800d01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d01e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	00da      	lsls	r2, r3, #3
 800d028:	6a3b      	ldr	r3, [r7, #32]
 800d02a:	4413      	add	r3, r2
 800d02c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d030:	61fb      	str	r3, [r7, #28]
 800d032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d036:	b29a      	uxth	r2, r3
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	891b      	ldrh	r3, [r3, #8]
 800d048:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d04c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6959      	ldr	r1, [r3, #20]
 800d058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d062:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d066:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d06a:	6800      	ldr	r0, [r0, #0]
 800d06c:	f001 f9f2 	bl	800e454 <USB_WritePMA>
 800d070:	e3c6      	b.n	800d800 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	785b      	ldrb	r3, [r3, #1]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d16d      	bne.n	800d15e <USB_EPStartXfer+0x614>
 800d082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	461a      	mov	r2, r3
 800d0a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0a2:	4413      	add	r3, r2
 800d0a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	00da      	lsls	r2, r3, #3
 800d0b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0b6:	4413      	add	r3, r2
 800d0b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d0bc:	647b      	str	r3, [r7, #68]	; 0x44
 800d0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0c2:	2b3e      	cmp	r3, #62	; 0x3e
 800d0c4:	d91c      	bls.n	800d100 <USB_EPStartXfer+0x5b6>
 800d0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0ca:	095b      	lsrs	r3, r3, #5
 800d0cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0d4:	f003 031f 	and.w	r3, r3, #31
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d104      	bne.n	800d0e6 <USB_EPStartXfer+0x59c>
 800d0dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d0e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	029b      	lsls	r3, r3, #10
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0f8:	b29a      	uxth	r2, r3
 800d0fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0fc:	801a      	strh	r2, [r3, #0]
 800d0fe:	e059      	b.n	800d1b4 <USB_EPStartXfer+0x66a>
 800d100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d104:	2b00      	cmp	r3, #0
 800d106:	d112      	bne.n	800d12e <USB_EPStartXfer+0x5e4>
 800d108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d112:	b29a      	uxth	r2, r3
 800d114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d116:	801a      	strh	r2, [r3, #0]
 800d118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d11a:	881b      	ldrh	r3, [r3, #0]
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d126:	b29a      	uxth	r2, r3
 800d128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d12a:	801a      	strh	r2, [r3, #0]
 800d12c:	e042      	b.n	800d1b4 <USB_EPStartXfer+0x66a>
 800d12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d132:	085b      	lsrs	r3, r3, #1
 800d134:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d13c:	f003 0301 	and.w	r3, r3, #1
 800d140:	2b00      	cmp	r3, #0
 800d142:	d004      	beq.n	800d14e <USB_EPStartXfer+0x604>
 800d144:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d148:	3301      	adds	r3, #1
 800d14a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d14e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d152:	b29b      	uxth	r3, r3
 800d154:	029b      	lsls	r3, r3, #10
 800d156:	b29a      	uxth	r2, r3
 800d158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d15a:	801a      	strh	r2, [r3, #0]
 800d15c:	e02a      	b.n	800d1b4 <USB_EPStartXfer+0x66a>
 800d15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	785b      	ldrb	r3, [r3, #1]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d122      	bne.n	800d1b4 <USB_EPStartXfer+0x66a>
 800d16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	653b      	str	r3, [r7, #80]	; 0x50
 800d17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d17e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d188:	b29b      	uxth	r3, r3
 800d18a:	461a      	mov	r2, r3
 800d18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d18e:	4413      	add	r3, r2
 800d190:	653b      	str	r3, [r7, #80]	; 0x50
 800d192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	00da      	lsls	r2, r3, #3
 800d1a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1a2:	4413      	add	r3, r2
 800d1a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d1a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d1b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	891b      	ldrh	r3, [r3, #8]
 800d1c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	6959      	ldr	r1, [r3, #20]
 800d1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d1da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d1de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d1e2:	6800      	ldr	r0, [r0, #0]
 800d1e4:	f001 f936 	bl	800e454 <USB_WritePMA>
            ep->xfer_buff += len;
 800d1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	695a      	ldr	r2, [r3, #20]
 800d1f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1f8:	441a      	add	r2, r3
 800d1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d20a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	6a1a      	ldr	r2, [r3, #32]
 800d212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d90f      	bls.n	800d242 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800d222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6a1a      	ldr	r2, [r3, #32]
 800d22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d232:	1ad2      	subs	r2, r2, r3
 800d234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	621a      	str	r2, [r3, #32]
 800d240:	e00e      	b.n	800d260 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800d242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2200      	movs	r2, #0
 800d25e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	643b      	str	r3, [r7, #64]	; 0x40
 800d26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	785b      	ldrb	r3, [r3, #1]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d16d      	bne.n	800d358 <USB_EPStartXfer+0x80e>
 800d27c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d280:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	63bb      	str	r3, [r7, #56]	; 0x38
 800d288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d28c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d296:	b29b      	uxth	r3, r3
 800d298:	461a      	mov	r2, r3
 800d29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29c:	4413      	add	r3, r2
 800d29e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	00da      	lsls	r2, r3, #3
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b0:	4413      	add	r3, r2
 800d2b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d2b6:	637b      	str	r3, [r7, #52]	; 0x34
 800d2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2bc:	2b3e      	cmp	r3, #62	; 0x3e
 800d2be:	d91c      	bls.n	800d2fa <USB_EPStartXfer+0x7b0>
 800d2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2c4:	095b      	lsrs	r3, r3, #5
 800d2c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2ce:	f003 031f 	and.w	r3, r3, #31
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d104      	bne.n	800d2e0 <USB_EPStartXfer+0x796>
 800d2d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d2e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	029b      	lsls	r3, r3, #10
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f6:	801a      	strh	r2, [r3, #0]
 800d2f8:	e053      	b.n	800d3a2 <USB_EPStartXfer+0x858>
 800d2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d112      	bne.n	800d328 <USB_EPStartXfer+0x7de>
 800d302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d304:	881b      	ldrh	r3, [r3, #0]
 800d306:	b29b      	uxth	r3, r3
 800d308:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d30c:	b29a      	uxth	r2, r3
 800d30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d310:	801a      	strh	r2, [r3, #0]
 800d312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d314:	881b      	ldrh	r3, [r3, #0]
 800d316:	b29b      	uxth	r3, r3
 800d318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d31c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d320:	b29a      	uxth	r2, r3
 800d322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d324:	801a      	strh	r2, [r3, #0]
 800d326:	e03c      	b.n	800d3a2 <USB_EPStartXfer+0x858>
 800d328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d32c:	085b      	lsrs	r3, r3, #1
 800d32e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d336:	f003 0301 	and.w	r3, r3, #1
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d004      	beq.n	800d348 <USB_EPStartXfer+0x7fe>
 800d33e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d342:	3301      	adds	r3, #1
 800d344:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	029b      	lsls	r3, r3, #10
 800d350:	b29a      	uxth	r2, r3
 800d352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d354:	801a      	strh	r2, [r3, #0]
 800d356:	e024      	b.n	800d3a2 <USB_EPStartXfer+0x858>
 800d358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d35c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	785b      	ldrb	r3, [r3, #1]
 800d364:	2b01      	cmp	r3, #1
 800d366:	d11c      	bne.n	800d3a2 <USB_EPStartXfer+0x858>
 800d368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d36c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d376:	b29b      	uxth	r3, r3
 800d378:	461a      	mov	r2, r3
 800d37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d37c:	4413      	add	r3, r2
 800d37e:	643b      	str	r3, [r7, #64]	; 0x40
 800d380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	00da      	lsls	r2, r3, #3
 800d38e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d390:	4413      	add	r3, r2
 800d392:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d396:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	895b      	ldrh	r3, [r3, #10]
 800d3ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	6959      	ldr	r1, [r3, #20]
 800d3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d3c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d3cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d3d0:	6800      	ldr	r0, [r0, #0]
 800d3d2:	f001 f83f 	bl	800e454 <USB_WritePMA>
 800d3d6:	e213      	b.n	800d800 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d3d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	6a1b      	ldr	r3, [r3, #32]
 800d3e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d3e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4413      	add	r3, r2
 800d402:	881b      	ldrh	r3, [r3, #0]
 800d404:	b29b      	uxth	r3, r3
 800d406:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d40e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	441a      	add	r2, r3
 800d42c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d440:	b29b      	uxth	r3, r3
 800d442:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d45e:	b29b      	uxth	r3, r3
 800d460:	461a      	mov	r2, r3
 800d462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d464:	4413      	add	r3, r2
 800d466:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d46c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	00da      	lsls	r2, r3, #3
 800d476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d478:	4413      	add	r3, r2
 800d47a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d47e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d484:	b29a      	uxth	r2, r3
 800d486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d488:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d48e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	891b      	ldrh	r3, [r3, #8]
 800d496:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d49a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d49e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	6959      	ldr	r1, [r3, #20]
 800d4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d4b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d4b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d4b8:	6800      	ldr	r0, [r0, #0]
 800d4ba:	f000 ffcb 	bl	800e454 <USB_WritePMA>
 800d4be:	e19f      	b.n	800d800 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d4c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6a1a      	ldr	r2, [r3, #32]
 800d4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4d0:	1ad2      	subs	r2, r2, r3
 800d4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d4de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	4413      	add	r3, r2
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d500:	2b00      	cmp	r3, #0
 800d502:	f000 80bc 	beq.w	800d67e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d50a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	673b      	str	r3, [r7, #112]	; 0x70
 800d512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	785b      	ldrb	r3, [r3, #1]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d16d      	bne.n	800d5fe <USB_EPStartXfer+0xab4>
 800d522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d52e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	461a      	mov	r2, r3
 800d540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d542:	4413      	add	r3, r2
 800d544:	66bb      	str	r3, [r7, #104]	; 0x68
 800d546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d54a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	00da      	lsls	r2, r3, #3
 800d554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d556:	4413      	add	r3, r2
 800d558:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d55c:	667b      	str	r3, [r7, #100]	; 0x64
 800d55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d562:	2b3e      	cmp	r3, #62	; 0x3e
 800d564:	d91c      	bls.n	800d5a0 <USB_EPStartXfer+0xa56>
 800d566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d56a:	095b      	lsrs	r3, r3, #5
 800d56c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d574:	f003 031f 	and.w	r3, r3, #31
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d104      	bne.n	800d586 <USB_EPStartXfer+0xa3c>
 800d57c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d580:	3b01      	subs	r3, #1
 800d582:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d586:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	029b      	lsls	r3, r3, #10
 800d58e:	b29b      	uxth	r3, r3
 800d590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d598:	b29a      	uxth	r2, r3
 800d59a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d59c:	801a      	strh	r2, [r3, #0]
 800d59e:	e053      	b.n	800d648 <USB_EPStartXfer+0xafe>
 800d5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d112      	bne.n	800d5ce <USB_EPStartXfer+0xa84>
 800d5a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5b6:	801a      	strh	r2, [r3, #0]
 800d5b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5ba:	881b      	ldrh	r3, [r3, #0]
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5ca:	801a      	strh	r2, [r3, #0]
 800d5cc:	e03c      	b.n	800d648 <USB_EPStartXfer+0xafe>
 800d5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5d2:	085b      	lsrs	r3, r3, #1
 800d5d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5dc:	f003 0301 	and.w	r3, r3, #1
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d004      	beq.n	800d5ee <USB_EPStartXfer+0xaa4>
 800d5e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d5ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	029b      	lsls	r3, r3, #10
 800d5f6:	b29a      	uxth	r2, r3
 800d5f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5fa:	801a      	strh	r2, [r3, #0]
 800d5fc:	e024      	b.n	800d648 <USB_EPStartXfer+0xafe>
 800d5fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	785b      	ldrb	r3, [r3, #1]
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d11c      	bne.n	800d648 <USB_EPStartXfer+0xafe>
 800d60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	461a      	mov	r2, r3
 800d620:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d622:	4413      	add	r3, r2
 800d624:	673b      	str	r3, [r7, #112]	; 0x70
 800d626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d62a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	00da      	lsls	r2, r3, #3
 800d634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d636:	4413      	add	r3, r2
 800d638:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d63c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d642:	b29a      	uxth	r2, r3
 800d644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d646:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d64c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	895b      	ldrh	r3, [r3, #10]
 800d654:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d65c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	6959      	ldr	r1, [r3, #20]
 800d664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d668:	b29b      	uxth	r3, r3
 800d66a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d66e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d672:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d676:	6800      	ldr	r0, [r0, #0]
 800d678:	f000 feec 	bl	800e454 <USB_WritePMA>
 800d67c:	e0c0      	b.n	800d800 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d67e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	785b      	ldrb	r3, [r3, #1]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d16d      	bne.n	800d76a <USB_EPStartXfer+0xc20>
 800d68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d692:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d69a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d69e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6ae:	4413      	add	r3, r2
 800d6b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d6b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	00da      	lsls	r2, r3, #3
 800d6c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6c2:	4413      	add	r3, r2
 800d6c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d6c8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6ce:	2b3e      	cmp	r3, #62	; 0x3e
 800d6d0:	d91c      	bls.n	800d70c <USB_EPStartXfer+0xbc2>
 800d6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6d6:	095b      	lsrs	r3, r3, #5
 800d6d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6e0:	f003 031f 	and.w	r3, r3, #31
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d104      	bne.n	800d6f2 <USB_EPStartXfer+0xba8>
 800d6e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d6f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	029b      	lsls	r3, r3, #10
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d704:	b29a      	uxth	r2, r3
 800d706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d708:	801a      	strh	r2, [r3, #0]
 800d70a:	e05f      	b.n	800d7cc <USB_EPStartXfer+0xc82>
 800d70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d710:	2b00      	cmp	r3, #0
 800d712:	d112      	bne.n	800d73a <USB_EPStartXfer+0xbf0>
 800d714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	b29b      	uxth	r3, r3
 800d71a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d71e:	b29a      	uxth	r2, r3
 800d720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d722:	801a      	strh	r2, [r3, #0]
 800d724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	b29b      	uxth	r3, r3
 800d72a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d72e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d732:	b29a      	uxth	r2, r3
 800d734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d736:	801a      	strh	r2, [r3, #0]
 800d738:	e048      	b.n	800d7cc <USB_EPStartXfer+0xc82>
 800d73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d73e:	085b      	lsrs	r3, r3, #1
 800d740:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d748:	f003 0301 	and.w	r3, r3, #1
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d004      	beq.n	800d75a <USB_EPStartXfer+0xc10>
 800d750:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d754:	3301      	adds	r3, #1
 800d756:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d75a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d75e:	b29b      	uxth	r3, r3
 800d760:	029b      	lsls	r3, r3, #10
 800d762:	b29a      	uxth	r2, r3
 800d764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d766:	801a      	strh	r2, [r3, #0]
 800d768:	e030      	b.n	800d7cc <USB_EPStartXfer+0xc82>
 800d76a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d76e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	785b      	ldrb	r3, [r3, #1]
 800d776:	2b01      	cmp	r3, #1
 800d778:	d128      	bne.n	800d7cc <USB_EPStartXfer+0xc82>
 800d77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d77e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d78c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d796:	b29b      	uxth	r3, r3
 800d798:	461a      	mov	r2, r3
 800d79a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d79e:	4413      	add	r3, r2
 800d7a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	00da      	lsls	r2, r3, #3
 800d7b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d7bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d7ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	891b      	ldrh	r3, [r3, #8]
 800d7d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d7dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	6959      	ldr	r1, [r3, #20]
 800d7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d7f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d7f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d7fa:	6800      	ldr	r0, [r0, #0]
 800d7fc:	f000 fe2a 	bl	800e454 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d804:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d80e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	4413      	add	r3, r2
 800d81a:	881b      	ldrh	r3, [r3, #0]
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d826:	817b      	strh	r3, [r7, #10]
 800d828:	897b      	ldrh	r3, [r7, #10]
 800d82a:	f083 0310 	eor.w	r3, r3, #16
 800d82e:	817b      	strh	r3, [r7, #10]
 800d830:	897b      	ldrh	r3, [r7, #10]
 800d832:	f083 0320 	eor.w	r3, r3, #32
 800d836:	817b      	strh	r3, [r7, #10]
 800d838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d83c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	441a      	add	r2, r3
 800d852:	897b      	ldrh	r3, [r7, #10]
 800d854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d85c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d864:	b29b      	uxth	r3, r3
 800d866:	8013      	strh	r3, [r2, #0]
 800d868:	f000 bc9f 	b.w	800e1aa <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	7b1b      	ldrb	r3, [r3, #12]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	f040 80ae 	bne.w	800d9da <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d87e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	699a      	ldr	r2, [r3, #24]
 800d88a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d88e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	691b      	ldr	r3, [r3, #16]
 800d896:	429a      	cmp	r2, r3
 800d898:	d917      	bls.n	800d8ca <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800d89a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d89e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	691b      	ldr	r3, [r3, #16]
 800d8a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800d8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	699a      	ldr	r2, [r3, #24]
 800d8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8ba:	1ad2      	subs	r2, r2, r3
 800d8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	619a      	str	r2, [r3, #24]
 800d8c8:	e00e      	b.n	800d8e8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800d8ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800d8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d8f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d904:	b29b      	uxth	r3, r3
 800d906:	461a      	mov	r2, r3
 800d908:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d90c:	4413      	add	r3, r2
 800d90e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	00da      	lsls	r2, r3, #3
 800d920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d924:	4413      	add	r3, r2
 800d926:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d92a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d932:	2b3e      	cmp	r3, #62	; 0x3e
 800d934:	d91d      	bls.n	800d972 <USB_EPStartXfer+0xe28>
 800d936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d93a:	095b      	lsrs	r3, r3, #5
 800d93c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d944:	f003 031f 	and.w	r3, r3, #31
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d104      	bne.n	800d956 <USB_EPStartXfer+0xe0c>
 800d94c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d950:	3b01      	subs	r3, #1
 800d952:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d956:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	029b      	lsls	r3, r3, #10
 800d95e:	b29b      	uxth	r3, r3
 800d960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d968:	b29a      	uxth	r2, r3
 800d96a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d96e:	801a      	strh	r2, [r3, #0]
 800d970:	e3e1      	b.n	800e136 <USB_EPStartXfer+0x15ec>
 800d972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d976:	2b00      	cmp	r3, #0
 800d978:	d116      	bne.n	800d9a8 <USB_EPStartXfer+0xe5e>
 800d97a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d97e:	881b      	ldrh	r3, [r3, #0]
 800d980:	b29b      	uxth	r3, r3
 800d982:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d986:	b29a      	uxth	r2, r3
 800d988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d98c:	801a      	strh	r2, [r3, #0]
 800d98e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d992:	881b      	ldrh	r3, [r3, #0]
 800d994:	b29b      	uxth	r3, r3
 800d996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d99a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d9a4:	801a      	strh	r2, [r3, #0]
 800d9a6:	e3c6      	b.n	800e136 <USB_EPStartXfer+0x15ec>
 800d9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9ac:	085b      	lsrs	r3, r3, #1
 800d9ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d004      	beq.n	800d9c8 <USB_EPStartXfer+0xe7e>
 800d9be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d9c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	029b      	lsls	r3, r3, #10
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d9d6:	801a      	strh	r2, [r3, #0]
 800d9d8:	e3ad      	b.n	800e136 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d9da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	78db      	ldrb	r3, [r3, #3]
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	f040 8200 	bne.w	800ddec <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d9ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	785b      	ldrb	r3, [r3, #1]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f040 8091 	bne.w	800db20 <USB_EPStartXfer+0xfd6>
 800d9fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800da0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	461a      	mov	r2, r3
 800da1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da22:	4413      	add	r3, r2
 800da24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800da28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	00da      	lsls	r2, r3, #3
 800da36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da3a:	4413      	add	r3, r2
 800da3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800da40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800da44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	2b3e      	cmp	r3, #62	; 0x3e
 800da52:	d925      	bls.n	800daa0 <USB_EPStartXfer+0xf56>
 800da54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	691b      	ldr	r3, [r3, #16]
 800da60:	095b      	lsrs	r3, r3, #5
 800da62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800da66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	f003 031f 	and.w	r3, r3, #31
 800da76:	2b00      	cmp	r3, #0
 800da78:	d104      	bne.n	800da84 <USB_EPStartXfer+0xf3a>
 800da7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da7e:	3b01      	subs	r3, #1
 800da80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800da84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da88:	b29b      	uxth	r3, r3
 800da8a:	029b      	lsls	r3, r3, #10
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da96:	b29a      	uxth	r2, r3
 800da98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da9c:	801a      	strh	r2, [r3, #0]
 800da9e:	e074      	b.n	800db8a <USB_EPStartXfer+0x1040>
 800daa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	691b      	ldr	r3, [r3, #16]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d116      	bne.n	800dade <USB_EPStartXfer+0xf94>
 800dab0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dab4:	881b      	ldrh	r3, [r3, #0]
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dabc:	b29a      	uxth	r2, r3
 800dabe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dac2:	801a      	strh	r2, [r3, #0]
 800dac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dac8:	881b      	ldrh	r3, [r3, #0]
 800daca:	b29b      	uxth	r3, r3
 800dacc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dada:	801a      	strh	r2, [r3, #0]
 800dadc:	e055      	b.n	800db8a <USB_EPStartXfer+0x1040>
 800dade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	691b      	ldr	r3, [r3, #16]
 800daea:	085b      	lsrs	r3, r3, #1
 800daec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800daf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	691b      	ldr	r3, [r3, #16]
 800dafc:	f003 0301 	and.w	r3, r3, #1
 800db00:	2b00      	cmp	r3, #0
 800db02:	d004      	beq.n	800db0e <USB_EPStartXfer+0xfc4>
 800db04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db08:	3301      	adds	r3, #1
 800db0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800db0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db12:	b29b      	uxth	r3, r3
 800db14:	029b      	lsls	r3, r3, #10
 800db16:	b29a      	uxth	r2, r3
 800db18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800db1c:	801a      	strh	r2, [r3, #0]
 800db1e:	e034      	b.n	800db8a <USB_EPStartXfer+0x1040>
 800db20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	785b      	ldrb	r3, [r3, #1]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d12c      	bne.n	800db8a <USB_EPStartXfer+0x1040>
 800db30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	461a      	mov	r2, r3
 800db50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800db54:	4413      	add	r3, r2
 800db56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	00da      	lsls	r2, r3, #3
 800db68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800db6c:	4413      	add	r3, r2
 800db6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800db72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	691b      	ldr	r3, [r3, #16]
 800db82:	b29a      	uxth	r2, r3
 800db84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800db88:	801a      	strh	r2, [r3, #0]
 800db8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800db98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	785b      	ldrb	r3, [r3, #1]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f040 8091 	bne.w	800dccc <USB_EPStartXfer+0x1182>
 800dbaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dbb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	461a      	mov	r2, r3
 800dbca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dbce:	4413      	add	r3, r2
 800dbd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dbd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	00da      	lsls	r2, r3, #3
 800dbe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dbe6:	4413      	add	r3, r2
 800dbe8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dbec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dbf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	2b3e      	cmp	r3, #62	; 0x3e
 800dbfe:	d925      	bls.n	800dc4c <USB_EPStartXfer+0x1102>
 800dc00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	691b      	ldr	r3, [r3, #16]
 800dc0c:	095b      	lsrs	r3, r3, #5
 800dc0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dc12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	f003 031f 	and.w	r3, r3, #31
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d104      	bne.n	800dc30 <USB_EPStartXfer+0x10e6>
 800dc26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dc30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	029b      	lsls	r3, r3, #10
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc42:	b29a      	uxth	r2, r3
 800dc44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc48:	801a      	strh	r2, [r3, #0]
 800dc4a:	e06d      	b.n	800dd28 <USB_EPStartXfer+0x11de>
 800dc4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	691b      	ldr	r3, [r3, #16]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d116      	bne.n	800dc8a <USB_EPStartXfer+0x1140>
 800dc5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc60:	881b      	ldrh	r3, [r3, #0]
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dc68:	b29a      	uxth	r2, r3
 800dc6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc6e:	801a      	strh	r2, [r3, #0]
 800dc70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc74:	881b      	ldrh	r3, [r3, #0]
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc86:	801a      	strh	r2, [r3, #0]
 800dc88:	e04e      	b.n	800dd28 <USB_EPStartXfer+0x11de>
 800dc8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	691b      	ldr	r3, [r3, #16]
 800dc96:	085b      	lsrs	r3, r3, #1
 800dc98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dc9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	f003 0301 	and.w	r3, r3, #1
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d004      	beq.n	800dcba <USB_EPStartXfer+0x1170>
 800dcb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dcba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	029b      	lsls	r3, r3, #10
 800dcc2:	b29a      	uxth	r2, r3
 800dcc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dcc8:	801a      	strh	r2, [r3, #0]
 800dcca:	e02d      	b.n	800dd28 <USB_EPStartXfer+0x11de>
 800dccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	785b      	ldrb	r3, [r3, #1]
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d125      	bne.n	800dd28 <USB_EPStartXfer+0x11de>
 800dcdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	461a      	mov	r2, r3
 800dcee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dcf2:	4413      	add	r3, r2
 800dcf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dcf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	00da      	lsls	r2, r3, #3
 800dd06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dd10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dd14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd26:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800dd28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	69db      	ldr	r3, [r3, #28]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	f000 81fe 	beq.w	800e136 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800dd3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	4413      	add	r3, r2
 800dd54:	881b      	ldrh	r3, [r3, #0]
 800dd56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dd5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dd5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d005      	beq.n	800dd72 <USB_EPStartXfer+0x1228>
 800dd66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dd6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d10d      	bne.n	800dd8e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dd72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dd76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f040 81db 	bne.w	800e136 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dd80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dd84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f040 81d4 	bne.w	800e136 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800dd8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd96:	681a      	ldr	r2, [r3, #0]
 800dd98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	4413      	add	r3, r2
 800dda8:	881b      	ldrh	r3, [r3, #0]
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddb4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ddb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	441a      	add	r2, r3
 800ddd2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ddd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ddda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ddde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dde2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	8013      	strh	r3, [r2, #0]
 800ddea:	e1a4      	b.n	800e136 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ddec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	78db      	ldrb	r3, [r3, #3]
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	f040 819a 	bne.w	800e132 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ddfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	699a      	ldr	r2, [r3, #24]
 800de0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	429a      	cmp	r2, r3
 800de18:	d917      	bls.n	800de4a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800de1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	691b      	ldr	r3, [r3, #16]
 800de26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800de2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	699a      	ldr	r2, [r3, #24]
 800de36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de3a:	1ad2      	subs	r2, r2, r3
 800de3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	619a      	str	r2, [r3, #24]
 800de48:	e00e      	b.n	800de68 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800de4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	699b      	ldr	r3, [r3, #24]
 800de56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800de5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	2200      	movs	r2, #0
 800de66:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800de68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	785b      	ldrb	r3, [r3, #1]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d178      	bne.n	800df6a <USB_EPStartXfer+0x1420>
 800de78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800de86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de94:	b29b      	uxth	r3, r3
 800de96:	461a      	mov	r2, r3
 800de98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800de9c:	4413      	add	r3, r2
 800de9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	00da      	lsls	r2, r3, #3
 800deb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800deb4:	4413      	add	r3, r2
 800deb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800deba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800debe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dec2:	2b3e      	cmp	r3, #62	; 0x3e
 800dec4:	d91d      	bls.n	800df02 <USB_EPStartXfer+0x13b8>
 800dec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deca:	095b      	lsrs	r3, r3, #5
 800decc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ded0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ded4:	f003 031f 	and.w	r3, r3, #31
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d104      	bne.n	800dee6 <USB_EPStartXfer+0x139c>
 800dedc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dee0:	3b01      	subs	r3, #1
 800dee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800dee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800deea:	b29b      	uxth	r3, r3
 800deec:	029b      	lsls	r3, r3, #10
 800deee:	b29b      	uxth	r3, r3
 800def0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800def4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800def8:	b29a      	uxth	r2, r3
 800defa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800defe:	801a      	strh	r2, [r3, #0]
 800df00:	e064      	b.n	800dfcc <USB_EPStartXfer+0x1482>
 800df02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df06:	2b00      	cmp	r3, #0
 800df08:	d116      	bne.n	800df38 <USB_EPStartXfer+0x13ee>
 800df0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800df0e:	881b      	ldrh	r3, [r3, #0]
 800df10:	b29b      	uxth	r3, r3
 800df12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800df16:	b29a      	uxth	r2, r3
 800df18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800df1c:	801a      	strh	r2, [r3, #0]
 800df1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800df22:	881b      	ldrh	r3, [r3, #0]
 800df24:	b29b      	uxth	r3, r3
 800df26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df2e:	b29a      	uxth	r2, r3
 800df30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800df34:	801a      	strh	r2, [r3, #0]
 800df36:	e049      	b.n	800dfcc <USB_EPStartXfer+0x1482>
 800df38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df3c:	085b      	lsrs	r3, r3, #1
 800df3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800df42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df46:	f003 0301 	and.w	r3, r3, #1
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d004      	beq.n	800df58 <USB_EPStartXfer+0x140e>
 800df4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df52:	3301      	adds	r3, #1
 800df54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800df58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	029b      	lsls	r3, r3, #10
 800df60:	b29a      	uxth	r2, r3
 800df62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800df66:	801a      	strh	r2, [r3, #0]
 800df68:	e030      	b.n	800dfcc <USB_EPStartXfer+0x1482>
 800df6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	785b      	ldrb	r3, [r3, #1]
 800df76:	2b01      	cmp	r3, #1
 800df78:	d128      	bne.n	800dfcc <USB_EPStartXfer+0x1482>
 800df7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800df88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df96:	b29b      	uxth	r3, r3
 800df98:	461a      	mov	r2, r3
 800df9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800df9e:	4413      	add	r3, r2
 800dfa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800dfa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	00da      	lsls	r2, r3, #3
 800dfb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dfb6:	4413      	add	r3, r2
 800dfb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dfbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800dfca:	801a      	strh	r2, [r3, #0]
 800dfcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dfda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	785b      	ldrb	r3, [r3, #1]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d178      	bne.n	800e0dc <USB_EPStartXfer+0x1592>
 800dfea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e006:	b29b      	uxth	r3, r3
 800e008:	461a      	mov	r2, r3
 800e00a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e00e:	4413      	add	r3, r2
 800e010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	00da      	lsls	r2, r3, #3
 800e022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e026:	4413      	add	r3, r2
 800e028:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e02c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e034:	2b3e      	cmp	r3, #62	; 0x3e
 800e036:	d91d      	bls.n	800e074 <USB_EPStartXfer+0x152a>
 800e038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e03c:	095b      	lsrs	r3, r3, #5
 800e03e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e046:	f003 031f 	and.w	r3, r3, #31
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d104      	bne.n	800e058 <USB_EPStartXfer+0x150e>
 800e04e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e052:	3b01      	subs	r3, #1
 800e054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e058:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	029b      	lsls	r3, r3, #10
 800e060:	b29b      	uxth	r3, r3
 800e062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e06a:	b29a      	uxth	r2, r3
 800e06c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e070:	801a      	strh	r2, [r3, #0]
 800e072:	e060      	b.n	800e136 <USB_EPStartXfer+0x15ec>
 800e074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d116      	bne.n	800e0aa <USB_EPStartXfer+0x1560>
 800e07c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e080:	881b      	ldrh	r3, [r3, #0]
 800e082:	b29b      	uxth	r3, r3
 800e084:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e088:	b29a      	uxth	r2, r3
 800e08a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e08e:	801a      	strh	r2, [r3, #0]
 800e090:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e094:	881b      	ldrh	r3, [r3, #0]
 800e096:	b29b      	uxth	r3, r3
 800e098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e09c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0a0:	b29a      	uxth	r2, r3
 800e0a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e0a6:	801a      	strh	r2, [r3, #0]
 800e0a8:	e045      	b.n	800e136 <USB_EPStartXfer+0x15ec>
 800e0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0ae:	085b      	lsrs	r3, r3, #1
 800e0b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0b8:	f003 0301 	and.w	r3, r3, #1
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d004      	beq.n	800e0ca <USB_EPStartXfer+0x1580>
 800e0c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e0ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	029b      	lsls	r3, r3, #10
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e0d8:	801a      	strh	r2, [r3, #0]
 800e0da:	e02c      	b.n	800e136 <USB_EPStartXfer+0x15ec>
 800e0dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	785b      	ldrb	r3, [r3, #1]
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d124      	bne.n	800e136 <USB_EPStartXfer+0x15ec>
 800e0ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e102:	4413      	add	r3, r2
 800e104:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e10c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	00da      	lsls	r2, r3, #3
 800e116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e11a:	4413      	add	r3, r2
 800e11c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e128:	b29a      	uxth	r2, r3
 800e12a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e12e:	801a      	strh	r2, [r3, #0]
 800e130:	e001      	b.n	800e136 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800e132:	2301      	movs	r3, #1
 800e134:	e03a      	b.n	800e1ac <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e13a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4413      	add	r3, r2
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	b29b      	uxth	r3, r3
 800e154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e15c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e160:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e164:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e168:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e16c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e170:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e174:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e17c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	441a      	add	r2, r3
 800e192:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e19a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e19e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e1b6:	b480      	push	{r7}
 800e1b8:	b085      	sub	sp, #20
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	785b      	ldrb	r3, [r3, #1]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d020      	beq.n	800e20a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	4413      	add	r3, r2
 800e1d2:	881b      	ldrh	r3, [r3, #0]
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1de:	81bb      	strh	r3, [r7, #12]
 800e1e0:	89bb      	ldrh	r3, [r7, #12]
 800e1e2:	f083 0310 	eor.w	r3, r3, #16
 800e1e6:	81bb      	strh	r3, [r7, #12]
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	441a      	add	r2, r3
 800e1f2:	89bb      	ldrh	r3, [r7, #12]
 800e1f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e204:	b29b      	uxth	r3, r3
 800e206:	8013      	strh	r3, [r2, #0]
 800e208:	e01f      	b.n	800e24a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	4413      	add	r3, r2
 800e214:	881b      	ldrh	r3, [r3, #0]
 800e216:	b29b      	uxth	r3, r3
 800e218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e21c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e220:	81fb      	strh	r3, [r7, #14]
 800e222:	89fb      	ldrh	r3, [r7, #14]
 800e224:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e228:	81fb      	strh	r3, [r7, #14]
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	441a      	add	r2, r3
 800e234:	89fb      	ldrh	r3, [r7, #14]
 800e236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e23a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e23e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e246:	b29b      	uxth	r3, r3
 800e248:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e24a:	2300      	movs	r3, #0
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3714      	adds	r7, #20
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e258:	b480      	push	{r7}
 800e25a:	b087      	sub	sp, #28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	7b1b      	ldrb	r3, [r3, #12]
 800e266:	2b00      	cmp	r3, #0
 800e268:	f040 809d 	bne.w	800e3a6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	785b      	ldrb	r3, [r3, #1]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d04c      	beq.n	800e30e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	4413      	add	r3, r2
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	823b      	strh	r3, [r7, #16]
 800e282:	8a3b      	ldrh	r3, [r7, #16]
 800e284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d01b      	beq.n	800e2c4 <USB_EPClearStall+0x6c>
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4413      	add	r3, r2
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2a2:	81fb      	strh	r3, [r7, #14]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	441a      	add	r2, r3
 800e2ae:	89fb      	ldrh	r3, [r7, #14]
 800e2b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e2b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e2bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	78db      	ldrb	r3, [r3, #3]
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d06c      	beq.n	800e3a6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	4413      	add	r3, r2
 800e2d6:	881b      	ldrh	r3, [r3, #0]
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e2de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2e2:	81bb      	strh	r3, [r7, #12]
 800e2e4:	89bb      	ldrh	r3, [r7, #12]
 800e2e6:	f083 0320 	eor.w	r3, r3, #32
 800e2ea:	81bb      	strh	r3, [r7, #12]
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	441a      	add	r2, r3
 800e2f6:	89bb      	ldrh	r3, [r7, #12]
 800e2f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e308:	b29b      	uxth	r3, r3
 800e30a:	8013      	strh	r3, [r2, #0]
 800e30c:	e04b      	b.n	800e3a6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	4413      	add	r3, r2
 800e318:	881b      	ldrh	r3, [r3, #0]
 800e31a:	82fb      	strh	r3, [r7, #22]
 800e31c:	8afb      	ldrh	r3, [r7, #22]
 800e31e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e322:	2b00      	cmp	r3, #0
 800e324:	d01b      	beq.n	800e35e <USB_EPClearStall+0x106>
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	4413      	add	r3, r2
 800e330:	881b      	ldrh	r3, [r3, #0]
 800e332:	b29b      	uxth	r3, r3
 800e334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e33c:	82bb      	strh	r3, [r7, #20]
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	441a      	add	r2, r3
 800e348:	8abb      	ldrh	r3, [r7, #20]
 800e34a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e34e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	4413      	add	r3, r2
 800e368:	881b      	ldrh	r3, [r3, #0]
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e374:	827b      	strh	r3, [r7, #18]
 800e376:	8a7b      	ldrh	r3, [r7, #18]
 800e378:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e37c:	827b      	strh	r3, [r7, #18]
 800e37e:	8a7b      	ldrh	r3, [r7, #18]
 800e380:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e384:	827b      	strh	r3, [r7, #18]
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	441a      	add	r2, r3
 800e390:	8a7b      	ldrh	r3, [r7, #18]
 800e392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e39a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e39e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e3a6:	2300      	movs	r3, #0
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	371c      	adds	r7, #28
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b2:	4770      	bx	lr

0800e3b4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	460b      	mov	r3, r1
 800e3be:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e3c0:	78fb      	ldrb	r3, [r7, #3]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d103      	bne.n	800e3ce <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2280      	movs	r2, #128	; 0x80
 800e3ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	370c      	adds	r7, #12
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800e40a:	b480      	push	{r7}
 800e40c:	b083      	sub	sp, #12
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e418:	b29b      	uxth	r3, r3
 800e41a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e41e:	b29a      	uxth	r2, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e426:	2300      	movs	r3, #0
}
 800e428:	4618      	mov	r0, r3
 800e42a:	370c      	adds	r7, #12
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr

0800e434 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800e434:	b480      	push	{r7}
 800e436:	b085      	sub	sp, #20
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e442:	b29b      	uxth	r3, r3
 800e444:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e446:	68fb      	ldr	r3, [r7, #12]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3714      	adds	r7, #20
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e454:	b480      	push	{r7}
 800e456:	b08d      	sub	sp, #52	; 0x34
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	4611      	mov	r1, r2
 800e460:	461a      	mov	r2, r3
 800e462:	460b      	mov	r3, r1
 800e464:	80fb      	strh	r3, [r7, #6]
 800e466:	4613      	mov	r3, r2
 800e468:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e46a:	88bb      	ldrh	r3, [r7, #4]
 800e46c:	3301      	adds	r3, #1
 800e46e:	085b      	lsrs	r3, r3, #1
 800e470:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e47a:	88fa      	ldrh	r2, [r7, #6]
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	4413      	add	r3, r2
 800e480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e484:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800e486:	6a3b      	ldr	r3, [r7, #32]
 800e488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e48a:	e01b      	b.n	800e4c4 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800e492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e494:	3301      	adds	r3, #1
 800e496:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	021b      	lsls	r3, r3, #8
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b4:	3302      	adds	r3, #2
 800e4b6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800e4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c0:	3b01      	subs	r3, #1
 800e4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1e0      	bne.n	800e48c <USB_WritePMA+0x38>
  }
}
 800e4ca:	bf00      	nop
 800e4cc:	bf00      	nop
 800e4ce:	3734      	adds	r7, #52	; 0x34
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b08b      	sub	sp, #44	; 0x2c
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	4611      	mov	r1, r2
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	80fb      	strh	r3, [r7, #6]
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e4ee:	88bb      	ldrh	r3, [r7, #4]
 800e4f0:	085b      	lsrs	r3, r3, #1
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e4fe:	88fa      	ldrh	r2, [r7, #6]
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	4413      	add	r3, r2
 800e504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e508:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	627b      	str	r3, [r7, #36]	; 0x24
 800e50e:	e018      	b.n	800e542 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800e510:	6a3b      	ldr	r3, [r7, #32]
 800e512:	881b      	ldrh	r3, [r3, #0]
 800e514:	b29b      	uxth	r3, r3
 800e516:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e518:	6a3b      	ldr	r3, [r7, #32]
 800e51a:	3302      	adds	r3, #2
 800e51c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	b2da      	uxtb	r2, r3
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	3301      	adds	r3, #1
 800e52a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	0a1b      	lsrs	r3, r3, #8
 800e530:	b2da      	uxtb	r2, r3
 800e532:	69fb      	ldr	r3, [r7, #28]
 800e534:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	3301      	adds	r3, #1
 800e53a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	3b01      	subs	r3, #1
 800e540:	627b      	str	r3, [r7, #36]	; 0x24
 800e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e544:	2b00      	cmp	r3, #0
 800e546:	d1e3      	bne.n	800e510 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e548:	88bb      	ldrh	r3, [r7, #4]
 800e54a:	f003 0301 	and.w	r3, r3, #1
 800e54e:	b29b      	uxth	r3, r3
 800e550:	2b00      	cmp	r3, #0
 800e552:	d007      	beq.n	800e564 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	881b      	ldrh	r3, [r3, #0]
 800e558:	b29b      	uxth	r3, r3
 800e55a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	b2da      	uxtb	r2, r3
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	701a      	strb	r2, [r3, #0]
  }
}
 800e564:	bf00      	nop
 800e566:	372c      	adds	r7, #44	; 0x2c
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b096      	sub	sp, #88	; 0x58
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
 800e57c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	3303      	adds	r3, #3
 800e582:	f023 0303 	bic.w	r3, r3, #3
 800e586:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e588:	f3ef 8310 	mrs	r3, PRIMASK
 800e58c:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800e58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800e590:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800e592:	b672      	cpsid	i
#endif
    return(int_posture);
 800e594:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800e596:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800e598:	4b55      	ldr	r3, [pc, #340]	; (800e6f0 <_tx_byte_allocate+0x180>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5a6:	621a      	str	r2, [r3, #32]
 800e5a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5aa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	f383 8810 	msr	PRIMASK, r3
}
 800e5b2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800e5b4:	6879      	ldr	r1, [r7, #4]
 800e5b6:	68f8      	ldr	r0, [r7, #12]
 800e5b8:	f000 f9b2 	bl	800e920 <_tx_byte_pool_search>
 800e5bc:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5be:	f3ef 8310 	mrs	r3, PRIMASK
 800e5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e5c6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e5c8:	b672      	cpsid	i
    return(int_posture);
 800e5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800e5cc:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800e5ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d002      	beq.n	800e5da <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5d8:	e006      	b.n	800e5e8 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	6a1b      	ldr	r3, [r3, #32]
 800e5de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d101      	bne.n	800e5e8 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800e5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d0d9      	beq.n	800e5a2 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5f2:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800e5f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d008      	beq.n	800e60c <_tx_byte_allocate+0x9c>
 800e5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5fc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5fe:	6a3b      	ldr	r3, [r7, #32]
 800e600:	f383 8810 	msr	PRIMASK, r3
}
 800e604:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800e606:	2300      	movs	r3, #0
 800e608:	653b      	str	r3, [r7, #80]	; 0x50
 800e60a:	e06c      	b.n	800e6e6 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d061      	beq.n	800e6d6 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800e612:	4b38      	ldr	r3, [pc, #224]	; (800e6f4 <_tx_byte_allocate+0x184>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d007      	beq.n	800e62a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800e61a:	2310      	movs	r3, #16
 800e61c:	653b      	str	r3, [r7, #80]	; 0x50
 800e61e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e620:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	f383 8810 	msr	PRIMASK, r3
}
 800e628:	e05d      	b.n	800e6e6 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800e62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e62c:	4a32      	ldr	r2, [pc, #200]	; (800e6f8 <_tx_byte_allocate+0x188>)
 800e62e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800e630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800e636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e638:	68ba      	ldr	r2, [r7, #8]
 800e63a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800e63c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e63e:	687a      	ldr	r2, [r7, #4]
 800e640:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800e642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e644:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e648:	1c5a      	adds	r2, r3, #1
 800e64a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e64c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e654:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e65a:	1c5a      	adds	r2, r3, #1
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800e660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e662:	2b00      	cmp	r3, #0
 800e664:	d109      	bne.n	800e67a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e66a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800e66c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e66e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e670:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800e672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e676:	675a      	str	r2, [r3, #116]	; 0x74
 800e678:	e011      	b.n	800e69e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e67e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800e680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e682:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e684:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800e686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e68a:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800e68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e68e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e690:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800e692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e696:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800e698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e69a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e69c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800e69e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6a0:	2209      	movs	r2, #9
 800e6a2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e6a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800e6aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6ac:	683a      	ldr	r2, [r7, #0]
 800e6ae:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800e6b0:	4b10      	ldr	r3, [pc, #64]	; (800e6f4 <_tx_byte_allocate+0x184>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	4a0f      	ldr	r2, [pc, #60]	; (800e6f4 <_tx_byte_allocate+0x184>)
 800e6b8:	6013      	str	r3, [r2, #0]
 800e6ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6bc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	f383 8810 	msr	PRIMASK, r3
}
 800e6c4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e6c6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e6c8:	f002 facc 	bl	8010c64 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800e6cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6d2:	653b      	str	r3, [r7, #80]	; 0x50
 800e6d4:	e007      	b.n	800e6e6 <_tx_byte_allocate+0x176>
 800e6d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6d8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	f383 8810 	msr	PRIMASK, r3
}
 800e6e0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800e6e2:	2310      	movs	r3, #16
 800e6e4:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800e6e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3758      	adds	r7, #88	; 0x58
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	20003910 	.word	0x20003910
 800e6f4:	200039a8 	.word	0x200039a8
 800e6f8:	0800e6fd 	.word	0x0800e6fd

0800e6fc <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b08e      	sub	sp, #56	; 0x38
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e706:	f3ef 8310 	mrs	r3, PRIMASK
 800e70a:	623b      	str	r3, [r7, #32]
    return(posture);
 800e70c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e70e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e710:	b672      	cpsid	i
    return(int_posture);
 800e712:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800e714:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e71a:	4a33      	ldr	r2, [pc, #204]	; (800e7e8 <_tx_byte_pool_cleanup+0xec>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d158      	bne.n	800e7d2 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e726:	683a      	ldr	r2, [r7, #0]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d152      	bne.n	800e7d2 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e730:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800e732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e734:	2b00      	cmp	r3, #0
 800e736:	d04c      	beq.n	800e7d2 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4a2b      	ldr	r2, [pc, #172]	; (800e7ec <_tx_byte_pool_cleanup+0xf0>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d147      	bne.n	800e7d2 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800e742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e746:	2b00      	cmp	r3, #0
 800e748:	d043      	beq.n	800e7d2 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800e750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e754:	1e5a      	subs	r2, r3, #1
 800e756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e758:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800e75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e75e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800e760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e762:	2b00      	cmp	r3, #0
 800e764:	d103      	bne.n	800e76e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800e766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e768:	2200      	movs	r2, #0
 800e76a:	625a      	str	r2, [r3, #36]	; 0x24
 800e76c:	e013      	b.n	800e796 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e772:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e778:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e77e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800e780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e784:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800e786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d102      	bne.n	800e796 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800e790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e794:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79a:	2b09      	cmp	r3, #9
 800e79c:	d119      	bne.n	800e7d2 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2210      	movs	r2, #16
 800e7a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800e7a6:	4b12      	ldr	r3, [pc, #72]	; (800e7f0 <_tx_byte_pool_cleanup+0xf4>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	4a10      	ldr	r2, [pc, #64]	; (800e7f0 <_tx_byte_pool_cleanup+0xf4>)
 800e7ae:	6013      	str	r3, [r2, #0]
 800e7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	f383 8810 	msr	PRIMASK, r3
}
 800e7ba:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f002 f951 	bl	8010a64 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e7c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e7c6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e7c8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e7ca:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e7cc:	b672      	cpsid	i
    return(int_posture);
 800e7ce:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800e7d0:	637b      	str	r3, [r7, #52]	; 0x34
 800e7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f383 8810 	msr	PRIMASK, r3
}
 800e7dc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800e7de:	bf00      	nop
 800e7e0:	3738      	adds	r7, #56	; 0x38
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	0800e6fd 	.word	0x0800e6fd
 800e7ec:	42595445 	.word	0x42595445
 800e7f0:	200039a8 	.word	0x200039a8

0800e7f4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b08e      	sub	sp, #56	; 0x38
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
 800e800:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800e802:	2234      	movs	r2, #52	; 0x34
 800e804:	2100      	movs	r1, #0
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f008 fa88 	bl	8016d1c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	f023 0303 	bic.w	r3, r3, #3
 800e812:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	683a      	ldr	r2, [r7, #0]
 800e824:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	f1a3 0208 	sub.w	r2, r3, #8
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2202      	movs	r2, #2
 800e840:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800e846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	4413      	add	r3, r2
 800e84c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800e84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e850:	3b04      	subs	r3, #4
 800e852:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800e858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e85a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800e85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e860:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800e862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e864:	3b04      	subs	r3, #4
 800e866:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800e868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e86a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800e876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e878:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800e87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e87e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800e884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e886:	3304      	adds	r3, #4
 800e888:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800e88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e88c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800e88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e890:	4a1f      	ldr	r2, [pc, #124]	; (800e910 <_tx_byte_pool_create+0x11c>)
 800e892:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2200      	movs	r2, #0
 800e898:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e89a:	f3ef 8310 	mrs	r3, PRIMASK
 800e89e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e8a0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e8a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e8a4:	b672      	cpsid	i
    return(int_posture);
 800e8a6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800e8a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	4a19      	ldr	r2, [pc, #100]	; (800e914 <_tx_byte_pool_create+0x120>)
 800e8ae:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800e8b0:	4b19      	ldr	r3, [pc, #100]	; (800e918 <_tx_byte_pool_create+0x124>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d109      	bne.n	800e8cc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800e8b8:	4a18      	ldr	r2, [pc, #96]	; (800e91c <_tx_byte_pool_create+0x128>)
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	68fa      	ldr	r2, [r7, #12]
 800e8c8:	631a      	str	r2, [r3, #48]	; 0x30
 800e8ca:	e011      	b.n	800e8f0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800e8cc:	4b13      	ldr	r3, [pc, #76]	; (800e91c <_tx_byte_pool_create+0x128>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800e8d2:	6a3b      	ldr	r3, [r7, #32]
 800e8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800e8d8:	6a3b      	ldr	r3, [r7, #32]
 800e8da:	68fa      	ldr	r2, [r7, #12]
 800e8dc:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	69fa      	ldr	r2, [r7, #28]
 800e8e8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	6a3a      	ldr	r2, [r7, #32]
 800e8ee:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800e8f0:	4b09      	ldr	r3, [pc, #36]	; (800e918 <_tx_byte_pool_create+0x124>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	4a08      	ldr	r2, [pc, #32]	; (800e918 <_tx_byte_pool_create+0x124>)
 800e8f8:	6013      	str	r3, [r2, #0]
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	f383 8810 	msr	PRIMASK, r3
}
 800e904:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800e906:	2300      	movs	r3, #0
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3738      	adds	r7, #56	; 0x38
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	ffffeeee 	.word	0xffffeeee
 800e914:	42595445 	.word	0x42595445
 800e918:	20003904 	.word	0x20003904
 800e91c:	20003900 	.word	0x20003900

0800e920 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800e920:	b480      	push	{r7}
 800e922:	b097      	sub	sp, #92	; 0x5c
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800e92a:	2300      	movs	r3, #0
 800e92c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e92e:	f3ef 8310 	mrs	r3, PRIMASK
 800e932:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800e936:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e938:	b672      	cpsid	i
    return(int_posture);
 800e93a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800e93c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	689a      	ldr	r2, [r3, #8]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	3b02      	subs	r3, #2
 800e948:	00db      	lsls	r3, r3, #3
 800e94a:	4413      	add	r3, r2
 800e94c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800e94e:	683a      	ldr	r2, [r7, #0]
 800e950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e952:	429a      	cmp	r2, r3
 800e954:	d308      	bcc.n	800e968 <_tx_byte_pool_search+0x48>
 800e956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e958:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	f383 8810 	msr	PRIMASK, r3
}
 800e960:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800e962:	2300      	movs	r3, #0
 800e964:	653b      	str	r3, [r7, #80]	; 0x50
 800e966:	e0dd      	b.n	800eb24 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e968:	4b72      	ldr	r3, [pc, #456]	; (800eb34 <_tx_byte_pool_search+0x214>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e972:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	695b      	ldr	r3, [r3, #20]
 800e978:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	3301      	adds	r3, #1
 800e980:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800e982:	2300      	movs	r3, #0
 800e984:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800e986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e988:	3304      	adds	r3, #4
 800e98a:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800e98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98e:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800e990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a68      	ldr	r2, [pc, #416]	; (800eb38 <_tx_byte_pool_search+0x218>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d143      	bne.n	800ea22 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800e99a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d104      	bne.n	800e9aa <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e9a4:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800e9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9ac:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800e9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800e9b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800e9bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9be:	3b08      	subs	r3, #8
 800e9c0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800e9c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d257      	bcs.n	800ea7a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800e9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d0:	3304      	adds	r3, #4
 800e9d2:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800e9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d6:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800e9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a56      	ldr	r2, [pc, #344]	; (800eb38 <_tx_byte_pool_search+0x218>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d113      	bne.n	800ea0a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800e9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ec:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	68db      	ldr	r3, [r3, #12]
 800e9f2:	1e5a      	subs	r2, r3, #1
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	695b      	ldr	r3, [r3, #20]
 800e9fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d114      	bne.n	800ea2c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea06:	615a      	str	r2, [r3, #20]
 800ea08:	e010      	b.n	800ea2c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ea0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800ea0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800ea14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d008      	beq.n	800ea2c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800ea1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea20:	e004      	b.n	800ea2c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ea22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea24:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800ea26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800ea2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d002      	beq.n	800ea38 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800ea32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea34:	3b01      	subs	r3, #1
 800ea36:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea3a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	f383 8810 	msr	PRIMASK, r3
}
 800ea42:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ea44:	f3ef 8310 	mrs	r3, PRIMASK
 800ea48:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ea4a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ea4c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ea4e:	b672      	cpsid	i
    return(int_posture);
 800ea50:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800ea52:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6a1b      	ldr	r3, [r3, #32]
 800ea58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d009      	beq.n	800ea72 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	695b      	ldr	r3, [r3, #20]
 800ea62:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	68db      	ldr	r3, [r3, #12]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea70:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800ea72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d186      	bne.n	800e986 <_tx_byte_pool_search+0x66>
 800ea78:	e000      	b.n	800ea7c <_tx_byte_pool_search+0x15c>
                    break;
 800ea7a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800ea7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d048      	beq.n	800eb14 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800ea82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	2b13      	cmp	r3, #19
 800ea8a:	d91e      	bls.n	800eaca <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	3308      	adds	r3, #8
 800ea90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea92:	4413      	add	r3, r2
 800ea94:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ea96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea98:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ea9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea9c:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800ea9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa4:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800eaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa8:	3304      	adds	r3, #4
 800eaaa:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800eaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaae:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800eab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab2:	4a21      	ldr	r2, [pc, #132]	; (800eb38 <_tx_byte_pool_search+0x218>)
 800eab4:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	1c5a      	adds	r2, r3, #1
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800eac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eac4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800eaca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eacc:	3304      	adds	r3, #4
 800eace:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800ead0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead2:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ead4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	689a      	ldr	r2, [r3, #8]
 800eade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	f1a3 0208 	sub.w	r2, r3, #8
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	695b      	ldr	r3, [r3, #20]
 800eaee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d105      	bne.n	800eb00 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800eaf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaf6:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800eaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	615a      	str	r2, [r3, #20]
 800eb00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb02:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f383 8810 	msr	PRIMASK, r3
}
 800eb0a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800eb0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb0e:	3308      	adds	r3, #8
 800eb10:	653b      	str	r3, [r7, #80]	; 0x50
 800eb12:	e007      	b.n	800eb24 <_tx_byte_pool_search+0x204>
 800eb14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb16:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	f383 8810 	msr	PRIMASK, r3
}
 800eb1e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800eb20:	2300      	movs	r3, #0
 800eb22:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800eb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	375c      	adds	r7, #92	; 0x5c
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	20003910 	.word	0x20003910
 800eb38:	ffffeeee 	.word	0xffffeeee

0800eb3c <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b08e      	sub	sp, #56	; 0x38
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eb46:	f3ef 8310 	mrs	r3, PRIMASK
 800eb4a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800eb4c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800eb4e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eb50:	b672      	cpsid	i
    return(int_posture);
 800eb52:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800eb54:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb5a:	4a38      	ldr	r2, [pc, #224]	; (800ec3c <_tx_event_flags_cleanup+0x100>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d162      	bne.n	800ec26 <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb66:	683a      	ldr	r2, [r7, #0]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d15c      	bne.n	800ec26 <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb70:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800eb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d056      	beq.n	800ec26 <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800eb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4a30      	ldr	r2, [pc, #192]	; (800ec40 <_tx_event_flags_cleanup+0x104>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d151      	bne.n	800ec26 <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800eb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb84:	695b      	ldr	r3, [r3, #20]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d04d      	beq.n	800ec26 <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800eb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb92:	695b      	ldr	r3, [r3, #20]
 800eb94:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800eb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb98:	691b      	ldr	r3, [r3, #16]
 800eb9a:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800eb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d020      	beq.n	800ebe4 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800eba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba4:	3b01      	subs	r3, #1
 800eba6:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800eba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebac:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800ebae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d103      	bne.n	800ebbc <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800ebb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	611a      	str	r2, [r3, #16]
 800ebba:	e016      	b.n	800ebea <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebc0:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebc6:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebca:	6a3a      	ldr	r2, [r7, #32]
 800ebcc:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800ebce:	6a3b      	ldr	r3, [r7, #32]
 800ebd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebd2:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800ebd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d106      	bne.n	800ebea <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebe0:	611a      	str	r2, [r3, #16]
 800ebe2:	e002      	b.n	800ebea <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800ebe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebee:	2b07      	cmp	r3, #7
 800ebf0:	d119      	bne.n	800ec26 <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2207      	movs	r2, #7
 800ebf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ebfa:	4b12      	ldr	r3, [pc, #72]	; (800ec44 <_tx_event_flags_cleanup+0x108>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	4a10      	ldr	r2, [pc, #64]	; (800ec44 <_tx_event_flags_cleanup+0x108>)
 800ec02:	6013      	str	r3, [r2, #0]
 800ec04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec06:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f383 8810 	msr	PRIMASK, r3
}
 800ec0e:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f001 ff27 	bl	8010a64 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ec16:	f3ef 8310 	mrs	r3, PRIMASK
 800ec1a:	617b      	str	r3, [r7, #20]
    return(posture);
 800ec1c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ec1e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ec20:	b672      	cpsid	i
    return(int_posture);
 800ec22:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ec24:	637b      	str	r3, [r7, #52]	; 0x34
 800ec26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec28:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	f383 8810 	msr	PRIMASK, r3
}
 800ec30:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ec32:	bf00      	nop
 800ec34:	3738      	adds	r7, #56	; 0x38
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	0800eb3d 	.word	0x0800eb3d
 800ec40:	4456444e 	.word	0x4456444e
 800ec44:	200039a8 	.word	0x200039a8

0800ec48 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b088      	sub	sp, #32
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800ec52:	2224      	movs	r2, #36	; 0x24
 800ec54:	2100      	movs	r1, #0
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f008 f860 	bl	8016d1c <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	683a      	ldr	r2, [r7, #0]
 800ec60:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ec62:	f3ef 8310 	mrs	r3, PRIMASK
 800ec66:	613b      	str	r3, [r7, #16]
    return(posture);
 800ec68:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ec6a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ec6c:	b672      	cpsid	i
    return(int_posture);
 800ec6e:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800ec70:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	4a18      	ldr	r2, [pc, #96]	; (800ecd8 <_tx_event_flags_create+0x90>)
 800ec76:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800ec78:	4b18      	ldr	r3, [pc, #96]	; (800ecdc <_tx_event_flags_create+0x94>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d109      	bne.n	800ec94 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800ec80:	4a17      	ldr	r2, [pc, #92]	; (800ece0 <_tx_event_flags_create+0x98>)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	687a      	ldr	r2, [r7, #4]
 800ec90:	61da      	str	r2, [r3, #28]
 800ec92:	e011      	b.n	800ecb8 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800ec94:	4b12      	ldr	r3, [pc, #72]	; (800ece0 <_tx_event_flags_create+0x98>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	69db      	ldr	r3, [r3, #28]
 800ec9e:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	697a      	ldr	r2, [r7, #20]
 800ecb0:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	69ba      	ldr	r2, [r7, #24]
 800ecb6:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800ecb8:	4b08      	ldr	r3, [pc, #32]	; (800ecdc <_tx_event_flags_create+0x94>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	4a07      	ldr	r2, [pc, #28]	; (800ecdc <_tx_event_flags_create+0x94>)
 800ecc0:	6013      	str	r3, [r2, #0]
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	f383 8810 	msr	PRIMASK, r3
}
 800eccc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ecce:	2300      	movs	r3, #0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3720      	adds	r7, #32
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	4456444e 	.word	0x4456444e
 800ecdc:	200038ec 	.word	0x200038ec
 800ece0:	200038e8 	.word	0x200038e8

0800ece4 <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b096      	sub	sp, #88	; 0x58
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
 800ecf0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ecf2:	f3ef 8310 	mrs	r3, PRIMASK
 800ecf6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800ecfa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ecfc:	b672      	cpsid	i
    return(int_posture);
 800ecfe:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 800ed00:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	689b      	ldr	r3, [r3, #8]
 800ed06:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6a1b      	ldr	r3, [r3, #32]
 800ed0c:	43da      	mvns	r2, r3
 800ed0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed10:	401a      	ands	r2, r3
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	601a      	str	r2, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f003 0302 	and.w	r3, r3, #2
 800ed1c:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6a1b      	ldr	r3, [r3, #32]
 800ed22:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800ed24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d004      	beq.n	800ed34 <_tx_event_flags_get+0x50>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800ed2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed2c:	43db      	mvns	r3, r3
 800ed2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed30:	4013      	ands	r3, r2
 800ed32:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800ed34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed36:	2b02      	cmp	r3, #2
 800ed38:	d10a      	bne.n	800ed50 <_tx_event_flags_get+0x6c>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800ed3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	4013      	ands	r3, r2
 800ed40:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800ed42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d006      	beq.n	800ed58 <_tx_event_flags_get+0x74>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed4e:	e003      	b.n	800ed58 <_tx_event_flags_get+0x74>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800ed50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	4013      	ands	r3, r2
 800ed56:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800ed58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d026      	beq.n	800edac <_tx_event_flags_get+0xc8>
    {

        /* Yes, this request can be handled immediately.  */

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f003 0301 	and.w	r3, r3, #1
 800ed64:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800ed66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d11c      	bne.n	800eda6 <_tx_event_flags_get+0xc2>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	695b      	ldr	r3, [r3, #20]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d005      	beq.n	800ed84 <_tx_event_flags_get+0xa0>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	691b      	ldr	r3, [r3, #16]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d101      	bne.n	800ed84 <_tx_event_flags_get+0xa0>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 800ed80:	2301      	movs	r3, #1
 800ed82:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800ed84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed86:	2b01      	cmp	r3, #1
 800ed88:	d106      	bne.n	800ed98 <_tx_event_flags_get+0xb4>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	6a1a      	ldr	r2, [r3, #32]
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	621a      	str	r2, [r3, #32]
 800ed96:	e006      	b.n	800eda6 <_tx_event_flags_get+0xc2>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	689a      	ldr	r2, [r3, #8]
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	43db      	mvns	r3, r3
 800eda0:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800eda6:	2300      	movs	r3, #0
 800eda8:	653b      	str	r3, [r7, #80]	; 0x50
 800edaa:	e073      	b.n	800ee94 <_tx_event_flags_get+0x1b0>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800edac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d06e      	beq.n	800ee90 <_tx_event_flags_get+0x1ac>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 800edb2:	4b3e      	ldr	r3, [pc, #248]	; (800eeac <_tx_event_flags_get+0x1c8>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d102      	bne.n	800edc0 <_tx_event_flags_get+0xdc>
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d102      	bne.n	800edc6 <_tx_event_flags_get+0xe2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
                   or if requested_flags is 0, return error completion.  */
                status =  TX_NO_EVENTS;
 800edc0:	2307      	movs	r3, #7
 800edc2:	653b      	str	r3, [r7, #80]	; 0x50
 800edc4:	e066      	b.n	800ee94 <_tx_event_flags_get+0x1b0>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800edc6:	4b3a      	ldr	r3, [pc, #232]	; (800eeb0 <_tx_event_flags_get+0x1cc>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800edcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edce:	4a39      	ldr	r2, [pc, #228]	; (800eeb4 <_tx_event_flags_get+0x1d0>)
 800edd0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800edd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd4:	68ba      	ldr	r2, [r7, #8]
 800edd6:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800edd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edda:	687a      	ldr	r2, [r7, #4]
 800eddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800ede0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800ede6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede8:	68fa      	ldr	r2, [r7, #12]
 800edea:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800edec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800edf2:	1c5a      	adds	r2, r3, #1
 800edf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	695b      	ldr	r3, [r3, #20]
 800edfe:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ee00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d109      	bne.n	800ee1a <_tx_event_flags_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee0a:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee10:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800ee12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee16:	675a      	str	r2, [r3, #116]	; 0x74
 800ee18:	e011      	b.n	800ee3e <_tx_event_flags_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	691b      	ldr	r3, [r3, #16]
 800ee1e:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ee20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee24:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ee26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee30:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ee32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee36:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ee38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee3c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	695b      	ldr	r3, [r3, #20]
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800ee48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4a:	2207      	movs	r2, #7
 800ee4c:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ee4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee50:	2201      	movs	r2, #1
 800ee52:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ee54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee58:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800ee5a:	4b14      	ldr	r3, [pc, #80]	; (800eeac <_tx_event_flags_get+0x1c8>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	4a12      	ldr	r2, [pc, #72]	; (800eeac <_tx_event_flags_get+0x1c8>)
 800ee62:	6013      	str	r3, [r2, #0]
 800ee64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee66:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	f383 8810 	msr	PRIMASK, r3
}
 800ee6e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800ee70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee72:	f001 fef7 	bl	8010c64 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ee76:	f3ef 8310 	mrs	r3, PRIMASK
 800ee7a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800ee7c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800ee7e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ee80:	b672      	cpsid	i
    return(int_posture);
 800ee82:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800ee84:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800ee86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee8c:	653b      	str	r3, [r7, #80]	; 0x50
 800ee8e:	e001      	b.n	800ee94 <_tx_event_flags_get+0x1b0>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800ee90:	2307      	movs	r3, #7
 800ee92:	653b      	str	r3, [r7, #80]	; 0x50
 800ee94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee96:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	f383 8810 	msr	PRIMASK, r3
}
 800ee9e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800eea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3758      	adds	r7, #88	; 0x58
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	200039a8 	.word	0x200039a8
 800eeb0:	20003910 	.word	0x20003910
 800eeb4:	0800eb3d 	.word	0x0800eb3d

0800eeb8 <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b0a6      	sub	sp, #152	; 0x98
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eec4:	f3ef 8310 	mrs	r3, PRIMASK
 800eec8:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800eeca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800eecc:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800eece:	b672      	cpsid	i
    return(int_posture);
 800eed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800eed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f003 0302 	and.w	r3, r3, #2
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d023      	beq.n	800ef28 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800eee0:	2300      	movs	r3, #0
 800eee2:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	695b      	ldr	r3, [r3, #20]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d005      	beq.n	800eef8 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	691b      	ldr	r3, [r3, #16]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d101      	bne.n	800eef8 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800eef4:	2301      	movs	r3, #1
 800eef6:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800eef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d107      	bne.n	800ef0e <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	6a1a      	ldr	r2, [r3, #32]
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	43db      	mvns	r3, r3
 800ef06:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	621a      	str	r2, [r3, #32]
 800ef0c:	e005      	b.n	800ef1a <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	689a      	ldr	r2, [r3, #8]
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	609a      	str	r2, [r3, #8]
 800ef1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ef1e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ef20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef22:	f383 8810 	msr	PRIMASK, r3
}
 800ef26:	e1d2      	b.n	800f2ce <_tx_event_flags_set+0x416>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	689a      	ldr	r2, [r3, #8]
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	6a1b      	ldr	r3, [r3, #32]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d006      	beq.n	800ef4a <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	6a1a      	ldr	r2, [r3, #32]
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	43db      	mvns	r3, r3
 800ef44:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	695b      	ldr	r3, [r3, #20]
 800ef52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	691b      	ldr	r3, [r3, #16]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	f000 81a4 	beq.w	800f2a8 <_tx_event_flags_set+0x3f0>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800ef60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d167      	bne.n	800f038 <_tx_event_flags_set+0x180>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800ef76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ef7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef7c:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800ef7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ef82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef86:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800ef88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef8a:	f003 0302 	and.w	r3, r3, #2
 800ef8e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800ef90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef92:	2b02      	cmp	r3, #2
 800ef94:	d10a      	bne.n	800efac <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800ef96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ef98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ef9a:	4013      	ands	r3, r2
 800ef9c:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800ef9e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800efa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d006      	beq.n	800efb4 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800efa6:	2300      	movs	r3, #0
 800efa8:	67bb      	str	r3, [r7, #120]	; 0x78
 800efaa:	e003      	b.n	800efb4 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800efac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800efae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efb0:	4013      	ands	r3, r2
 800efb2:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800efb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f000 817d 	beq.w	800f2b6 <_tx_event_flags_set+0x3fe>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800efbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800efc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efc2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 800efc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efc6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800efc8:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800efca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efcc:	f003 0301 	and.w	r3, r3, #1
 800efd0:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800efd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d106      	bne.n	800efe6 <_tx_event_flags_set+0x12e>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	689a      	ldr	r2, [r3, #8]
 800efdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efde:	43db      	mvns	r3, r3
 800efe0:	401a      	ands	r2, r3
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2200      	movs	r2, #0
 800efea:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2200      	movs	r2, #0
 800eff0:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800eff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800eff6:	2200      	movs	r2, #0
 800eff8:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800effa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800effe:	2200      	movs	r2, #0
 800f000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800f004:	4ba7      	ldr	r3, [pc, #668]	; (800f2a4 <_tx_event_flags_set+0x3ec>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	3301      	adds	r3, #1
 800f00a:	4aa6      	ldr	r2, [pc, #664]	; (800f2a4 <_tx_event_flags_set+0x3ec>)
 800f00c:	6013      	str	r3, [r2, #0]
 800f00e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f012:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f016:	f383 8810 	msr	PRIMASK, r3
}
 800f01a:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800f01c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800f020:	f001 fd20 	bl	8010a64 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f024:	f3ef 8310 	mrs	r3, PRIMASK
 800f028:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800f02a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800f02c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800f02e:	b672      	cpsid	i
    return(int_posture);
 800f030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800f032:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f036:	e13e      	b.n	800f2b6 <_tx_event_flags_set+0x3fe>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	691b      	ldr	r3, [r3, #16]
 800f03c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 800f040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f044:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2200      	movs	r2, #0
 800f04c:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800f04e:	2300      	movs	r3, #0
 800f050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 800f054:	2300      	movs	r3, #0
 800f056:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800f060:	4b90      	ldr	r3, [pc, #576]	; (800f2a4 <_tx_event_flags_set+0x3ec>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	3301      	adds	r3, #1
 800f066:	4a8f      	ldr	r2, [pc, #572]	; (800f2a4 <_tx_event_flags_set+0x3ec>)
 800f068:	6013      	str	r3, [r2, #0]

                /* Since we have temporarily disabled preemption globally, set the preempt 
                   check flag to check for any preemption condition - including from 
                   unrelated ISR processing.  */
                preempt_check =  TX_TRUE;
 800f06a:	2301      	movs	r3, #1
 800f06c:	677b      	str	r3, [r7, #116]	; 0x74
 800f06e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f072:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f076:	f383 8810 	msr	PRIMASK, r3
}
 800f07a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f07c:	f3ef 8310 	mrs	r3, PRIMASK
 800f080:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800f082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800f084:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800f086:	b672      	cpsid	i
    return(int_posture);
 800f088:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800f08a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00f      	beq.n	800f0b6 <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2200      	movs	r2, #0
 800f09a:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800f09c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f0a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	695b      	ldr	r3, [r3, #20]
 800f0a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	689b      	ldr	r3, [r3, #8]
 800f0b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800f0b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0bc:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800f0be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0c4:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800f0c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0ce:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800f0d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0d2:	f003 0302 	and.w	r3, r3, #2
 800f0d6:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800f0d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0da:	2b02      	cmp	r3, #2
 800f0dc:	d10a      	bne.n	800f0f4 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800f0de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f0e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0e2:	4013      	ands	r3, r2
 800f0e4:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800f0e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f0e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d006      	beq.n	800f0fc <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800f0f2:	e003      	b.n	800f0fc <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800f0f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f0f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0f8:	4013      	ands	r3, r2
 800f0fa:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800f0fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f102:	2b07      	cmp	r3, #7
 800f104:	d001      	beq.n	800f10a <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800f106:	2301      	movs	r3, #1
 800f108:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800f10a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d069      	beq.n	800f1e4 <_tx_event_flags_set+0x32c>

                        /* Yes, this request can be handled now.  */

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800f110:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f116:	2b07      	cmp	r3, #7
 800f118:	d11d      	bne.n	800f156 <_tx_event_flags_set+0x29e>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800f11a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f11e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f120:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 800f122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f124:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f126:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800f128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f12a:	f003 0301 	and.w	r3, r3, #1
 800f12e:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800f130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f132:	2b01      	cmp	r3, #1
 800f134:	d106      	bne.n	800f144 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	689a      	ldr	r2, [r3, #8]
 800f13a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f13c:	43db      	mvns	r3, r3
 800f13e:	401a      	ands	r2, r3
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f144:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f148:	2200      	movs	r2, #0
 800f14a:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800f14c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f150:	2200      	movs	r2, #0
 800f152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800f156:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f15c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f160:	429a      	cmp	r2, r3
 800f162:	d103      	bne.n	800f16c <_tx_event_flags_set+0x2b4>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800f164:	2300      	movs	r3, #0
 800f166:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f16a:	e018      	b.n	800f19e <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800f16c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f172:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800f174:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f17a:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800f17c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f17e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f180:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800f182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f184:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f186:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800f188:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f18c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f190:	429a      	cmp	r2, r3
 800f192:	d104      	bne.n	800f19e <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800f194:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f19a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	695b      	ldr	r3, [r3, #20]
 800f1a2:	1e5a      	subs	r2, r3, #1
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800f1a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d10c      	bne.n	800f1ca <_tx_event_flags_set+0x312>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800f1b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 800f1b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800f1c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	671a      	str	r2, [r3, #112]	; 0x70
 800f1c8:	e00c      	b.n	800f1e4 <_tx_event_flags_set+0x32c>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800f1ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f1ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f1d2:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800f1d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1d8:	2200      	movs	r2, #0
 800f1da:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800f1dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f1e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800f1e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800f1ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f1ee:	3b01      	subs	r3, #1
 800f1f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800f1f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f47f af38 	bne.w	800f06e <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f204:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6a1b      	ldr	r3, [r3, #32]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00a      	beq.n	800f224 <_tx_event_flags_set+0x36c>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	689a      	ldr	r2, [r3, #8]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6a1b      	ldr	r3, [r3, #32]
 800f216:	43db      	mvns	r3, r3
 800f218:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2200      	movs	r2, #0
 800f222:	621a      	str	r2, [r3, #32]
 800f224:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f228:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22c:	f383 8810 	msr	PRIMASK, r3
}
 800f230:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800f232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800f23a:	e01f      	b.n	800f27c <_tx_event_flags_set+0x3c4>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800f23c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f242:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f244:	f3ef 8310 	mrs	r3, PRIMASK
 800f248:	623b      	str	r3, [r7, #32]
    return(posture);
 800f24a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f24c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f24e:	b672      	cpsid	i
    return(int_posture);
 800f250:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800f252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800f256:	4b13      	ldr	r3, [pc, #76]	; (800f2a4 <_tx_event_flags_set+0x3ec>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	3301      	adds	r3, #1
 800f25c:	4a11      	ldr	r2, [pc, #68]	; (800f2a4 <_tx_event_flags_set+0x3ec>)
 800f25e:	6013      	str	r3, [r2, #0]
 800f260:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f264:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f268:	f383 8810 	msr	PRIMASK, r3
}
 800f26c:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800f26e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800f272:	f001 fbf7 	bl	8010a64 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800f276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f278:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800f27c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f280:	2b00      	cmp	r3, #0
 800f282:	d1db      	bne.n	800f23c <_tx_event_flags_set+0x384>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f284:	f3ef 8310 	mrs	r3, PRIMASK
 800f288:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f28a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f28c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f28e:	b672      	cpsid	i
    return(int_posture);
 800f290:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800f292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800f296:	4b03      	ldr	r3, [pc, #12]	; (800f2a4 <_tx_event_flags_set+0x3ec>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	3b01      	subs	r3, #1
 800f29c:	4a01      	ldr	r2, [pc, #4]	; (800f2a4 <_tx_event_flags_set+0x3ec>)
 800f29e:	6013      	str	r3, [r2, #0]
 800f2a0:	e009      	b.n	800f2b6 <_tx_event_flags_set+0x3fe>
 800f2a2:	bf00      	nop
 800f2a4:	200039a8 	.word	0x200039a8
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	695b      	ldr	r3, [r3, #20]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d002      	beq.n	800f2b6 <_tx_event_flags_set+0x3fe>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	60da      	str	r2, [r3, #12]
 800f2b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f2ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	f383 8810 	msr	PRIMASK, r3
}
 800f2c2:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800f2c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d101      	bne.n	800f2ce <_tx_event_flags_set+0x416>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800f2ca:	f001 fb91 	bl	80109f0 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800f2ce:	2300      	movs	r3, #0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3798      	adds	r7, #152	; 0x98
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800f2dc:	f001 fa80 	bl	80107e0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800f2e0:	f001 fe88 	bl	8010ff4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800f2e4:	4b12      	ldr	r3, [pc, #72]	; (800f330 <_tx_initialize_high_level+0x58>)
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	601a      	str	r2, [r3, #0]
 800f2ea:	4b12      	ldr	r3, [pc, #72]	; (800f334 <_tx_initialize_high_level+0x5c>)
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800f2f0:	4b11      	ldr	r3, [pc, #68]	; (800f338 <_tx_initialize_high_level+0x60>)
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	601a      	str	r2, [r3, #0]
 800f2f6:	4b11      	ldr	r3, [pc, #68]	; (800f33c <_tx_initialize_high_level+0x64>)
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800f2fc:	4b10      	ldr	r3, [pc, #64]	; (800f340 <_tx_initialize_high_level+0x68>)
 800f2fe:	2200      	movs	r2, #0
 800f300:	601a      	str	r2, [r3, #0]
 800f302:	4b10      	ldr	r3, [pc, #64]	; (800f344 <_tx_initialize_high_level+0x6c>)
 800f304:	2200      	movs	r2, #0
 800f306:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800f308:	4b0f      	ldr	r3, [pc, #60]	; (800f348 <_tx_initialize_high_level+0x70>)
 800f30a:	2200      	movs	r2, #0
 800f30c:	601a      	str	r2, [r3, #0]
 800f30e:	4b0f      	ldr	r3, [pc, #60]	; (800f34c <_tx_initialize_high_level+0x74>)
 800f310:	2200      	movs	r2, #0
 800f312:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800f314:	4b0e      	ldr	r3, [pc, #56]	; (800f350 <_tx_initialize_high_level+0x78>)
 800f316:	2200      	movs	r2, #0
 800f318:	601a      	str	r2, [r3, #0]
 800f31a:	4b0e      	ldr	r3, [pc, #56]	; (800f354 <_tx_initialize_high_level+0x7c>)
 800f31c:	2200      	movs	r2, #0
 800f31e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800f320:	4b0d      	ldr	r3, [pc, #52]	; (800f358 <_tx_initialize_high_level+0x80>)
 800f322:	2200      	movs	r2, #0
 800f324:	601a      	str	r2, [r3, #0]
 800f326:	4b0d      	ldr	r3, [pc, #52]	; (800f35c <_tx_initialize_high_level+0x84>)
 800f328:	2200      	movs	r2, #0
 800f32a:	601a      	str	r2, [r3, #0]
#endif
}
 800f32c:	bf00      	nop
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	200038d8 	.word	0x200038d8
 800f334:	200038dc 	.word	0x200038dc
 800f338:	200038e0 	.word	0x200038e0
 800f33c:	200038e4 	.word	0x200038e4
 800f340:	200038e8 	.word	0x200038e8
 800f344:	200038ec 	.word	0x200038ec
 800f348:	200038f8 	.word	0x200038f8
 800f34c:	200038fc 	.word	0x200038fc
 800f350:	20003900 	.word	0x20003900
 800f354:	20003904 	.word	0x20003904
 800f358:	200038f0 	.word	0x200038f0
 800f35c:	200038f4 	.word	0x200038f4

0800f360 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800f364:	4b10      	ldr	r3, [pc, #64]	; (800f3a8 <_tx_initialize_kernel_enter+0x48>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800f36c:	d00c      	beq.n	800f388 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800f36e:	4b0e      	ldr	r3, [pc, #56]	; (800f3a8 <_tx_initialize_kernel_enter+0x48>)
 800f370:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800f374:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800f376:	f7f0 ff53 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800f37a:	f7ff ffad 	bl	800f2d8 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800f37e:	4b0b      	ldr	r3, [pc, #44]	; (800f3ac <_tx_initialize_kernel_enter+0x4c>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	3301      	adds	r3, #1
 800f384:	4a09      	ldr	r2, [pc, #36]	; (800f3ac <_tx_initialize_kernel_enter+0x4c>)
 800f386:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800f388:	4b07      	ldr	r3, [pc, #28]	; (800f3a8 <_tx_initialize_kernel_enter+0x48>)
 800f38a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800f38e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800f390:	4b07      	ldr	r3, [pc, #28]	; (800f3b0 <_tx_initialize_kernel_enter+0x50>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4618      	mov	r0, r3
 800f396:	f7f1 f9e5 	bl	8000764 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800f39a:	4b03      	ldr	r3, [pc, #12]	; (800f3a8 <_tx_initialize_kernel_enter+0x48>)
 800f39c:	2200      	movs	r2, #0
 800f39e:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800f3a0:	f7f0 ff7e 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800f3a4:	bf00      	nop
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	2000000c 	.word	0x2000000c
 800f3ac:	200039a8 	.word	0x200039a8
 800f3b0:	20003908 	.word	0x20003908

0800f3b4 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b08e      	sub	sp, #56	; 0x38
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f3be:	f3ef 8310 	mrs	r3, PRIMASK
 800f3c2:	623b      	str	r3, [r7, #32]
    return(posture);
 800f3c4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f3c6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f3c8:	b672      	cpsid	i
    return(int_posture);
 800f3ca:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800f3cc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3d2:	4a33      	ldr	r2, [pc, #204]	; (800f4a0 <_tx_mutex_cleanup+0xec>)
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	d158      	bne.n	800f48a <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f3de:	683a      	ldr	r2, [r7, #0]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d152      	bne.n	800f48a <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3e8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800f3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d04c      	beq.n	800f48a <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800f3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4a2b      	ldr	r2, [pc, #172]	; (800f4a4 <_tx_mutex_cleanup+0xf0>)
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d147      	bne.n	800f48a <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800f3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fc:	69db      	ldr	r3, [r3, #28]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d043      	beq.n	800f48a <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2200      	movs	r2, #0
 800f406:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800f408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40a:	69db      	ldr	r3, [r3, #28]
 800f40c:	1e5a      	subs	r2, r3, #1
 800f40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f410:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f414:	69db      	ldr	r3, [r3, #28]
 800f416:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800f418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d103      	bne.n	800f426 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800f41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f420:	2200      	movs	r2, #0
 800f422:	619a      	str	r2, [r3, #24]
 800f424:	e013      	b.n	800f44e <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f42a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f430:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800f432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f436:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800f438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f43c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800f43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f440:	699b      	ldr	r3, [r3, #24]
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	429a      	cmp	r2, r3
 800f446:	d102      	bne.n	800f44e <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800f448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f44c:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f452:	2b0d      	cmp	r3, #13
 800f454:	d119      	bne.n	800f48a <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	221d      	movs	r2, #29
 800f45a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800f45e:	4b12      	ldr	r3, [pc, #72]	; (800f4a8 <_tx_mutex_cleanup+0xf4>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	3301      	adds	r3, #1
 800f464:	4a10      	ldr	r2, [pc, #64]	; (800f4a8 <_tx_mutex_cleanup+0xf4>)
 800f466:	6013      	str	r3, [r2, #0]
 800f468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f46a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	f383 8810 	msr	PRIMASK, r3
}
 800f472:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f001 faf5 	bl	8010a64 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f47a:	f3ef 8310 	mrs	r3, PRIMASK
 800f47e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f480:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f482:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f484:	b672      	cpsid	i
    return(int_posture);
 800f486:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800f488:	637b      	str	r3, [r7, #52]	; 0x34
 800f48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f48c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	f383 8810 	msr	PRIMASK, r3
}
 800f494:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800f496:	bf00      	nop
 800f498:	3738      	adds	r7, #56	; 0x38
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	0800f3b5 	.word	0x0800f3b5
 800f4a4:	4d555445 	.word	0x4d555445
 800f4a8:	200039a8 	.word	0x200039a8

0800f4ac <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b08a      	sub	sp, #40	; 0x28
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f4b4:	f3ef 8310 	mrs	r3, PRIMASK
 800f4b8:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f4ba:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f4bc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f4be:	b672      	cpsid	i
    return(int_posture);
 800f4c0:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800f4c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f4c4:	4b1a      	ldr	r3, [pc, #104]	; (800f530 <_tx_mutex_thread_release+0x84>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	4a19      	ldr	r2, [pc, #100]	; (800f530 <_tx_mutex_thread_release+0x84>)
 800f4cc:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f4d4:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800f4d6:	6a3b      	ldr	r3, [r7, #32]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d017      	beq.n	800f50c <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f4dc:	6a3b      	ldr	r3, [r7, #32]
 800f4de:	2201      	movs	r2, #1
 800f4e0:	609a      	str	r2, [r3, #8]
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f383 8810 	msr	PRIMASK, r3
}
 800f4ec:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800f4ee:	6a38      	ldr	r0, [r7, #32]
 800f4f0:	f000 fb9c 	bl	800fc2c <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f4f4:	f3ef 8310 	mrs	r3, PRIMASK
 800f4f8:	617b      	str	r3, [r7, #20]
    return(posture);
 800f4fa:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f4fc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f4fe:	b672      	cpsid	i
    return(int_posture);
 800f500:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800f502:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f50a:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 800f50c:	6a3b      	ldr	r3, [r7, #32]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d1dd      	bne.n	800f4ce <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800f512:	4b07      	ldr	r3, [pc, #28]	; (800f530 <_tx_mutex_thread_release+0x84>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	3b01      	subs	r3, #1
 800f518:	4a05      	ldr	r2, [pc, #20]	; (800f530 <_tx_mutex_thread_release+0x84>)
 800f51a:	6013      	str	r3, [r2, #0]
 800f51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	f383 8810 	msr	PRIMASK, r3
}
 800f526:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 800f528:	bf00      	nop
 800f52a:	3728      	adds	r7, #40	; 0x28
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	200039a8 	.word	0x200039a8

0800f534 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b08a      	sub	sp, #40	; 0x28
 800f538:	af00      	add	r7, sp, #0
 800f53a:	60f8      	str	r0, [r7, #12]
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800f540:	2234      	movs	r2, #52	; 0x34
 800f542:	2100      	movs	r1, #0
 800f544:	68f8      	ldr	r0, [r7, #12]
 800f546:	f007 fbe9 	bl	8016d1c <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	68ba      	ldr	r2, [r7, #8]
 800f54e:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f556:	f3ef 8310 	mrs	r3, PRIMASK
 800f55a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f55c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f55e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f560:	b672      	cpsid	i
    return(int_posture);
 800f562:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800f564:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	4a1a      	ldr	r2, [pc, #104]	; (800f5d4 <_tx_mutex_create+0xa0>)
 800f56a:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800f56c:	4b1a      	ldr	r3, [pc, #104]	; (800f5d8 <_tx_mutex_create+0xa4>)
 800f56e:	4a1b      	ldr	r2, [pc, #108]	; (800f5dc <_tx_mutex_create+0xa8>)
 800f570:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800f572:	4b1b      	ldr	r3, [pc, #108]	; (800f5e0 <_tx_mutex_create+0xac>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d109      	bne.n	800f58e <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800f57a:	4a1a      	ldr	r2, [pc, #104]	; (800f5e4 <_tx_mutex_create+0xb0>)
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	68fa      	ldr	r2, [r7, #12]
 800f584:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	625a      	str	r2, [r3, #36]	; 0x24
 800f58c:	e011      	b.n	800f5b2 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800f58e:	4b15      	ldr	r3, [pc, #84]	; (800f5e4 <_tx_mutex_create+0xb0>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800f594:	6a3b      	ldr	r3, [r7, #32]
 800f596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f598:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800f59a:	6a3b      	ldr	r3, [r7, #32]
 800f59c:	68fa      	ldr	r2, [r7, #12]
 800f59e:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	68fa      	ldr	r2, [r7, #12]
 800f5a4:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	69fa      	ldr	r2, [r7, #28]
 800f5aa:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6a3a      	ldr	r2, [r7, #32]
 800f5b0:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800f5b2:	4b0b      	ldr	r3, [pc, #44]	; (800f5e0 <_tx_mutex_create+0xac>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	4a09      	ldr	r2, [pc, #36]	; (800f5e0 <_tx_mutex_create+0xac>)
 800f5ba:	6013      	str	r3, [r2, #0]
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	f383 8810 	msr	PRIMASK, r3
}
 800f5c6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f5c8:	2300      	movs	r3, #0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3728      	adds	r7, #40	; 0x28
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	4d555445 	.word	0x4d555445
 800f5d8:	200039ac 	.word	0x200039ac
 800f5dc:	0800f4ad 	.word	0x0800f4ad
 800f5e0:	200038f4 	.word	0x200038f4
 800f5e4:	200038f0 	.word	0x200038f0

0800f5e8 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b096      	sub	sp, #88	; 0x58
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f5f0:	f3ef 8310 	mrs	r3, PRIMASK
 800f5f4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800f5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800f5f8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800f5fa:	b672      	cpsid	i
    return(int_posture);
 800f5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 800f5fe:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800f606:	4b4a      	ldr	r3, [pc, #296]	; (800f730 <_tx_mutex_delete+0x148>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	3b01      	subs	r3, #1
 800f60c:	4a48      	ldr	r2, [pc, #288]	; (800f730 <_tx_mutex_delete+0x148>)
 800f60e:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800f610:	4b47      	ldr	r3, [pc, #284]	; (800f730 <_tx_mutex_delete+0x148>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d103      	bne.n	800f620 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 800f618:	4b46      	ldr	r3, [pc, #280]	; (800f734 <_tx_mutex_delete+0x14c>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	601a      	str	r2, [r3, #0]
 800f61e:	e013      	b.n	800f648 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6a1b      	ldr	r3, [r3, #32]
 800f624:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f62a:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 800f62c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f62e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f630:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800f632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f636:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 800f638:	4b3e      	ldr	r3, [pc, #248]	; (800f734 <_tx_mutex_delete+0x14c>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d102      	bne.n	800f648 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 800f642:	4a3c      	ldr	r2, [pc, #240]	; (800f734 <_tx_mutex_delete+0x14c>)
 800f644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f646:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f648:	4b3b      	ldr	r3, [pc, #236]	; (800f738 <_tx_mutex_delete+0x150>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	3301      	adds	r3, #1
 800f64e:	4a3a      	ldr	r2, [pc, #232]	; (800f738 <_tx_mutex_delete+0x150>)
 800f650:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	699b      	ldr	r3, [r3, #24]
 800f656:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2200      	movs	r2, #0
 800f65c:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	69db      	ldr	r3, [r3, #28]
 800f662:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2200      	movs	r2, #0
 800f668:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 800f670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f672:	2b00      	cmp	r3, #0
 800f674:	d013      	beq.n	800f69e <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2201      	movs	r2, #1
 800f67a:	609a      	str	r2, [r3, #8]
 800f67c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f67e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f682:	f383 8810 	msr	PRIMASK, r3
}
 800f686:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 facf 	bl	800fc2c <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f68e:	f3ef 8310 	mrs	r3, PRIMASK
 800f692:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800f694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800f696:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800f698:	b672      	cpsid	i
    return(int_posture);
 800f69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 800f69c:	657b      	str	r3, [r7, #84]	; 0x54
 800f69e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6a0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a4:	f383 8810 	msr	PRIMASK, r3
}
 800f6a8:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 800f6aa:	e024      	b.n	800f6f6 <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800f6ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f6b2:	f3ef 8310 	mrs	r3, PRIMASK
 800f6b6:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f6b8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f6ba:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f6bc:	b672      	cpsid	i
    return(int_posture);
 800f6be:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 800f6c0:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800f6c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800f6d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800f6d6:	4b18      	ldr	r3, [pc, #96]	; (800f738 <_tx_mutex_delete+0x150>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	4a16      	ldr	r2, [pc, #88]	; (800f738 <_tx_mutex_delete+0x150>)
 800f6de:	6013      	str	r3, [r2, #0]
 800f6e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f6e4:	6a3b      	ldr	r3, [r7, #32]
 800f6e6:	f383 8810 	msr	PRIMASK, r3
}
 800f6ea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800f6ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f6ee:	f001 f9b9 	bl	8010a64 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800f6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6f4:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 800f6f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1d7      	bne.n	800f6ac <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f6fc:	f3ef 8310 	mrs	r3, PRIMASK
 800f700:	613b      	str	r3, [r7, #16]
    return(posture);
 800f702:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800f704:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f706:	b672      	cpsid	i
    return(int_posture);
 800f708:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800f70a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800f70c:	4b0a      	ldr	r3, [pc, #40]	; (800f738 <_tx_mutex_delete+0x150>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	3b01      	subs	r3, #1
 800f712:	4a09      	ldr	r2, [pc, #36]	; (800f738 <_tx_mutex_delete+0x150>)
 800f714:	6013      	str	r3, [r2, #0]
 800f716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f718:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	f383 8810 	msr	PRIMASK, r3
}
 800f720:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800f722:	f001 f965 	bl	80109f0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f726:	2300      	movs	r3, #0
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3758      	adds	r7, #88	; 0x58
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	200038f4 	.word	0x200038f4
 800f734:	200038f0 	.word	0x200038f0
 800f738:	200039a8 	.word	0x200039a8

0800f73c <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b092      	sub	sp, #72	; 0x48
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f746:	f3ef 8310 	mrs	r3, PRIMASK
 800f74a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800f74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800f74e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f750:	b672      	cpsid	i
    return(int_posture);
 800f752:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800f754:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800f756:	4b7a      	ldr	r3, [pc, #488]	; (800f940 <_tx_mutex_get+0x204>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	689b      	ldr	r3, [r3, #8]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d144      	bne.n	800f7ee <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2201      	movs	r2, #1
 800f768:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f76e:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800f770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f772:	2b00      	cmp	r3, #0
 800f774:	d032      	beq.n	800f7dc <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	691b      	ldr	r3, [r3, #16]
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	d106      	bne.n	800f78c <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800f77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2220      	movs	r2, #32
 800f78a:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800f78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f78e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f792:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800f794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f796:	2b00      	cmp	r3, #0
 800f798:	d00f      	beq.n	800f7ba <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800f79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f79e:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800f7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a2:	687a      	ldr	r2, [r7, #4]
 800f7a4:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800f7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a8:	687a      	ldr	r2, [r7, #4]
 800f7aa:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7b0:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7b6:	62da      	str	r2, [r3, #44]	; 0x2c
 800f7b8:	e009      	b.n	800f7ce <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800f7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	687a      	ldr	r2, [r7, #4]
 800f7c6:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800f7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f7d4:	1c5a      	adds	r2, r3, #1
 800f7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800f7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	f383 8810 	msr	PRIMASK, r3
}
 800f7e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	647b      	str	r3, [r7, #68]	; 0x44
 800f7ec:	e0a2      	b.n	800f934 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d10d      	bne.n	800f814 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	689b      	ldr	r3, [r3, #8]
 800f7fc:	1c5a      	adds	r2, r3, #1
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	609a      	str	r2, [r3, #8]
 800f802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f804:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f806:	69bb      	ldr	r3, [r7, #24]
 800f808:	f383 8810 	msr	PRIMASK, r3
}
 800f80c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800f80e:	2300      	movs	r3, #0
 800f810:	647b      	str	r3, [r7, #68]	; 0x44
 800f812:	e08f      	b.n	800f934 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	f000 8084 	beq.w	800f924 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800f81c:	4b49      	ldr	r3, [pc, #292]	; (800f944 <_tx_mutex_get+0x208>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d008      	beq.n	800f836 <_tx_mutex_get+0xfa>
 800f824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f826:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	f383 8810 	msr	PRIMASK, r3
}
 800f82e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800f830:	231d      	movs	r3, #29
 800f832:	647b      	str	r3, [r7, #68]	; 0x44
 800f834:	e07e      	b.n	800f934 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800f83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f83e:	4a42      	ldr	r2, [pc, #264]	; (800f948 <_tx_mutex_get+0x20c>)
 800f840:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800f842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800f848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f84a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f84e:	1c5a      	adds	r2, r3, #1
 800f850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f852:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	69db      	ldr	r3, [r3, #28]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d109      	bne.n	800f872 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f862:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800f864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f868:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800f86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f86c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f86e:	675a      	str	r2, [r3, #116]	; 0x74
 800f870:	e011      	b.n	800f896 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	699b      	ldr	r3, [r3, #24]
 800f876:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800f878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f87a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f87c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800f87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f882:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800f884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f888:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800f88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f88c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f88e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800f890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f892:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f894:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	69db      	ldr	r3, [r3, #28]
 800f89a:	1c5a      	adds	r2, r3, #1
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800f8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a2:	220d      	movs	r2, #13
 800f8a4:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800f8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ae:	683a      	ldr	r2, [r7, #0]
 800f8b0:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800f8b2:	4b24      	ldr	r3, [pc, #144]	; (800f944 <_tx_mutex_get+0x208>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	4a22      	ldr	r2, [pc, #136]	; (800f944 <_tx_mutex_get+0x208>)
 800f8ba:	6013      	str	r3, [r2, #0]
 800f8bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	f383 8810 	msr	PRIMASK, r3
}
 800f8c6:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	691b      	ldr	r3, [r3, #16]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d121      	bne.n	800f914 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d903      	bls.n	800f8e4 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800f8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800f8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d204      	bcs.n	800f8fc <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800f8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800f8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f904:	429a      	cmp	r2, r3
 800f906:	d905      	bls.n	800f914 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800f908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f90c:	4619      	mov	r1, r3
 800f90e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f910:	f000 f8ce 	bl	800fab0 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800f914:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f916:	f001 f9a5 	bl	8010c64 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800f91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f91c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f920:	647b      	str	r3, [r7, #68]	; 0x44
 800f922:	e007      	b.n	800f934 <_tx_mutex_get+0x1f8>
 800f924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f926:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f383 8810 	msr	PRIMASK, r3
}
 800f92e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800f930:	231d      	movs	r3, #29
 800f932:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800f934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f936:	4618      	mov	r0, r3
 800f938:	3748      	adds	r7, #72	; 0x48
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	20003910 	.word	0x20003910
 800f944:	200039a8 	.word	0x200039a8
 800f948:	0800f3b5 	.word	0x0800f3b5

0800f94c <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b092      	sub	sp, #72	; 0x48
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f954:	f3ef 8310 	mrs	r3, PRIMASK
 800f958:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800f95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800f95c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f95e:	b672      	cpsid	i
    return(int_posture);
 800f960:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800f962:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	69db      	ldr	r3, [r3, #28]
 800f968:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800f96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d805      	bhi.n	800f97c <_tx_mutex_prioritize+0x30>
 800f970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f972:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	f383 8810 	msr	PRIMASK, r3
}
 800f97a:	e092      	b.n	800faa2 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800f97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f97e:	2b02      	cmp	r3, #2
 800f980:	d114      	bne.n	800f9ac <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	699b      	ldr	r3, [r3, #24]
 800f986:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800f988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f98c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800f98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f996:	429a      	cmp	r2, r3
 800f998:	d202      	bcs.n	800f9a0 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f99e:	619a      	str	r2, [r3, #24]
 800f9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f9a4:	69bb      	ldr	r3, [r7, #24]
 800f9a6:	f383 8810 	msr	PRIMASK, r3
}
 800f9aa:	e07a      	b.n	800faa2 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	699b      	ldr	r3, [r3, #24]
 800f9b0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800f9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800f9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ba:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800f9bc:	4b3b      	ldr	r3, [pc, #236]	; (800faac <_tx_mutex_prioritize+0x160>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	4a3a      	ldr	r2, [pc, #232]	; (800faac <_tx_mutex_prioritize+0x160>)
 800f9c4:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800f9ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d201      	bcs.n	800f9da <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800f9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9dc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f383 8810 	msr	PRIMASK, r3
}
 800f9e4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f9e6:	f3ef 8310 	mrs	r3, PRIMASK
 800f9ea:	617b      	str	r3, [r7, #20]
    return(posture);
 800f9ec:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f9ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f9f0:	b672      	cpsid	i
    return(int_posture);
 800f9f2:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800f9f4:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	699b      	ldr	r3, [r3, #24]
 800f9fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d002      	beq.n	800fa06 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800fa00:	2301      	movs	r3, #1
 800fa02:	633b      	str	r3, [r7, #48]	; 0x30
 800fa04:	e006      	b.n	800fa14 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	69db      	ldr	r3, [r3, #28]
 800fa0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d001      	beq.n	800fa14 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800fa10:	2301      	movs	r3, #1
 800fa12:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800fa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d103      	bne.n	800fa22 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800fa1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa1e:	643b      	str	r3, [r7, #64]	; 0x40
 800fa20:	e00c      	b.n	800fa3c <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	699b      	ldr	r3, [r3, #24]
 800fa26:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	69db      	ldr	r3, [r3, #28]
 800fa2c:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800fa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa30:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800fa32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa36:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 800fa3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d1c2      	bne.n	800f9ca <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800fa44:	4b19      	ldr	r3, [pc, #100]	; (800faac <_tx_mutex_prioritize+0x160>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	4a18      	ldr	r2, [pc, #96]	; (800faac <_tx_mutex_prioritize+0x160>)
 800fa4c:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800fa4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d01d      	beq.n	800fa92 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800fa56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa5a:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800fa5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa60:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800fa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa66:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800fa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa6c:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa72:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800fa74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa78:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800fa7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa7e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800fa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa84:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800fa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa8a:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa90:	619a      	str	r2, [r3, #24]
 800fa92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa94:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	f383 8810 	msr	PRIMASK, r3
}
 800fa9c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800fa9e:	f000 ffa7 	bl	80109f0 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800faa2:	2300      	movs	r3, #0
#endif
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3748      	adds	r7, #72	; 0x48
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	200039a8 	.word	0x200039a8

0800fab0 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b090      	sub	sp, #64	; 0x40
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800faba:	f3ef 8310 	mrs	r3, PRIMASK
 800fabe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800fac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800fac2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800fac4:	b672      	cpsid	i
    return(int_posture);
 800fac6:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800fac8:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800face:	2b00      	cmp	r3, #0
 800fad0:	d017      	beq.n	800fb02 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	683a      	ldr	r2, [r7, #0]
 800fad6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fade:	683a      	ldr	r2, [r7, #0]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d905      	bls.n	800faf0 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	63da      	str	r2, [r3, #60]	; 0x3c
 800faee:	e002      	b.n	800faf6 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	683a      	ldr	r2, [r7, #0]
 800faf4:	63da      	str	r2, [r3, #60]	; 0x3c
 800faf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafc:	f383 8810 	msr	PRIMASK, r3
}
 800fb00:	e089      	b.n	800fc16 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800fb02:	4b47      	ldr	r3, [pc, #284]	; (800fc20 <_tx_mutex_priority_change+0x170>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb0c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800fb0e:	4b45      	ldr	r3, [pc, #276]	; (800fc24 <_tx_mutex_priority_change+0x174>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	3302      	adds	r3, #2
 800fb14:	4a43      	ldr	r2, [pc, #268]	; (800fc24 <_tx_mutex_priority_change+0x174>)
 800fb16:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	220e      	movs	r2, #14
 800fb1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2201      	movs	r2, #1
 800fb22:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2200      	movs	r2, #0
 800fb28:	64da      	str	r2, [r3, #76]	; 0x4c
 800fb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb2c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fb2e:	69bb      	ldr	r3, [r7, #24]
 800fb30:	f383 8810 	msr	PRIMASK, r3
}
 800fb34:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f001 f894 	bl	8010c64 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fb3c:	f3ef 8310 	mrs	r3, PRIMASK
 800fb40:	623b      	str	r3, [r7, #32]
    return(posture);
 800fb42:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800fb44:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fb46:	b672      	cpsid	i
    return(int_posture);
 800fb48:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800fb4a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	683a      	ldr	r2, [r7, #0]
 800fb50:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fb58:	683a      	ldr	r2, [r7, #0]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d905      	bls.n	800fb6a <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	63da      	str	r2, [r3, #60]	; 0x3c
 800fb68:	e002      	b.n	800fb70 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	683a      	ldr	r2, [r7, #0]
 800fb6e:	63da      	str	r2, [r3, #60]	; 0x3c
 800fb70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb72:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f383 8810 	msr	PRIMASK, r3
}
 800fb7a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 ff71 	bl	8010a64 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fb82:	f3ef 8310 	mrs	r3, PRIMASK
 800fb86:	617b      	str	r3, [r7, #20]
    return(posture);
 800fb88:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800fb8a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fb8c:	b672      	cpsid	i
    return(int_posture);
 800fb8e:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800fb90:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800fb92:	4b23      	ldr	r3, [pc, #140]	; (800fc20 <_tx_mutex_priority_change+0x170>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800fb98:	687a      	ldr	r2, [r7, #4]
 800fb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d034      	beq.n	800fc0a <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d130      	bne.n	800fc0a <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d811      	bhi.n	800fbd8 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d126      	bne.n	800fc0a <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800fbbc:	4a18      	ldr	r2, [pc, #96]	; (800fc20 <_tx_mutex_priority_change+0x170>)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800fbc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d21f      	bcs.n	800fc0a <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbce:	4916      	ldr	r1, [pc, #88]	; (800fc28 <_tx_mutex_priority_change+0x178>)
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fbd6:	e018      	b.n	800fc0a <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d212      	bcs.n	800fc0a <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d80c      	bhi.n	800fc0a <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800fbf0:	4a0b      	ldr	r2, [pc, #44]	; (800fc20 <_tx_mutex_priority_change+0x170>)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800fbf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d205      	bcs.n	800fc0a <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc02:	4909      	ldr	r1, [pc, #36]	; (800fc28 <_tx_mutex_priority_change+0x178>)
 800fc04:	687a      	ldr	r2, [r7, #4]
 800fc06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc0c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	f383 8810 	msr	PRIMASK, r3
}
 800fc14:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800fc16:	bf00      	nop
 800fc18:	3740      	adds	r7, #64	; 0x40
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	20003914 	.word	0x20003914
 800fc24:	200039a8 	.word	0x200039a8
 800fc28:	20003928 	.word	0x20003928

0800fc2c <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b0a6      	sub	sp, #152	; 0x98
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800fc34:	2320      	movs	r3, #32
 800fc36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fc3a:	f3ef 8310 	mrs	r3, PRIMASK
 800fc3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 800fc40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800fc42:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800fc44:	b672      	cpsid	i
    return(int_posture);
 800fc46:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800fc48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	689b      	ldr	r3, [r3, #8]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	f000 81ff 	beq.w	8010054 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800fc5c:	4ba3      	ldr	r3, [pc, #652]	; (800feec <_tx_mutex_put+0x2c0>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d00d      	beq.n	800fc88 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800fc6c:	4ba0      	ldr	r3, [pc, #640]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d109      	bne.n	800fc88 <_tx_mutex_put+0x5c>
 800fc74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc78:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc7c:	f383 8810 	msr	PRIMASK, r3
}
 800fc80:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800fc82:	231e      	movs	r3, #30
 800fc84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800fc88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc8c:	2b20      	cmp	r3, #32
 800fc8e:	f040 81eb 	bne.w	8010068 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	689b      	ldr	r3, [r3, #8]
 800fc96:	1e5a      	subs	r2, r3, #1
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d00a      	beq.n	800fcba <_tx_mutex_put+0x8e>
 800fca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fca8:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fcaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcac:	f383 8810 	msr	PRIMASK, r3
}
 800fcb0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fcb8:	e1d6      	b.n	8010068 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800fcba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d10a      	bne.n	800fcd6 <_tx_mutex_put+0xaa>
 800fcc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fcc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fcc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcc8:	f383 8810 	msr	PRIMASK, r3
}
 800fccc:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fcd4:	e1c8      	b.n	8010068 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800fcd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fcd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fcdc:	1e5a      	subs	r2, r3, #1
 800fcde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fce0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800fce4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d104      	bne.n	800fcf8 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800fcee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800fcf6:	e019      	b.n	800fd2c <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd04:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800fd06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fd0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fd0c:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800fd0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fd14:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800fd16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d104      	bne.n	800fd2c <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800fd22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fd28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	699b      	ldr	r3, [r3, #24]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d110      	bne.n	800fd56 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	691b      	ldr	r3, [r3, #16]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d10c      	bne.n	800fd56 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	60da      	str	r2, [r3, #12]
 800fd42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fd46:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd4a:	f383 8810 	msr	PRIMASK, r3
}
 800fd4e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800fd50:	2300      	movs	r3, #0
 800fd52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800fd56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd5a:	2b20      	cmp	r3, #32
 800fd5c:	f040 8184 	bne.w	8010068 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800fd60:	2300      	movs	r3, #0
 800fd62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800fd66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fd6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	691b      	ldr	r3, [r3, #16]
 800fd74:	2b01      	cmp	r3, #1
 800fd76:	d155      	bne.n	800fe24 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fd78:	4b5d      	ldr	r3, [pc, #372]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	3301      	adds	r3, #1
 800fd7e:	4a5c      	ldr	r2, [pc, #368]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800fd80:	6013      	str	r3, [r2, #0]
 800fd82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fd86:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd8a:	f383 8810 	msr	PRIMASK, r3
}
 800fd8e:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800fd90:	2320      	movs	r3, #32
 800fd92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800fd96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fd9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800fda0:	e01f      	b.n	800fde2 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800fda2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fda6:	691b      	ldr	r3, [r3, #16]
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d10b      	bne.n	800fdc4 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800fdac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d904      	bls.n	800fdc4 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800fdba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800fdc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800fdce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fdd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fdd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d102      	bne.n	800fde2 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800fddc:	2300      	movs	r3, #0
 800fdde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800fde2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d1db      	bne.n	800fda2 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fdea:	f3ef 8310 	mrs	r3, PRIMASK
 800fdee:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800fdf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800fdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800fdf4:	b672      	cpsid	i
    return(int_posture);
 800fdf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800fdf8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800fdfc:	4b3c      	ldr	r3, [pc, #240]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	3b01      	subs	r3, #1
 800fe02:	4a3b      	ldr	r2, [pc, #236]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800fe04:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800fe06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fe0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800fe10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fe14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d203      	bcs.n	800fe24 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800fe1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	69db      	ldr	r3, [r3, #28]
 800fe28:	2b01      	cmp	r3, #1
 800fe2a:	d920      	bls.n	800fe6e <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	691b      	ldr	r3, [r3, #16]
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d11c      	bne.n	800fe6e <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800fe34:	4b2e      	ldr	r3, [pc, #184]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	4a2d      	ldr	r2, [pc, #180]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800fe3c:	6013      	str	r3, [r2, #0]
 800fe3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe42:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fe44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe46:	f383 8810 	msr	PRIMASK, r3
}
 800fe4a:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f7ff fd7d 	bl	800f94c <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fe52:	f3ef 8310 	mrs	r3, PRIMASK
 800fe56:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800fe58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800fe5a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800fe5c:	b672      	cpsid	i
    return(int_posture);
 800fe5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800fe60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800fe64:	4b22      	ldr	r3, [pc, #136]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	3b01      	subs	r3, #1
 800fe6a:	4a21      	ldr	r2, [pc, #132]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800fe6c:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	699b      	ldr	r3, [r3, #24]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d13e      	bne.n	800fef4 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fe76:	4b1e      	ldr	r3, [pc, #120]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	4a1c      	ldr	r2, [pc, #112]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800fe7e:	6013      	str	r3, [r2, #0]
 800fe80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe84:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fe86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe88:	f383 8810 	msr	PRIMASK, r3
}
 800fe8c:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2220      	movs	r2, #32
 800fe92:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	68db      	ldr	r3, [r3, #12]
 800fe98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe9a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d006      	beq.n	800feb0 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	68db      	ldr	r3, [r3, #12]
 800fea6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800feaa:	4618      	mov	r0, r3
 800feac:	f7ff fe00 	bl	800fab0 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800feb0:	f3ef 8310 	mrs	r3, PRIMASK
 800feb4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800feb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800feb8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800feba:	b672      	cpsid	i
    return(int_posture);
 800febc:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800febe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800fec2:	4b0b      	ldr	r3, [pc, #44]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	3b01      	subs	r3, #1
 800fec8:	4a09      	ldr	r2, [pc, #36]	; (800fef0 <_tx_mutex_put+0x2c4>)
 800feca:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2200      	movs	r2, #0
 800fed0:	60da      	str	r2, [r3, #12]
 800fed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fed6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feda:	f383 8810 	msr	PRIMASK, r3
}
 800fede:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800fee0:	f000 fd86 	bl	80109f0 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800fee4:	2300      	movs	r3, #0
 800fee6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800feea:	e0bd      	b.n	8010068 <_tx_mutex_put+0x43c>
 800feec:	20003910 	.word	0x20003910
 800fef0:	200039a8 	.word	0x200039a8
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	699b      	ldr	r3, [r3, #24]
 800fef8:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	691b      	ldr	r3, [r3, #16]
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d10a      	bne.n	800ff18 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	68db      	ldr	r3, [r3, #12]
 800ff06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800ff0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2220      	movs	r2, #32
 800ff16:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800ff18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ff1e:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800ff20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d10a      	bne.n	800ff3c <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800ff26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff28:	687a      	ldr	r2, [r7, #4]
 800ff2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	631a      	str	r2, [r3, #48]	; 0x30
 800ff3a:	e016      	b.n	800ff6a <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800ff3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ff42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800ff46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff4c:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800ff4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff52:	687a      	ldr	r2, [r7, #4]
 800ff54:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800ff56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ff60:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ff68:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800ff6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ff6c:	1c5a      	adds	r2, r3, #1
 800ff6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2201      	movs	r2, #1
 800ff78:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ff7e:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	69db      	ldr	r3, [r3, #28]
 800ff84:	1e5a      	subs	r2, r3, #1
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	69db      	ldr	r3, [r3, #28]
 800ff8e:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800ff90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d103      	bne.n	800ff9e <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	619a      	str	r2, [r3, #24]
 800ff9c:	e00e      	b.n	800ffbc <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800ff9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ffa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffa2:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ffa8:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800ffaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ffac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffae:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800ffb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ffb4:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800ffb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ffba:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ffbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ffc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ffca:	4b2a      	ldr	r3, [pc, #168]	; (8010074 <_tx_mutex_put+0x448>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	3301      	adds	r3, #1
 800ffd0:	4a28      	ldr	r2, [pc, #160]	; (8010074 <_tx_mutex_put+0x448>)
 800ffd2:	6013      	str	r3, [r2, #0]
 800ffd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffd8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	f383 8810 	msr	PRIMASK, r3
}
 800ffe0:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	691b      	ldr	r3, [r3, #16]
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d12d      	bne.n	8010046 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	69db      	ldr	r3, [r3, #28]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d01c      	beq.n	801002c <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f7ff fcaa 	bl	800f94c <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fff8:	f3ef 8310 	mrs	r3, PRIMASK
 800fffc:	61bb      	str	r3, [r7, #24]
    return(posture);
 800fffe:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010000:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010002:	b672      	cpsid	i
    return(int_posture);
 8010004:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8010006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	699b      	ldr	r3, [r3, #24]
 801000e:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8010010:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010012:	2b00      	cmp	r3, #0
 8010014:	d003      	beq.n	801001e <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8010016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	629a      	str	r2, [r3, #40]	; 0x28
 801001e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010022:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	f383 8810 	msr	PRIMASK, r3
}
 801002a:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 801002c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010032:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010036:	429a      	cmp	r2, r3
 8010038:	d005      	beq.n	8010046 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 801003a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801003e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8010042:	f7ff fd35 	bl	800fab0 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8010046:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010048:	f000 fd0c 	bl	8010a64 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 801004c:	2300      	movs	r3, #0
 801004e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010052:	e009      	b.n	8010068 <_tx_mutex_put+0x43c>
 8010054:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010058:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f383 8810 	msr	PRIMASK, r3
}
 8010060:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8010062:	231e      	movs	r3, #30
 8010064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 8010068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 801006c:	4618      	mov	r0, r3
 801006e:	3798      	adds	r7, #152	; 0x98
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}
 8010074:	200039a8 	.word	0x200039a8

08010078 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b08e      	sub	sp, #56	; 0x38
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010082:	f3ef 8310 	mrs	r3, PRIMASK
 8010086:	623b      	str	r3, [r7, #32]
    return(posture);
 8010088:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801008a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801008c:	b672      	cpsid	i
    return(int_posture);
 801008e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8010090:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010096:	4a33      	ldr	r2, [pc, #204]	; (8010164 <_tx_semaphore_cleanup+0xec>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d158      	bne.n	801014e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80100a2:	683a      	ldr	r2, [r7, #0]
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d152      	bne.n	801014e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100ac:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80100ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d04c      	beq.n	801014e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80100b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4a2b      	ldr	r2, [pc, #172]	; (8010168 <_tx_semaphore_cleanup+0xf0>)
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d147      	bne.n	801014e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80100be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c0:	691b      	ldr	r3, [r3, #16]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d043      	beq.n	801014e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80100cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ce:	691b      	ldr	r3, [r3, #16]
 80100d0:	1e5a      	subs	r2, r3, #1
 80100d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d4:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80100d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d8:	691b      	ldr	r3, [r3, #16]
 80100da:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80100dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d103      	bne.n	80100ea <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80100e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e4:	2200      	movs	r2, #0
 80100e6:	60da      	str	r2, [r3, #12]
 80100e8:	e013      	b.n	8010112 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100ee:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100f4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80100f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100fa:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80100fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010100:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8010102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	687a      	ldr	r2, [r7, #4]
 8010108:	429a      	cmp	r2, r3
 801010a:	d102      	bne.n	8010112 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801010c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010110:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010116:	2b06      	cmp	r3, #6
 8010118:	d119      	bne.n	801014e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	220d      	movs	r2, #13
 801011e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010122:	4b12      	ldr	r3, [pc, #72]	; (801016c <_tx_semaphore_cleanup+0xf4>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	3301      	adds	r3, #1
 8010128:	4a10      	ldr	r2, [pc, #64]	; (801016c <_tx_semaphore_cleanup+0xf4>)
 801012a:	6013      	str	r3, [r2, #0]
 801012c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	f383 8810 	msr	PRIMASK, r3
}
 8010136:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 fc93 	bl	8010a64 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801013e:	f3ef 8310 	mrs	r3, PRIMASK
 8010142:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010144:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010146:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010148:	b672      	cpsid	i
    return(int_posture);
 801014a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801014c:	637b      	str	r3, [r7, #52]	; 0x34
 801014e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010150:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f383 8810 	msr	PRIMASK, r3
}
 8010158:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801015a:	bf00      	nop
 801015c:	3738      	adds	r7, #56	; 0x38
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	08010079 	.word	0x08010079
 8010168:	53454d41 	.word	0x53454d41
 801016c:	200039a8 	.word	0x200039a8

08010170 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b08a      	sub	sp, #40	; 0x28
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 801017c:	221c      	movs	r2, #28
 801017e:	2100      	movs	r1, #0
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f006 fdcb 	bl	8016d1c <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	68ba      	ldr	r2, [r7, #8]
 801018a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010192:	f3ef 8310 	mrs	r3, PRIMASK
 8010196:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010198:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801019a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801019c:	b672      	cpsid	i
    return(int_posture);
 801019e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80101a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	4a18      	ldr	r2, [pc, #96]	; (8010208 <_tx_semaphore_create+0x98>)
 80101a6:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80101a8:	4b18      	ldr	r3, [pc, #96]	; (801020c <_tx_semaphore_create+0x9c>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d109      	bne.n	80101c4 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80101b0:	4a17      	ldr	r2, [pc, #92]	; (8010210 <_tx_semaphore_create+0xa0>)
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	68fa      	ldr	r2, [r7, #12]
 80101ba:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	619a      	str	r2, [r3, #24]
 80101c2:	e011      	b.n	80101e8 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80101c4:	4b12      	ldr	r3, [pc, #72]	; (8010210 <_tx_semaphore_create+0xa0>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80101ca:	6a3b      	ldr	r3, [r7, #32]
 80101cc:	699b      	ldr	r3, [r3, #24]
 80101ce:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80101d0:	6a3b      	ldr	r3, [r7, #32]
 80101d2:	68fa      	ldr	r2, [r7, #12]
 80101d4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80101d6:	69fb      	ldr	r3, [r7, #28]
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	69fa      	ldr	r2, [r7, #28]
 80101e0:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	6a3a      	ldr	r2, [r7, #32]
 80101e6:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 80101e8:	4b08      	ldr	r3, [pc, #32]	; (801020c <_tx_semaphore_create+0x9c>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	3301      	adds	r3, #1
 80101ee:	4a07      	ldr	r2, [pc, #28]	; (801020c <_tx_semaphore_create+0x9c>)
 80101f0:	6013      	str	r3, [r2, #0]
 80101f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	f383 8810 	msr	PRIMASK, r3
}
 80101fc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80101fe:	2300      	movs	r3, #0
}
 8010200:	4618      	mov	r0, r3
 8010202:	3728      	adds	r7, #40	; 0x28
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	53454d41 	.word	0x53454d41
 801020c:	200038dc 	.word	0x200038dc
 8010210:	200038d8 	.word	0x200038d8

08010214 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b092      	sub	sp, #72	; 0x48
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801021c:	f3ef 8310 	mrs	r3, PRIMASK
 8010220:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8010222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8010224:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8010226:	b672      	cpsid	i
    return(int_posture);
 8010228:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 801022a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2200      	movs	r2, #0
 8010230:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8010232:	4b3d      	ldr	r3, [pc, #244]	; (8010328 <_tx_semaphore_delete+0x114>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	3b01      	subs	r3, #1
 8010238:	4a3b      	ldr	r2, [pc, #236]	; (8010328 <_tx_semaphore_delete+0x114>)
 801023a:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 801023c:	4b3a      	ldr	r3, [pc, #232]	; (8010328 <_tx_semaphore_delete+0x114>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d103      	bne.n	801024c <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8010244:	4b39      	ldr	r3, [pc, #228]	; (801032c <_tx_semaphore_delete+0x118>)
 8010246:	2200      	movs	r2, #0
 8010248:	601a      	str	r2, [r3, #0]
 801024a:	e013      	b.n	8010274 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	695b      	ldr	r3, [r3, #20]
 8010250:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	699b      	ldr	r3, [r3, #24]
 8010256:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8010258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801025c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 801025e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010262:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8010264:	4b31      	ldr	r3, [pc, #196]	; (801032c <_tx_semaphore_delete+0x118>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	429a      	cmp	r2, r3
 801026c:	d102      	bne.n	8010274 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 801026e:	4a2f      	ldr	r2, [pc, #188]	; (801032c <_tx_semaphore_delete+0x118>)
 8010270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010272:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010274:	4b2e      	ldr	r3, [pc, #184]	; (8010330 <_tx_semaphore_delete+0x11c>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	3301      	adds	r3, #1
 801027a:	4a2d      	ldr	r2, [pc, #180]	; (8010330 <_tx_semaphore_delete+0x11c>)
 801027c:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2200      	movs	r2, #0
 8010288:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	691b      	ldr	r3, [r3, #16]
 801028e:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	611a      	str	r2, [r3, #16]
 8010296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010298:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801029a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029c:	f383 8810 	msr	PRIMASK, r3
}
 80102a0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80102a2:	e024      	b.n	80102ee <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80102a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102a6:	3b01      	subs	r3, #1
 80102a8:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80102aa:	f3ef 8310 	mrs	r3, PRIMASK
 80102ae:	61fb      	str	r3, [r7, #28]
    return(posture);
 80102b0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80102b2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80102b4:	b672      	cpsid	i
    return(int_posture);
 80102b6:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 80102b8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80102ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102bc:	2200      	movs	r2, #0
 80102be:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80102c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102c2:	2201      	movs	r2, #1
 80102c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80102c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102cc:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80102ce:	4b18      	ldr	r3, [pc, #96]	; (8010330 <_tx_semaphore_delete+0x11c>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	3301      	adds	r3, #1
 80102d4:	4a16      	ldr	r2, [pc, #88]	; (8010330 <_tx_semaphore_delete+0x11c>)
 80102d6:	6013      	str	r3, [r2, #0]
 80102d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80102dc:	6a3b      	ldr	r3, [r7, #32]
 80102de:	f383 8810 	msr	PRIMASK, r3
}
 80102e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80102e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80102e6:	f000 fbbd 	bl	8010a64 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 80102ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ec:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 80102ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d1d7      	bne.n	80102a4 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80102f4:	f3ef 8310 	mrs	r3, PRIMASK
 80102f8:	613b      	str	r3, [r7, #16]
    return(posture);
 80102fa:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80102fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80102fe:	b672      	cpsid	i
    return(int_posture);
 8010300:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8010302:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8010304:	4b0a      	ldr	r3, [pc, #40]	; (8010330 <_tx_semaphore_delete+0x11c>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	3b01      	subs	r3, #1
 801030a:	4a09      	ldr	r2, [pc, #36]	; (8010330 <_tx_semaphore_delete+0x11c>)
 801030c:	6013      	str	r3, [r2, #0]
 801030e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010310:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	f383 8810 	msr	PRIMASK, r3
}
 8010318:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801031a:	f000 fb69 	bl	80109f0 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801031e:	2300      	movs	r3, #0
}
 8010320:	4618      	mov	r0, r3
 8010322:	3748      	adds	r7, #72	; 0x48
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	200038dc 	.word	0x200038dc
 801032c:	200038d8 	.word	0x200038d8
 8010330:	200039a8 	.word	0x200039a8

08010334 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b08e      	sub	sp, #56	; 0x38
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801033e:	2300      	movs	r3, #0
 8010340:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010342:	f3ef 8310 	mrs	r3, PRIMASK
 8010346:	623b      	str	r3, [r7, #32]
    return(posture);
 8010348:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801034a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801034c:	b672      	cpsid	i
    return(int_posture);
 801034e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8010350:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	689b      	ldr	r3, [r3, #8]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d00a      	beq.n	8010370 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	1e5a      	subs	r2, r3, #1
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	609a      	str	r2, [r3, #8]
 8010364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010366:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010368:	69bb      	ldr	r3, [r7, #24]
 801036a:	f383 8810 	msr	PRIMASK, r3
}
 801036e:	e068      	b.n	8010442 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d05d      	beq.n	8010432 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8010376:	4b35      	ldr	r3, [pc, #212]	; (801044c <_tx_semaphore_get+0x118>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d008      	beq.n	8010390 <_tx_semaphore_get+0x5c>
 801037e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010380:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	f383 8810 	msr	PRIMASK, r3
}
 8010388:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 801038a:	230d      	movs	r3, #13
 801038c:	637b      	str	r3, [r7, #52]	; 0x34
 801038e:	e058      	b.n	8010442 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8010390:	4b2f      	ldr	r3, [pc, #188]	; (8010450 <_tx_semaphore_get+0x11c>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8010396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010398:	4a2e      	ldr	r2, [pc, #184]	; (8010454 <_tx_semaphore_get+0x120>)
 801039a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 801039c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80103a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80103a8:	1c5a      	adds	r2, r3, #1
 80103aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	691b      	ldr	r3, [r3, #16]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d109      	bne.n	80103cc <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103bc:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80103be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103c2:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 80103c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103c8:	675a      	str	r2, [r3, #116]	; 0x74
 80103ca:	e011      	b.n	80103f0 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	68db      	ldr	r3, [r3, #12]
 80103d0:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80103d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103d6:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80103d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103dc:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80103de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103e2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80103e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103e8:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80103ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103ee:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	691b      	ldr	r3, [r3, #16]
 80103f4:	1c5a      	adds	r2, r3, #1
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80103fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fc:	2206      	movs	r2, #6
 80103fe:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010402:	2201      	movs	r2, #1
 8010404:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010408:	683a      	ldr	r2, [r7, #0]
 801040a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801040c:	4b0f      	ldr	r3, [pc, #60]	; (801044c <_tx_semaphore_get+0x118>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	3301      	adds	r3, #1
 8010412:	4a0e      	ldr	r2, [pc, #56]	; (801044c <_tx_semaphore_get+0x118>)
 8010414:	6013      	str	r3, [r2, #0]
 8010416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010418:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	f383 8810 	msr	PRIMASK, r3
}
 8010420:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010424:	f000 fc1e 	bl	8010c64 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8010428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801042e:	637b      	str	r3, [r7, #52]	; 0x34
 8010430:	e007      	b.n	8010442 <_tx_semaphore_get+0x10e>
 8010432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010434:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	f383 8810 	msr	PRIMASK, r3
}
 801043c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 801043e:	230d      	movs	r3, #13
 8010440:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8010442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010444:	4618      	mov	r0, r3
 8010446:	3738      	adds	r7, #56	; 0x38
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	200039a8 	.word	0x200039a8
 8010450:	20003910 	.word	0x20003910
 8010454:	08010079 	.word	0x08010079

08010458 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b08c      	sub	sp, #48	; 0x30
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010460:	f3ef 8310 	mrs	r3, PRIMASK
 8010464:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010466:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010468:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801046a:	b672      	cpsid	i
    return(int_posture);
 801046c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 801046e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	691b      	ldr	r3, [r3, #16]
 8010474:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8010476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010478:	2b00      	cmp	r3, #0
 801047a:	d10a      	bne.n	8010492 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	689b      	ldr	r3, [r3, #8]
 8010480:	1c5a      	adds	r2, r3, #1
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	609a      	str	r2, [r3, #8]
 8010486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010488:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	f383 8810 	msr	PRIMASK, r3
}
 8010490:	e033      	b.n	80104fa <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	68db      	ldr	r3, [r3, #12]
 8010496:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8010498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049a:	3b01      	subs	r3, #1
 801049c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 801049e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d103      	bne.n	80104ac <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	60da      	str	r2, [r3, #12]
 80104aa:	e00e      	b.n	80104ca <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 80104ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104b0:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6a3a      	ldr	r2, [r7, #32]
 80104b6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80104b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104bc:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80104be:	6a3b      	ldr	r3, [r7, #32]
 80104c0:	69fa      	ldr	r2, [r7, #28]
 80104c2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80104c4:	69fb      	ldr	r3, [r7, #28]
 80104c6:	6a3a      	ldr	r2, [r7, #32]
 80104c8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104ce:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80104d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d2:	2200      	movs	r2, #0
 80104d4:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80104d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d8:	2200      	movs	r2, #0
 80104da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80104de:	4b09      	ldr	r3, [pc, #36]	; (8010504 <_tx_semaphore_put+0xac>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	3301      	adds	r3, #1
 80104e4:	4a07      	ldr	r2, [pc, #28]	; (8010504 <_tx_semaphore_put+0xac>)
 80104e6:	6013      	str	r3, [r2, #0]
 80104e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	f383 8810 	msr	PRIMASK, r3
}
 80104f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80104f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104f6:	f000 fab5 	bl	8010a64 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80104fa:	2300      	movs	r3, #0
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3730      	adds	r7, #48	; 0x30
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	200039a8 	.word	0x200039a8

08010508 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b092      	sub	sp, #72	; 0x48
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	607a      	str	r2, [r7, #4]
 8010514:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8010516:	2300      	movs	r3, #0
 8010518:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801051a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801051c:	21ef      	movs	r1, #239	; 0xef
 801051e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010520:	f006 fbfc 	bl	8016d1c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8010524:	22b0      	movs	r2, #176	; 0xb0
 8010526:	2100      	movs	r1, #0
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f006 fbf7 	bl	8016d1c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	68ba      	ldr	r2, [r7, #8]
 8010532:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	687a      	ldr	r2, [r7, #4]
 8010538:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	683a      	ldr	r2, [r7, #0]
 801053e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010544:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801054a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010550:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010556:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801055e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010564:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2220      	movs	r2, #32
 801056a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801056e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010570:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8010572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010574:	3b01      	subs	r3, #1
 8010576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010578:	4413      	add	r3, r2
 801057a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010580:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8010582:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010586:	429a      	cmp	r2, r3
 8010588:	d007      	beq.n	801059a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2200      	movs	r2, #0
 801058e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2200      	movs	r2, #0
 8010594:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8010598:	e006      	b.n	80105a8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801059e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2203      	movs	r2, #3
 80105ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	4a48      	ldr	r2, [pc, #288]	; (80106d4 <_tx_thread_create+0x1cc>)
 80105b2:	655a      	str	r2, [r3, #84]	; 0x54
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80105ba:	4947      	ldr	r1, [pc, #284]	; (80106d8 <_tx_thread_create+0x1d0>)
 80105bc:	68f8      	ldr	r0, [r7, #12]
 80105be:	f7ef fecf 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80105c2:	f3ef 8310 	mrs	r3, PRIMASK
 80105c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80105c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80105ca:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80105cc:	b672      	cpsid	i
    return(int_posture);
 80105ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80105d0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	4a41      	ldr	r2, [pc, #260]	; (80106dc <_tx_thread_create+0x1d4>)
 80105d6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80105d8:	4b41      	ldr	r3, [pc, #260]	; (80106e0 <_tx_thread_create+0x1d8>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d10b      	bne.n	80105f8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80105e0:	4a40      	ldr	r2, [pc, #256]	; (80106e4 <_tx_thread_create+0x1dc>)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	68fa      	ldr	r2, [r7, #12]
 80105ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	68fa      	ldr	r2, [r7, #12]
 80105f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80105f6:	e016      	b.n	8010626 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80105f8:	4b3a      	ldr	r3, [pc, #232]	; (80106e4 <_tx_thread_create+0x1dc>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80105fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010604:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8010606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801060e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010610:	68fa      	ldr	r2, [r7, #12]
 8010612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801061a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8010626:	4b2e      	ldr	r3, [pc, #184]	; (80106e0 <_tx_thread_create+0x1d8>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	3301      	adds	r3, #1
 801062c:	4a2c      	ldr	r2, [pc, #176]	; (80106e0 <_tx_thread_create+0x1d8>)
 801062e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010630:	4b2d      	ldr	r3, [pc, #180]	; (80106e8 <_tx_thread_create+0x1e0>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	3301      	adds	r3, #1
 8010636:	4a2c      	ldr	r2, [pc, #176]	; (80106e8 <_tx_thread_create+0x1e0>)
 8010638:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801063a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801063c:	2b01      	cmp	r3, #1
 801063e:	d129      	bne.n	8010694 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010640:	f3ef 8305 	mrs	r3, IPSR
 8010644:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8010646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8010648:	4b28      	ldr	r3, [pc, #160]	; (80106ec <_tx_thread_create+0x1e4>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	4313      	orrs	r3, r2
 801064e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010652:	d30d      	bcc.n	8010670 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8010654:	4b26      	ldr	r3, [pc, #152]	; (80106f0 <_tx_thread_create+0x1e8>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801065a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801065c:	2b00      	cmp	r3, #0
 801065e:	d009      	beq.n	8010674 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8010660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010664:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8010666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801066a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801066c:	63da      	str	r2, [r3, #60]	; 0x3c
 801066e:	e001      	b.n	8010674 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8010670:	2300      	movs	r3, #0
 8010672:	647b      	str	r3, [r7, #68]	; 0x44
 8010674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010676:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010678:	6a3b      	ldr	r3, [r7, #32]
 801067a:	f383 8810 	msr	PRIMASK, r3
}
 801067e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8010680:	68f8      	ldr	r0, [r7, #12]
 8010682:	f000 f9ef 	bl	8010a64 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8010686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010688:	2b00      	cmp	r3, #0
 801068a:	d01e      	beq.n	80106ca <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801068c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801068e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010690:	63da      	str	r2, [r3, #60]	; 0x3c
 8010692:	e01a      	b.n	80106ca <_tx_thread_create+0x1c2>
 8010694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010696:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	f383 8810 	msr	PRIMASK, r3
}
 801069e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80106a0:	f3ef 8310 	mrs	r3, PRIMASK
 80106a4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80106a6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80106a8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80106aa:	b672      	cpsid	i
    return(int_posture);
 80106ac:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80106ae:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80106b0:	4b0d      	ldr	r3, [pc, #52]	; (80106e8 <_tx_thread_create+0x1e0>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	3b01      	subs	r3, #1
 80106b6:	4a0c      	ldr	r2, [pc, #48]	; (80106e8 <_tx_thread_create+0x1e0>)
 80106b8:	6013      	str	r3, [r2, #0]
 80106ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106bc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80106be:	69fb      	ldr	r3, [r7, #28]
 80106c0:	f383 8810 	msr	PRIMASK, r3
}
 80106c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80106c6:	f000 f993 	bl	80109f0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80106ca:	2300      	movs	r3, #0
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3748      	adds	r7, #72	; 0x48
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}
 80106d4:	08010f39 	.word	0x08010f39
 80106d8:	08010859 	.word	0x08010859
 80106dc:	54485244 	.word	0x54485244
 80106e0:	2000391c 	.word	0x2000391c
 80106e4:	20003918 	.word	0x20003918
 80106e8:	200039a8 	.word	0x200039a8
 80106ec:	2000000c 	.word	0x2000000c
 80106f0:	20003914 	.word	0x20003914

080106f4 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b087      	sub	sp, #28
 80106f8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80106fa:	f3ef 8310 	mrs	r3, PRIMASK
 80106fe:	60bb      	str	r3, [r7, #8]
    return(posture);
 8010700:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8010702:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010704:	b672      	cpsid	i
    return(int_posture);
 8010706:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8010708:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801070a:	4b08      	ldr	r3, [pc, #32]	; (801072c <_tx_thread_identify+0x38>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	613b      	str	r3, [r7, #16]
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f383 8810 	msr	PRIMASK, r3
}
 801071a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 801071c:	693b      	ldr	r3, [r7, #16]
}
 801071e:	4618      	mov	r0, r3
 8010720:	371c      	adds	r7, #28
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	20003910 	.word	0x20003910

08010730 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8010730:	b480      	push	{r7}
 8010732:	b089      	sub	sp, #36	; 0x24
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
 801073c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801073e:	f3ef 8310 	mrs	r3, PRIMASK
 8010742:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010744:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010746:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010748:	b672      	cpsid	i
    return(int_posture);
 801074a:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 801074c:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d003      	beq.n	801075c <_tx_thread_info_get+0x2c>
    {

        *name =  thread_ptr -> tx_thread_name;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d003      	beq.n	801076a <_tx_thread_info_get+0x3a>
    {

        *state =  thread_ptr -> tx_thread_state;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d003      	beq.n	8010778 <_tx_thread_info_get+0x48>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	685a      	ldr	r2, [r3, #4]
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 8010778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077a:	2b00      	cmp	r3, #0
 801077c:	d004      	beq.n	8010788 <_tx_thread_info_get+0x58>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8010784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010786:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 8010788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078a:	2b00      	cmp	r3, #0
 801078c:	d004      	beq.n	8010798 <_tx_thread_info_get+0x68>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8010794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010796:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 8010798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079a:	2b00      	cmp	r3, #0
 801079c:	d003      	beq.n	80107a6 <_tx_thread_info_get+0x76>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	699a      	ldr	r2, [r3, #24]
 80107a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a4:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 80107a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d004      	beq.n	80107b6 <_tx_thread_info_get+0x86>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80107b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107b4:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 80107b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d003      	beq.n	80107c4 <_tx_thread_info_get+0x94>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80107c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c2:	601a      	str	r2, [r3, #0]
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	f383 8810 	msr	PRIMASK, r3
}
 80107ce:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 80107d0:	2300      	movs	r3, #0
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3724      	adds	r7, #36	; 0x24
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr
	...

080107e0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80107e4:	4b12      	ldr	r3, [pc, #72]	; (8010830 <_tx_thread_initialize+0x50>)
 80107e6:	2200      	movs	r2, #0
 80107e8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80107ea:	4b12      	ldr	r3, [pc, #72]	; (8010834 <_tx_thread_initialize+0x54>)
 80107ec:	2200      	movs	r2, #0
 80107ee:	601a      	str	r2, [r3, #0]
 80107f0:	4b11      	ldr	r3, [pc, #68]	; (8010838 <_tx_thread_initialize+0x58>)
 80107f2:	2200      	movs	r2, #0
 80107f4:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80107f6:	4b11      	ldr	r3, [pc, #68]	; (801083c <_tx_thread_initialize+0x5c>)
 80107f8:	2220      	movs	r2, #32
 80107fa:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80107fc:	2280      	movs	r2, #128	; 0x80
 80107fe:	2100      	movs	r1, #0
 8010800:	480f      	ldr	r0, [pc, #60]	; (8010840 <_tx_thread_initialize+0x60>)
 8010802:	f006 fa8b 	bl	8016d1c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8010806:	4b0f      	ldr	r3, [pc, #60]	; (8010844 <_tx_thread_initialize+0x64>)
 8010808:	2200      	movs	r2, #0
 801080a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 801080c:	4b0e      	ldr	r3, [pc, #56]	; (8010848 <_tx_thread_initialize+0x68>)
 801080e:	2200      	movs	r2, #0
 8010810:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8010812:	4b0e      	ldr	r3, [pc, #56]	; (801084c <_tx_thread_initialize+0x6c>)
 8010814:	2200      	movs	r2, #0
 8010816:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8010818:	4b0d      	ldr	r3, [pc, #52]	; (8010850 <_tx_thread_initialize+0x70>)
 801081a:	2200      	movs	r2, #0
 801081c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 801081e:	4b0d      	ldr	r3, [pc, #52]	; (8010854 <_tx_thread_initialize+0x74>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8010826:	4a0b      	ldr	r2, [pc, #44]	; (8010854 <_tx_thread_initialize+0x74>)
 8010828:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801082a:	bf00      	nop
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	20003910 	.word	0x20003910
 8010834:	20003914 	.word	0x20003914
 8010838:	20003920 	.word	0x20003920
 801083c:	20003924 	.word	0x20003924
 8010840:	20003928 	.word	0x20003928
 8010844:	20003918 	.word	0x20003918
 8010848:	2000391c 	.word	0x2000391c
 801084c:	200039a8 	.word	0x200039a8
 8010850:	200039ac 	.word	0x200039ac
 8010854:	200039b0 	.word	0x200039b0

08010858 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b088      	sub	sp, #32
 801085c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801085e:	4b21      	ldr	r3, [pc, #132]	; (80108e4 <_tx_thread_shell_entry+0x8c>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010868:	69fa      	ldr	r2, [r7, #28]
 801086a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801086c:	4610      	mov	r0, r2
 801086e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8010870:	4b1d      	ldr	r3, [pc, #116]	; (80108e8 <_tx_thread_shell_entry+0x90>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d003      	beq.n	8010880 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8010878:	4b1b      	ldr	r3, [pc, #108]	; (80108e8 <_tx_thread_shell_entry+0x90>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	69f8      	ldr	r0, [r7, #28]
 801087e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010880:	f3ef 8310 	mrs	r3, PRIMASK
 8010884:	607b      	str	r3, [r7, #4]
    return(posture);
 8010886:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8010888:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801088a:	b672      	cpsid	i
    return(int_posture);
 801088c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 801088e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	2201      	movs	r2, #1
 8010894:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010896:	69fb      	ldr	r3, [r7, #28]
 8010898:	2201      	movs	r2, #1
 801089a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801089c:	69fb      	ldr	r3, [r7, #28]
 801089e:	2200      	movs	r2, #0
 80108a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80108a2:	4b12      	ldr	r3, [pc, #72]	; (80108ec <_tx_thread_shell_entry+0x94>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3301      	adds	r3, #1
 80108a8:	4a10      	ldr	r2, [pc, #64]	; (80108ec <_tx_thread_shell_entry+0x94>)
 80108aa:	6013      	str	r3, [r2, #0]
 80108ac:	69bb      	ldr	r3, [r7, #24]
 80108ae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	f383 8810 	msr	PRIMASK, r3
}
 80108b6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80108b8:	f3ef 8314 	mrs	r3, CONTROL
 80108bc:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80108be:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80108c0:	617b      	str	r3, [r7, #20]
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	f023 0304 	bic.w	r3, r3, #4
 80108c8:	617b      	str	r3, [r7, #20]
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	f383 8814 	msr	CONTROL, r3
}
 80108d4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80108d6:	69f8      	ldr	r0, [r7, #28]
 80108d8:	f000 f9c4 	bl	8010c64 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80108dc:	bf00      	nop
 80108de:	3720      	adds	r7, #32
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}
 80108e4:	20003910 	.word	0x20003910
 80108e8:	200039ac 	.word	0x200039ac
 80108ec:	200039a8 	.word	0x200039a8

080108f0 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b08e      	sub	sp, #56	; 0x38
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80108f8:	f3ef 8310 	mrs	r3, PRIMASK
 80108fc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80108fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8010900:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8010902:	b672      	cpsid	i
    return(int_posture);
 8010904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8010906:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010908:	4b35      	ldr	r3, [pc, #212]	; (80109e0 <_tx_thread_sleep+0xf0>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 801090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010910:	2b00      	cmp	r3, #0
 8010912:	d108      	bne.n	8010926 <_tx_thread_sleep+0x36>
 8010914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010916:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010918:	6a3b      	ldr	r3, [r7, #32]
 801091a:	f383 8810 	msr	PRIMASK, r3
}
 801091e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8010920:	2313      	movs	r3, #19
 8010922:	637b      	str	r3, [r7, #52]	; 0x34
 8010924:	e056      	b.n	80109d4 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010926:	f3ef 8305 	mrs	r3, IPSR
 801092a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801092c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801092e:	4b2d      	ldr	r3, [pc, #180]	; (80109e4 <_tx_thread_sleep+0xf4>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	4313      	orrs	r3, r2
 8010934:	2b00      	cmp	r3, #0
 8010936:	d008      	beq.n	801094a <_tx_thread_sleep+0x5a>
 8010938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801093c:	69bb      	ldr	r3, [r7, #24]
 801093e:	f383 8810 	msr	PRIMASK, r3
}
 8010942:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8010944:	2313      	movs	r3, #19
 8010946:	637b      	str	r3, [r7, #52]	; 0x34
 8010948:	e044      	b.n	80109d4 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 801094a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801094c:	4a26      	ldr	r2, [pc, #152]	; (80109e8 <_tx_thread_sleep+0xf8>)
 801094e:	4293      	cmp	r3, r2
 8010950:	d108      	bne.n	8010964 <_tx_thread_sleep+0x74>
 8010952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010954:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f383 8810 	msr	PRIMASK, r3
}
 801095c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801095e:	2313      	movs	r3, #19
 8010960:	637b      	str	r3, [r7, #52]	; 0x34
 8010962:	e037      	b.n	80109d4 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d108      	bne.n	801097c <_tx_thread_sleep+0x8c>
 801096a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801096c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	f383 8810 	msr	PRIMASK, r3
}
 8010974:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8010976:	2300      	movs	r3, #0
 8010978:	637b      	str	r3, [r7, #52]	; 0x34
 801097a:	e02b      	b.n	80109d4 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801097c:	4b1b      	ldr	r3, [pc, #108]	; (80109ec <_tx_thread_sleep+0xfc>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d008      	beq.n	8010996 <_tx_thread_sleep+0xa6>
 8010984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010986:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	f383 8810 	msr	PRIMASK, r3
}
 801098e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8010990:	2313      	movs	r3, #19
 8010992:	637b      	str	r3, [r7, #52]	; 0x34
 8010994:	e01e      	b.n	80109d4 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8010996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010998:	2204      	movs	r2, #4
 801099a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801099e:	2201      	movs	r2, #1
 80109a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80109a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a4:	2200      	movs	r2, #0
 80109a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80109aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ac:	687a      	ldr	r2, [r7, #4]
 80109ae:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80109b0:	4b0e      	ldr	r3, [pc, #56]	; (80109ec <_tx_thread_sleep+0xfc>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	3301      	adds	r3, #1
 80109b6:	4a0d      	ldr	r2, [pc, #52]	; (80109ec <_tx_thread_sleep+0xfc>)
 80109b8:	6013      	str	r3, [r2, #0]
 80109ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109bc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	f383 8810 	msr	PRIMASK, r3
}
 80109c4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80109c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109c8:	f000 f94c 	bl	8010c64 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80109cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80109d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80109d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3738      	adds	r7, #56	; 0x38
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
 80109de:	bf00      	nop
 80109e0:	20003910 	.word	0x20003910
 80109e4:	2000000c 	.word	0x2000000c
 80109e8:	20003a58 	.word	0x20003a58
 80109ec:	200039a8 	.word	0x200039a8

080109f0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b089      	sub	sp, #36	; 0x24
 80109f4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80109f6:	4b17      	ldr	r3, [pc, #92]	; (8010a54 <_tx_thread_system_preempt_check+0x64>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80109fc:	69fb      	ldr	r3, [r7, #28]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d121      	bne.n	8010a46 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8010a02:	4b15      	ldr	r3, [pc, #84]	; (8010a58 <_tx_thread_system_preempt_check+0x68>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8010a08:	4b14      	ldr	r3, [pc, #80]	; (8010a5c <_tx_thread_system_preempt_check+0x6c>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8010a0e:	69ba      	ldr	r2, [r7, #24]
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d017      	beq.n	8010a46 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010a16:	4b12      	ldr	r3, [pc, #72]	; (8010a60 <_tx_thread_system_preempt_check+0x70>)
 8010a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a1c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010a1e:	f3ef 8305 	mrs	r3, IPSR
 8010a22:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8010a24:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d10c      	bne.n	8010a44 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8010a2e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8010a30:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8010a32:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010a34:	b662      	cpsie	i
}
 8010a36:	bf00      	nop
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f383 8810 	msr	PRIMASK, r3
}
 8010a42:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8010a44:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8010a46:	bf00      	nop
 8010a48:	3724      	adds	r7, #36	; 0x24
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr
 8010a52:	bf00      	nop
 8010a54:	200039a8 	.word	0x200039a8
 8010a58:	20003910 	.word	0x20003910
 8010a5c:	20003914 	.word	0x20003914
 8010a60:	e000ed04 	.word	0xe000ed04

08010a64 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b096      	sub	sp, #88	; 0x58
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8010a70:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8010a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8010a74:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8010a76:	b672      	cpsid	i
    return(int_posture);
 8010a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8010a7a:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d005      	beq.n	8010a90 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	334c      	adds	r3, #76	; 0x4c
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f000 fb91 	bl	80111b0 <_tx_timer_system_deactivate>
 8010a8e:	e002      	b.n	8010a96 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8010a96:	4b6c      	ldr	r3, [pc, #432]	; (8010c48 <_tx_thread_system_resume+0x1e4>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	3b01      	subs	r3, #1
 8010a9c:	4a6a      	ldr	r2, [pc, #424]	; (8010c48 <_tx_thread_system_resume+0x1e4>)
 8010a9e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f040 8083 	bne.w	8010bb0 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	f000 8097 	beq.w	8010be2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d172      	bne.n	8010ba2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac6:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8010ac8:	4a60      	ldr	r2, [pc, #384]	; (8010c4c <_tx_thread_system_resume+0x1e8>)
 8010aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8010ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d154      	bne.n	8010b82 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8010ad8:	495c      	ldr	r1, [pc, #368]	; (8010c4c <_tx_thread_system_resume+0x1e8>)
 8010ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010adc:	687a      	ldr	r2, [r7, #4]
 8010ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8010aee:	2201      	movs	r2, #1
 8010af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010af2:	fa02 f303 	lsl.w	r3, r2, r3
 8010af6:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8010af8:	4b55      	ldr	r3, [pc, #340]	; (8010c50 <_tx_thread_system_resume+0x1ec>)
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010afe:	4313      	orrs	r3, r2
 8010b00:	4a53      	ldr	r2, [pc, #332]	; (8010c50 <_tx_thread_system_resume+0x1ec>)
 8010b02:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8010b04:	4b53      	ldr	r3, [pc, #332]	; (8010c54 <_tx_thread_system_resume+0x1f0>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d269      	bcs.n	8010be2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8010b0e:	4a51      	ldr	r2, [pc, #324]	; (8010c54 <_tx_thread_system_resume+0x1f0>)
 8010b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b12:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8010b14:	4b50      	ldr	r3, [pc, #320]	; (8010c58 <_tx_thread_system_resume+0x1f4>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8010b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d103      	bne.n	8010b28 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8010b20:	4a4d      	ldr	r2, [pc, #308]	; (8010c58 <_tx_thread_system_resume+0x1f4>)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6013      	str	r3, [r2, #0]
 8010b26:	e05c      	b.n	8010be2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8010b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d257      	bcs.n	8010be2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8010b32:	4a49      	ldr	r2, [pc, #292]	; (8010c58 <_tx_thread_system_resume+0x1f4>)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6013      	str	r3, [r2, #0]
 8010b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b3e:	f383 8810 	msr	PRIMASK, r3
}
 8010b42:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010b44:	4b40      	ldr	r3, [pc, #256]	; (8010c48 <_tx_thread_system_resume+0x1e4>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8010b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d174      	bne.n	8010c3a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010b50:	4b42      	ldr	r3, [pc, #264]	; (8010c5c <_tx_thread_system_resume+0x1f8>)
 8010b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b56:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010b58:	f3ef 8305 	mrs	r3, IPSR
 8010b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8010b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d10c      	bne.n	8010b7e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b64:	f3ef 8310 	mrs	r3, PRIMASK
 8010b68:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8010b6c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010b6e:	b662      	cpsie	i
}
 8010b70:	bf00      	nop
 8010b72:	6a3b      	ldr	r3, [r7, #32]
 8010b74:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	f383 8810 	msr	PRIMASK, r3
}
 8010b7c:	bf00      	nop
}
 8010b7e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8010b80:	e05b      	b.n	8010c3a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8010b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b86:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8010b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8010b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b98:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b9e:	621a      	str	r2, [r3, #32]
 8010ba0:	e01f      	b.n	8010be2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2203      	movs	r2, #3
 8010bac:	631a      	str	r2, [r3, #48]	; 0x30
 8010bae:	e018      	b.n	8010be2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d014      	beq.n	8010be2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bbc:	2b02      	cmp	r3, #2
 8010bbe:	d010      	beq.n	8010be2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d106      	bne.n	8010bd6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8010bd4:	e005      	b.n	8010be2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2203      	movs	r2, #3
 8010be0:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8010be2:	4b1f      	ldr	r3, [pc, #124]	; (8010c60 <_tx_thread_system_resume+0x1fc>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8010be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bea:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	f383 8810 	msr	PRIMASK, r3
}
 8010bf2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8010bf4:	4b18      	ldr	r3, [pc, #96]	; (8010c58 <_tx_thread_system_resume+0x1f4>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d020      	beq.n	8010c40 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010bfe:	4b12      	ldr	r3, [pc, #72]	; (8010c48 <_tx_thread_system_resume+0x1e4>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8010c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d11a      	bne.n	8010c40 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010c0a:	4b14      	ldr	r3, [pc, #80]	; (8010c5c <_tx_thread_system_resume+0x1f8>)
 8010c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c10:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010c12:	f3ef 8305 	mrs	r3, IPSR
 8010c16:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010c18:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d10f      	bne.n	8010c3e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8010c22:	613b      	str	r3, [r7, #16]
    return(posture);
 8010c24:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8010c26:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010c28:	b662      	cpsie	i
}
 8010c2a:	bf00      	nop
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	f383 8810 	msr	PRIMASK, r3
}
 8010c36:	bf00      	nop
}
 8010c38:	e001      	b.n	8010c3e <_tx_thread_system_resume+0x1da>
                                return;
 8010c3a:	bf00      	nop
 8010c3c:	e000      	b.n	8010c40 <_tx_thread_system_resume+0x1dc>
 8010c3e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8010c40:	3758      	adds	r7, #88	; 0x58
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
 8010c46:	bf00      	nop
 8010c48:	200039a8 	.word	0x200039a8
 8010c4c:	20003928 	.word	0x20003928
 8010c50:	20003920 	.word	0x20003920
 8010c54:	20003924 	.word	0x20003924
 8010c58:	20003914 	.word	0x20003914
 8010c5c:	e000ed04 	.word	0xe000ed04
 8010c60:	20003910 	.word	0x20003910

08010c64 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b09e      	sub	sp, #120	; 0x78
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8010c6c:	4b81      	ldr	r3, [pc, #516]	; (8010e74 <_tx_thread_system_suspend+0x210>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c72:	f3ef 8310 	mrs	r3, PRIMASK
 8010c76:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8010c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8010c7a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c7c:	b672      	cpsid	i
    return(int_posture);
 8010c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8010c80:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d112      	bne.n	8010cb0 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c8e:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8010c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d008      	beq.n	8010ca8 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8010c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c9c:	d004      	beq.n	8010ca8 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	334c      	adds	r3, #76	; 0x4c
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f000 fa22 	bl	80110ec <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	69db      	ldr	r3, [r3, #28]
 8010cac:	4a72      	ldr	r2, [pc, #456]	; (8010e78 <_tx_thread_system_suspend+0x214>)
 8010cae:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8010cb0:	4b72      	ldr	r3, [pc, #456]	; (8010e7c <_tx_thread_system_suspend+0x218>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	3b01      	subs	r3, #1
 8010cb6:	4a71      	ldr	r2, [pc, #452]	; (8010e7c <_tx_thread_system_suspend+0x218>)
 8010cb8:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cbe:	2b01      	cmp	r3, #1
 8010cc0:	f040 80a6 	bne.w	8010e10 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cce:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6a1b      	ldr	r3, [r3, #32]
 8010cd4:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8010cd6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	429a      	cmp	r2, r3
 8010cdc:	d015      	beq.n	8010d0a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ce2:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8010ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ce6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ce8:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8010cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010cee:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8010cf0:	4a63      	ldr	r2, [pc, #396]	; (8010e80 <_tx_thread_system_suspend+0x21c>)
 8010cf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d157      	bne.n	8010dae <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8010cfe:	4960      	ldr	r1, [pc, #384]	; (8010e80 <_tx_thread_system_suspend+0x21c>)
 8010d00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010d08:	e051      	b.n	8010dae <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8010d0a:	4a5d      	ldr	r2, [pc, #372]	; (8010e80 <_tx_thread_system_suspend+0x21c>)
 8010d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d0e:	2100      	movs	r1, #0
 8010d10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8010d14:	2201      	movs	r2, #1
 8010d16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d18:	fa02 f303 	lsl.w	r3, r2, r3
 8010d1c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8010d1e:	4b59      	ldr	r3, [pc, #356]	; (8010e84 <_tx_thread_system_suspend+0x220>)
 8010d20:	681a      	ldr	r2, [r3, #0]
 8010d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d24:	43db      	mvns	r3, r3
 8010d26:	4013      	ands	r3, r2
 8010d28:	4a56      	ldr	r2, [pc, #344]	; (8010e84 <_tx_thread_system_suspend+0x220>)
 8010d2a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8010d30:	4b54      	ldr	r3, [pc, #336]	; (8010e84 <_tx_thread_system_suspend+0x220>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8010d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d12b      	bne.n	8010d94 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010d3c:	4b52      	ldr	r3, [pc, #328]	; (8010e88 <_tx_thread_system_suspend+0x224>)
 8010d3e:	2220      	movs	r2, #32
 8010d40:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8010d42:	4b52      	ldr	r3, [pc, #328]	; (8010e8c <_tx_thread_system_suspend+0x228>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	601a      	str	r2, [r3, #0]
 8010d48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d4a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d4e:	f383 8810 	msr	PRIMASK, r3
}
 8010d52:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010d54:	4b49      	ldr	r3, [pc, #292]	; (8010e7c <_tx_thread_system_suspend+0x218>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8010d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f040 8081 	bne.w	8010e64 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010d62:	4b4b      	ldr	r3, [pc, #300]	; (8010e90 <_tx_thread_system_suspend+0x22c>)
 8010d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d68:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010d6a:	f3ef 8305 	mrs	r3, IPSR
 8010d6e:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8010d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d10c      	bne.n	8010d90 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010d76:	f3ef 8310 	mrs	r3, PRIMASK
 8010d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8010d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8010d7e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010d80:	b662      	cpsie	i
}
 8010d82:	bf00      	nop
 8010d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d86:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d8a:	f383 8810 	msr	PRIMASK, r3
}
 8010d8e:	bf00      	nop
}
 8010d90:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8010d92:	e067      	b.n	8010e64 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8010d94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d96:	fa93 f3a3 	rbit	r3, r3
 8010d9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d9e:	fab3 f383 	clz	r3, r3
 8010da2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8010da4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010da8:	4413      	add	r3, r2
 8010daa:	4a37      	ldr	r2, [pc, #220]	; (8010e88 <_tx_thread_system_suspend+0x224>)
 8010dac:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8010dae:	4b37      	ldr	r3, [pc, #220]	; (8010e8c <_tx_thread_system_suspend+0x228>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	687a      	ldr	r2, [r7, #4]
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d12b      	bne.n	8010e10 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8010db8:	4b33      	ldr	r3, [pc, #204]	; (8010e88 <_tx_thread_system_suspend+0x224>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	4a30      	ldr	r2, [pc, #192]	; (8010e80 <_tx_thread_system_suspend+0x21c>)
 8010dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dc2:	4a32      	ldr	r2, [pc, #200]	; (8010e8c <_tx_thread_system_suspend+0x228>)
 8010dc4:	6013      	str	r3, [r2, #0]
 8010dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010dc8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dcc:	f383 8810 	msr	PRIMASK, r3
}
 8010dd0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010dd2:	4b2a      	ldr	r3, [pc, #168]	; (8010e7c <_tx_thread_system_suspend+0x218>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8010dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d144      	bne.n	8010e68 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010dde:	4b2c      	ldr	r3, [pc, #176]	; (8010e90 <_tx_thread_system_suspend+0x22c>)
 8010de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010de4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010de6:	f3ef 8305 	mrs	r3, IPSR
 8010dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8010dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d10c      	bne.n	8010e0c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010df2:	f3ef 8310 	mrs	r3, PRIMASK
 8010df6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8010df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8010dfa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010dfc:	b662      	cpsie	i
}
 8010dfe:	bf00      	nop
 8010e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e02:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e04:	6a3b      	ldr	r3, [r7, #32]
 8010e06:	f383 8810 	msr	PRIMASK, r3
}
 8010e0a:	bf00      	nop
}
 8010e0c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8010e0e:	e02b      	b.n	8010e68 <_tx_thread_system_suspend+0x204>
 8010e10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e12:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	f383 8810 	msr	PRIMASK, r3
}
 8010e1a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8010e1c:	4b1b      	ldr	r3, [pc, #108]	; (8010e8c <_tx_thread_system_suspend+0x228>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d022      	beq.n	8010e6c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010e26:	4b15      	ldr	r3, [pc, #84]	; (8010e7c <_tx_thread_system_suspend+0x218>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8010e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d11c      	bne.n	8010e6c <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010e32:	4b17      	ldr	r3, [pc, #92]	; (8010e90 <_tx_thread_system_suspend+0x22c>)
 8010e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e38:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010e3a:	f3ef 8305 	mrs	r3, IPSR
 8010e3e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010e40:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d10c      	bne.n	8010e60 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010e46:	f3ef 8310 	mrs	r3, PRIMASK
 8010e4a:	617b      	str	r3, [r7, #20]
    return(posture);
 8010e4c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8010e4e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010e50:	b662      	cpsie	i
}
 8010e52:	bf00      	nop
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f383 8810 	msr	PRIMASK, r3
}
 8010e5e:	bf00      	nop
}
 8010e60:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8010e62:	e003      	b.n	8010e6c <_tx_thread_system_suspend+0x208>
                return;
 8010e64:	bf00      	nop
 8010e66:	e002      	b.n	8010e6e <_tx_thread_system_suspend+0x20a>
            return;
 8010e68:	bf00      	nop
 8010e6a:	e000      	b.n	8010e6e <_tx_thread_system_suspend+0x20a>
    return;
 8010e6c:	bf00      	nop
}
 8010e6e:	3778      	adds	r7, #120	; 0x78
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}
 8010e74:	20003910 	.word	0x20003910
 8010e78:	20003f14 	.word	0x20003f14
 8010e7c:	200039a8 	.word	0x200039a8
 8010e80:	20003928 	.word	0x20003928
 8010e84:	20003920 	.word	0x20003920
 8010e88:	20003924 	.word	0x20003924
 8010e8c:	20003914 	.word	0x20003914
 8010e90:	e000ed04 	.word	0xe000ed04

08010e94 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b087      	sub	sp, #28
 8010e98:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010e9a:	4b21      	ldr	r3, [pc, #132]	; (8010f20 <_tx_thread_time_slice+0x8c>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8010ea4:	60fb      	str	r3, [r7, #12]
    return(posture);
 8010ea6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8010ea8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010eaa:	b672      	cpsid	i
    return(int_posture);
 8010eac:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8010eae:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8010eb0:	4b1c      	ldr	r3, [pc, #112]	; (8010f24 <_tx_thread_time_slice+0x90>)
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d024      	beq.n	8010f06 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d120      	bne.n	8010f06 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	69da      	ldr	r2, [r3, #28]
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	699b      	ldr	r3, [r3, #24]
 8010ed0:	4a15      	ldr	r2, [pc, #84]	; (8010f28 <_tx_thread_time_slice+0x94>)
 8010ed2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	6a1b      	ldr	r3, [r3, #32]
 8010ed8:	697a      	ldr	r2, [r7, #20]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d013      	beq.n	8010f06 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d10d      	bne.n	8010f06 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eee:	697a      	ldr	r2, [r7, #20]
 8010ef0:	6a12      	ldr	r2, [r2, #32]
 8010ef2:	490e      	ldr	r1, [pc, #56]	; (8010f2c <_tx_thread_time_slice+0x98>)
 8010ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8010ef8:	4b0d      	ldr	r3, [pc, #52]	; (8010f30 <_tx_thread_time_slice+0x9c>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	4a0b      	ldr	r2, [pc, #44]	; (8010f2c <_tx_thread_time_slice+0x98>)
 8010efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f02:	4a0c      	ldr	r2, [pc, #48]	; (8010f34 <_tx_thread_time_slice+0xa0>)
 8010f04:	6013      	str	r3, [r2, #0]
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f383 8810 	msr	PRIMASK, r3
}
 8010f10:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8010f12:	bf00      	nop
 8010f14:	371c      	adds	r7, #28
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop
 8010f20:	20003910 	.word	0x20003910
 8010f24:	200039b8 	.word	0x200039b8
 8010f28:	20003f14 	.word	0x20003f14
 8010f2c:	20003928 	.word	0x20003928
 8010f30:	20003924 	.word	0x20003924
 8010f34:	20003914 	.word	0x20003914

08010f38 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b08a      	sub	sp, #40	; 0x28
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010f44:	f3ef 8310 	mrs	r3, PRIMASK
 8010f48:	617b      	str	r3, [r7, #20]
    return(posture);
 8010f4a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010f4c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010f4e:	b672      	cpsid	i
    return(int_posture);
 8010f50:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8010f52:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f58:	2b04      	cmp	r3, #4
 8010f5a:	d10e      	bne.n	8010f7a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8010f5c:	4b13      	ldr	r3, [pc, #76]	; (8010fac <_tx_thread_timeout+0x74>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	3301      	adds	r3, #1
 8010f62:	4a12      	ldr	r2, [pc, #72]	; (8010fac <_tx_thread_timeout+0x74>)
 8010f64:	6013      	str	r3, [r2, #0]
 8010f66:	6a3b      	ldr	r3, [r7, #32]
 8010f68:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	f383 8810 	msr	PRIMASK, r3
}
 8010f70:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f74:	f7ff fd76 	bl	8010a64 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8010f78:	e013      	b.n	8010fa2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8010f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f7e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8010f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010f86:	61bb      	str	r3, [r7, #24]
 8010f88:	6a3b      	ldr	r3, [r7, #32]
 8010f8a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	f383 8810 	msr	PRIMASK, r3
}
 8010f92:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d003      	beq.n	8010fa2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	69b9      	ldr	r1, [r7, #24]
 8010f9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fa0:	4798      	blx	r3
}
 8010fa2:	bf00      	nop
 8010fa4:	3728      	adds	r7, #40	; 0x28
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
 8010faa:	bf00      	nop
 8010fac:	200039a8 	.word	0x200039a8

08010fb0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8010fba:	607b      	str	r3, [r7, #4]
    return(posture);
 8010fbc:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8010fbe:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010fc0:	b672      	cpsid	i
    return(int_posture);
 8010fc2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8010fc4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8010fc6:	4b09      	ldr	r3, [pc, #36]	; (8010fec <_tx_timer_expiration_process+0x3c>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	3301      	adds	r3, #1
 8010fcc:	4a07      	ldr	r2, [pc, #28]	; (8010fec <_tx_timer_expiration_process+0x3c>)
 8010fce:	6013      	str	r3, [r2, #0]
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	f383 8810 	msr	PRIMASK, r3
}
 8010fda:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8010fdc:	4804      	ldr	r0, [pc, #16]	; (8010ff0 <_tx_timer_expiration_process+0x40>)
 8010fde:	f7ff fd41 	bl	8010a64 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010fe2:	bf00      	nop
 8010fe4:	3710      	adds	r7, #16
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}
 8010fea:	bf00      	nop
 8010fec:	200039a8 	.word	0x200039a8
 8010ff0:	20003a58 	.word	0x20003a58

08010ff4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8010ff4:	b590      	push	{r4, r7, lr}
 8010ff6:	b089      	sub	sp, #36	; 0x24
 8010ff8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8010ffa:	4b28      	ldr	r3, [pc, #160]	; (801109c <_tx_timer_initialize+0xa8>)
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8011000:	4b27      	ldr	r3, [pc, #156]	; (80110a0 <_tx_timer_initialize+0xac>)
 8011002:	2200      	movs	r2, #0
 8011004:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8011006:	4b27      	ldr	r3, [pc, #156]	; (80110a4 <_tx_timer_initialize+0xb0>)
 8011008:	2200      	movs	r2, #0
 801100a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 801100c:	4b26      	ldr	r3, [pc, #152]	; (80110a8 <_tx_timer_initialize+0xb4>)
 801100e:	2200      	movs	r2, #0
 8011010:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8011012:	4b26      	ldr	r3, [pc, #152]	; (80110ac <_tx_timer_initialize+0xb8>)
 8011014:	2200      	movs	r2, #0
 8011016:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8011018:	2280      	movs	r2, #128	; 0x80
 801101a:	2100      	movs	r1, #0
 801101c:	4824      	ldr	r0, [pc, #144]	; (80110b0 <_tx_timer_initialize+0xbc>)
 801101e:	f005 fe7d 	bl	8016d1c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8011022:	4b24      	ldr	r3, [pc, #144]	; (80110b4 <_tx_timer_initialize+0xc0>)
 8011024:	4a22      	ldr	r2, [pc, #136]	; (80110b0 <_tx_timer_initialize+0xbc>)
 8011026:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8011028:	4b23      	ldr	r3, [pc, #140]	; (80110b8 <_tx_timer_initialize+0xc4>)
 801102a:	4a21      	ldr	r2, [pc, #132]	; (80110b0 <_tx_timer_initialize+0xbc>)
 801102c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 801102e:	4b23      	ldr	r3, [pc, #140]	; (80110bc <_tx_timer_initialize+0xc8>)
 8011030:	4a23      	ldr	r2, [pc, #140]	; (80110c0 <_tx_timer_initialize+0xcc>)
 8011032:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8011034:	4b21      	ldr	r3, [pc, #132]	; (80110bc <_tx_timer_initialize+0xc8>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	3304      	adds	r3, #4
 801103a:	4a20      	ldr	r2, [pc, #128]	; (80110bc <_tx_timer_initialize+0xc8>)
 801103c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801103e:	4b21      	ldr	r3, [pc, #132]	; (80110c4 <_tx_timer_initialize+0xd0>)
 8011040:	4a21      	ldr	r2, [pc, #132]	; (80110c8 <_tx_timer_initialize+0xd4>)
 8011042:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8011044:	4b21      	ldr	r3, [pc, #132]	; (80110cc <_tx_timer_initialize+0xd8>)
 8011046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801104a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 801104c:	4b20      	ldr	r3, [pc, #128]	; (80110d0 <_tx_timer_initialize+0xdc>)
 801104e:	2200      	movs	r2, #0
 8011050:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8011052:	4b1c      	ldr	r3, [pc, #112]	; (80110c4 <_tx_timer_initialize+0xd0>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	4a1d      	ldr	r2, [pc, #116]	; (80110cc <_tx_timer_initialize+0xd8>)
 8011058:	6812      	ldr	r2, [r2, #0]
 801105a:	491d      	ldr	r1, [pc, #116]	; (80110d0 <_tx_timer_initialize+0xdc>)
 801105c:	6809      	ldr	r1, [r1, #0]
 801105e:	481c      	ldr	r0, [pc, #112]	; (80110d0 <_tx_timer_initialize+0xdc>)
 8011060:	6800      	ldr	r0, [r0, #0]
 8011062:	2400      	movs	r4, #0
 8011064:	9405      	str	r4, [sp, #20]
 8011066:	2400      	movs	r4, #0
 8011068:	9404      	str	r4, [sp, #16]
 801106a:	9003      	str	r0, [sp, #12]
 801106c:	9102      	str	r1, [sp, #8]
 801106e:	9201      	str	r2, [sp, #4]
 8011070:	9300      	str	r3, [sp, #0]
 8011072:	4b18      	ldr	r3, [pc, #96]	; (80110d4 <_tx_timer_initialize+0xe0>)
 8011074:	4a18      	ldr	r2, [pc, #96]	; (80110d8 <_tx_timer_initialize+0xe4>)
 8011076:	4919      	ldr	r1, [pc, #100]	; (80110dc <_tx_timer_initialize+0xe8>)
 8011078:	4819      	ldr	r0, [pc, #100]	; (80110e0 <_tx_timer_initialize+0xec>)
 801107a:	f7ff fa45 	bl	8010508 <_tx_thread_create>
 801107e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d1e5      	bne.n	8011052 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8011086:	4b17      	ldr	r3, [pc, #92]	; (80110e4 <_tx_timer_initialize+0xf0>)
 8011088:	2200      	movs	r2, #0
 801108a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801108c:	4b16      	ldr	r3, [pc, #88]	; (80110e8 <_tx_timer_initialize+0xf4>)
 801108e:	2200      	movs	r2, #0
 8011090:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8011092:	bf00      	nop
 8011094:	370c      	adds	r7, #12
 8011096:	46bd      	mov	sp, r7
 8011098:	bd90      	pop	{r4, r7, pc}
 801109a:	bf00      	nop
 801109c:	200039b4 	.word	0x200039b4
 80110a0:	20003f14 	.word	0x20003f14
 80110a4:	200039b8 	.word	0x200039b8
 80110a8:	20003a48 	.word	0x20003a48
 80110ac:	20003a54 	.word	0x20003a54
 80110b0:	200039bc 	.word	0x200039bc
 80110b4:	20003a3c 	.word	0x20003a3c
 80110b8:	20003a44 	.word	0x20003a44
 80110bc:	20003a40 	.word	0x20003a40
 80110c0:	20003a38 	.word	0x20003a38
 80110c4:	20003b08 	.word	0x20003b08
 80110c8:	20003b14 	.word	0x20003b14
 80110cc:	20003b0c 	.word	0x20003b0c
 80110d0:	20003b10 	.word	0x20003b10
 80110d4:	4154494d 	.word	0x4154494d
 80110d8:	08011221 	.word	0x08011221
 80110dc:	08016dd4 	.word	0x08016dd4
 80110e0:	20003a58 	.word	0x20003a58
 80110e4:	20003a4c 	.word	0x20003a4c
 80110e8:	20003a50 	.word	0x20003a50

080110ec <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80110ec:	b480      	push	{r7}
 80110ee:	b089      	sub	sp, #36	; 0x24
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d04a      	beq.n	8011196 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011106:	d046      	beq.n	8011196 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	699b      	ldr	r3, [r3, #24]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d142      	bne.n	8011196 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	2b20      	cmp	r3, #32
 8011114:	d902      	bls.n	801111c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8011116:	231f      	movs	r3, #31
 8011118:	61bb      	str	r3, [r7, #24]
 801111a:	e002      	b.n	8011122 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	3b01      	subs	r3, #1
 8011120:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8011122:	4b20      	ldr	r3, [pc, #128]	; (80111a4 <_tx_timer_system_activate+0xb8>)
 8011124:	681a      	ldr	r2, [r3, #0]
 8011126:	69bb      	ldr	r3, [r7, #24]
 8011128:	009b      	lsls	r3, r3, #2
 801112a:	4413      	add	r3, r2
 801112c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 801112e:	4b1e      	ldr	r3, [pc, #120]	; (80111a8 <_tx_timer_system_activate+0xbc>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	69fa      	ldr	r2, [r7, #28]
 8011134:	429a      	cmp	r2, r3
 8011136:	d30b      	bcc.n	8011150 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8011138:	4b1b      	ldr	r3, [pc, #108]	; (80111a8 <_tx_timer_system_activate+0xbc>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	69fa      	ldr	r2, [r7, #28]
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	109b      	asrs	r3, r3, #2
 8011142:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8011144:	4b19      	ldr	r3, [pc, #100]	; (80111ac <_tx_timer_system_activate+0xc0>)
 8011146:	681a      	ldr	r2, [r3, #0]
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	009b      	lsls	r3, r3, #2
 801114c:	4413      	add	r3, r2
 801114e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8011150:	69fb      	ldr	r3, [r7, #28]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d109      	bne.n	801116c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	e011      	b.n	8011190 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 801116c:	69fb      	ldr	r3, [r7, #28]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	695b      	ldr	r3, [r3, #20]
 8011176:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	687a      	ldr	r2, [r7, #4]
 801117c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	687a      	ldr	r2, [r7, #4]
 8011182:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	68fa      	ldr	r2, [r7, #12]
 8011188:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	68ba      	ldr	r2, [r7, #8]
 801118e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	69fa      	ldr	r2, [r7, #28]
 8011194:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8011196:	bf00      	nop
 8011198:	3724      	adds	r7, #36	; 0x24
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	20003a44 	.word	0x20003a44
 80111a8:	20003a40 	.word	0x20003a40
 80111ac:	20003a3c 	.word	0x20003a3c

080111b0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80111b0:	b480      	push	{r7}
 80111b2:	b087      	sub	sp, #28
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	699b      	ldr	r3, [r3, #24]
 80111bc:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d026      	beq.n	8011212 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	691b      	ldr	r3, [r3, #16]
 80111c8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80111ca:	687a      	ldr	r2, [r7, #4]
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d108      	bne.n	80111e4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	687a      	ldr	r2, [r7, #4]
 80111d8:	429a      	cmp	r2, r3
 80111da:	d117      	bne.n	801120c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	2200      	movs	r2, #0
 80111e0:	601a      	str	r2, [r3, #0]
 80111e2:	e013      	b.n	801120c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	695b      	ldr	r3, [r3, #20]
 80111e8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	68fa      	ldr	r2, [r7, #12]
 80111ee:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	693a      	ldr	r2, [r7, #16]
 80111f4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	687a      	ldr	r2, [r7, #4]
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d105      	bne.n	801120c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	697a      	ldr	r2, [r7, #20]
 8011204:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	693a      	ldr	r2, [r7, #16]
 801120a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2200      	movs	r2, #0
 8011210:	619a      	str	r2, [r3, #24]
    }
}
 8011212:	bf00      	nop
 8011214:	371c      	adds	r7, #28
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr
	...

08011220 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b098      	sub	sp, #96	; 0x60
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8011228:	2300      	movs	r3, #0
 801122a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	4a73      	ldr	r2, [pc, #460]	; (80113fc <_tx_timer_thread_entry+0x1dc>)
 8011230:	4293      	cmp	r3, r2
 8011232:	f040 80de 	bne.w	80113f2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011236:	f3ef 8310 	mrs	r3, PRIMASK
 801123a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 801123c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801123e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011240:	b672      	cpsid	i
    return(int_posture);
 8011242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8011244:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8011246:	4b6e      	ldr	r3, [pc, #440]	; (8011400 <_tx_timer_thread_entry+0x1e0>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d003      	beq.n	801125c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	f107 020c 	add.w	r2, r7, #12
 801125a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 801125c:	4b68      	ldr	r3, [pc, #416]	; (8011400 <_tx_timer_thread_entry+0x1e0>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	2200      	movs	r2, #0
 8011262:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8011264:	4b66      	ldr	r3, [pc, #408]	; (8011400 <_tx_timer_thread_entry+0x1e0>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	3304      	adds	r3, #4
 801126a:	4a65      	ldr	r2, [pc, #404]	; (8011400 <_tx_timer_thread_entry+0x1e0>)
 801126c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 801126e:	4b64      	ldr	r3, [pc, #400]	; (8011400 <_tx_timer_thread_entry+0x1e0>)
 8011270:	681a      	ldr	r2, [r3, #0]
 8011272:	4b64      	ldr	r3, [pc, #400]	; (8011404 <_tx_timer_thread_entry+0x1e4>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	429a      	cmp	r2, r3
 8011278:	d103      	bne.n	8011282 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 801127a:	4b63      	ldr	r3, [pc, #396]	; (8011408 <_tx_timer_thread_entry+0x1e8>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	4a60      	ldr	r2, [pc, #384]	; (8011400 <_tx_timer_thread_entry+0x1e0>)
 8011280:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8011282:	4b62      	ldr	r3, [pc, #392]	; (801140c <_tx_timer_thread_entry+0x1ec>)
 8011284:	2200      	movs	r2, #0
 8011286:	601a      	str	r2, [r3, #0]
 8011288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801128a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801128c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128e:	f383 8810 	msr	PRIMASK, r3
}
 8011292:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011294:	f3ef 8310 	mrs	r3, PRIMASK
 8011298:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801129a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801129c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801129e:	b672      	cpsid	i
    return(int_posture);
 80112a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80112a2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80112a4:	e07f      	b.n	80113a6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	691b      	ldr	r3, [r3, #16]
 80112ae:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80112b0:	2300      	movs	r3, #0
 80112b2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80112b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d102      	bne.n	80112c2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80112bc:	2300      	movs	r3, #0
 80112be:	60fb      	str	r3, [r7, #12]
 80112c0:	e00e      	b.n	80112e0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80112c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112c4:	695b      	ldr	r3, [r3, #20]
 80112c6:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80112c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80112cc:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80112ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80112d2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80112d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112d6:	f107 020c 	add.w	r2, r7, #12
 80112da:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80112dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112de:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80112e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b20      	cmp	r3, #32
 80112e6:	d911      	bls.n	801130c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80112e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80112f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112f2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80112f4:	2300      	movs	r3, #0
 80112f6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80112f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112fa:	f107 0208 	add.w	r2, r7, #8
 80112fe:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8011300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011302:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011304:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8011306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011308:	60bb      	str	r3, [r7, #8]
 801130a:	e01a      	b.n	8011342 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 801130c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801130e:	689b      	ldr	r3, [r3, #8]
 8011310:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8011312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8011318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801131a:	685a      	ldr	r2, [r3, #4]
 801131c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801131e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8011320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d009      	beq.n	801133c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8011328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801132a:	f107 0208 	add.w	r2, r7, #8
 801132e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8011330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011334:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8011336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011338:	60bb      	str	r3, [r7, #8]
 801133a:	e002      	b.n	8011342 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 801133c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801133e:	2200      	movs	r2, #0
 8011340:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8011342:	4a33      	ldr	r2, [pc, #204]	; (8011410 <_tx_timer_thread_entry+0x1f0>)
 8011344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011346:	6013      	str	r3, [r2, #0]
 8011348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134e:	f383 8810 	msr	PRIMASK, r3
}
 8011352:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8011354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011356:	2b00      	cmp	r3, #0
 8011358:	d002      	beq.n	8011360 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 801135a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801135c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801135e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011360:	f3ef 8310 	mrs	r3, PRIMASK
 8011364:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8011366:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8011368:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801136a:	b672      	cpsid	i
    return(int_posture);
 801136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 801136e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8011370:	4b27      	ldr	r3, [pc, #156]	; (8011410 <_tx_timer_thread_entry+0x1f0>)
 8011372:	2200      	movs	r2, #0
 8011374:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801137a:	429a      	cmp	r2, r3
 801137c:	d105      	bne.n	801138a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 801137e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011380:	2200      	movs	r2, #0
 8011382:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8011384:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011386:	f7ff feb1 	bl	80110ec <_tx_timer_system_activate>
 801138a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801138c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801138e:	69bb      	ldr	r3, [r7, #24]
 8011390:	f383 8810 	msr	PRIMASK, r3
}
 8011394:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011396:	f3ef 8310 	mrs	r3, PRIMASK
 801139a:	623b      	str	r3, [r7, #32]
    return(posture);
 801139c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801139e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80113a0:	b672      	cpsid	i
    return(int_posture);
 80113a2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80113a4:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f47f af7c 	bne.w	80112a6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80113ae:	4b17      	ldr	r3, [pc, #92]	; (801140c <_tx_timer_thread_entry+0x1ec>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d116      	bne.n	80113e4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80113b6:	4b17      	ldr	r3, [pc, #92]	; (8011414 <_tx_timer_thread_entry+0x1f4>)
 80113b8:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80113ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113bc:	2203      	movs	r2, #3
 80113be:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80113c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113c2:	2201      	movs	r2, #1
 80113c4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80113c6:	4b14      	ldr	r3, [pc, #80]	; (8011418 <_tx_timer_thread_entry+0x1f8>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	3301      	adds	r3, #1
 80113cc:	4a12      	ldr	r2, [pc, #72]	; (8011418 <_tx_timer_thread_entry+0x1f8>)
 80113ce:	6013      	str	r3, [r2, #0]
 80113d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113d2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	f383 8810 	msr	PRIMASK, r3
}
 80113da:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80113dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80113de:	f7ff fc41 	bl	8010c64 <_tx_thread_system_suspend>
 80113e2:	e728      	b.n	8011236 <_tx_timer_thread_entry+0x16>
 80113e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	f383 8810 	msr	PRIMASK, r3
}
 80113ee:	bf00      	nop
            TX_DISABLE
 80113f0:	e721      	b.n	8011236 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80113f2:	bf00      	nop
 80113f4:	3760      	adds	r7, #96	; 0x60
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	bf00      	nop
 80113fc:	4154494d 	.word	0x4154494d
 8011400:	20003a44 	.word	0x20003a44
 8011404:	20003a40 	.word	0x20003a40
 8011408:	20003a3c 	.word	0x20003a3c
 801140c:	20003a48 	.word	0x20003a48
 8011410:	20003a54 	.word	0x20003a54
 8011414:	20003a58 	.word	0x20003a58
 8011418:	200039a8 	.word	0x200039a8

0801141c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b08a      	sub	sp, #40	; 0x28
 8011420:	af00      	add	r7, sp, #0
 8011422:	60f8      	str	r0, [r7, #12]
 8011424:	60b9      	str	r1, [r7, #8]
 8011426:	607a      	str	r2, [r7, #4]
 8011428:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801142a:	2300      	movs	r3, #0
 801142c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d102      	bne.n	801143a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011434:	2302      	movs	r3, #2
 8011436:	627b      	str	r3, [r7, #36]	; 0x24
 8011438:	e029      	b.n	801148e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	4a2d      	ldr	r2, [pc, #180]	; (80114f4 <_txe_byte_allocate+0xd8>)
 8011440:	4293      	cmp	r3, r2
 8011442:	d002      	beq.n	801144a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011444:	2302      	movs	r3, #2
 8011446:	627b      	str	r3, [r7, #36]	; 0x24
 8011448:	e021      	b.n	801148e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d102      	bne.n	8011456 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8011450:	2303      	movs	r3, #3
 8011452:	627b      	str	r3, [r7, #36]	; 0x24
 8011454:	e01b      	b.n	801148e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d102      	bne.n	8011462 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801145c:	2305      	movs	r3, #5
 801145e:	627b      	str	r3, [r7, #36]	; 0x24
 8011460:	e015      	b.n	801148e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	69db      	ldr	r3, [r3, #28]
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	429a      	cmp	r2, r3
 801146a:	d902      	bls.n	8011472 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801146c:	2305      	movs	r3, #5
 801146e:	627b      	str	r3, [r7, #36]	; 0x24
 8011470:	e00d      	b.n	801148e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d00a      	beq.n	801148e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011478:	f3ef 8305 	mrs	r3, IPSR
 801147c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801147e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011480:	4b1d      	ldr	r3, [pc, #116]	; (80114f8 <_txe_byte_allocate+0xdc>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	4313      	orrs	r3, r2
 8011486:	2b00      	cmp	r3, #0
 8011488:	d001      	beq.n	801148e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801148a:	2304      	movs	r3, #4
 801148c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 801148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011490:	2b00      	cmp	r3, #0
 8011492:	d108      	bne.n	80114a6 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8011494:	4b19      	ldr	r3, [pc, #100]	; (80114fc <_txe_byte_allocate+0xe0>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801149a:	6a3b      	ldr	r3, [r7, #32]
 801149c:	4a18      	ldr	r2, [pc, #96]	; (8011500 <_txe_byte_allocate+0xe4>)
 801149e:	4293      	cmp	r3, r2
 80114a0:	d101      	bne.n	80114a6 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80114a2:	2313      	movs	r3, #19
 80114a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80114a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d114      	bne.n	80114d6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80114ac:	f3ef 8305 	mrs	r3, IPSR
 80114b0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80114b2:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80114b4:	4b10      	ldr	r3, [pc, #64]	; (80114f8 <_txe_byte_allocate+0xdc>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	4313      	orrs	r3, r2
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00b      	beq.n	80114d6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80114be:	f3ef 8305 	mrs	r3, IPSR
 80114c2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80114c4:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80114c6:	4b0c      	ldr	r3, [pc, #48]	; (80114f8 <_txe_byte_allocate+0xdc>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	4313      	orrs	r3, r2
 80114cc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80114d0:	d201      	bcs.n	80114d6 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80114d2:	2313      	movs	r3, #19
 80114d4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80114d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d106      	bne.n	80114ea <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	68b9      	ldr	r1, [r7, #8]
 80114e2:	68f8      	ldr	r0, [r7, #12]
 80114e4:	f7fd f844 	bl	800e570 <_tx_byte_allocate>
 80114e8:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 80114ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3728      	adds	r7, #40	; 0x28
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}
 80114f4:	42595445 	.word	0x42595445
 80114f8:	2000000c 	.word	0x2000000c
 80114fc:	20003910 	.word	0x20003910
 8011500:	20003a58 	.word	0x20003a58

08011504 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b092      	sub	sp, #72	; 0x48
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	607a      	str	r2, [r7, #4]
 8011510:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011512:	2300      	movs	r3, #0
 8011514:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d102      	bne.n	8011522 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801151c:	2302      	movs	r3, #2
 801151e:	647b      	str	r3, [r7, #68]	; 0x44
 8011520:	e075      	b.n	801160e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8011522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011524:	2b34      	cmp	r3, #52	; 0x34
 8011526:	d002      	beq.n	801152e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011528:	2302      	movs	r3, #2
 801152a:	647b      	str	r3, [r7, #68]	; 0x44
 801152c:	e06f      	b.n	801160e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801152e:	f3ef 8310 	mrs	r3, PRIMASK
 8011532:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011536:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011538:	b672      	cpsid	i
    return(int_posture);
 801153a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801153c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801153e:	4b3b      	ldr	r3, [pc, #236]	; (801162c <_txe_byte_pool_create+0x128>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	3301      	adds	r3, #1
 8011544:	4a39      	ldr	r2, [pc, #228]	; (801162c <_txe_byte_pool_create+0x128>)
 8011546:	6013      	str	r3, [r2, #0]
 8011548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801154a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801154c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154e:	f383 8810 	msr	PRIMASK, r3
}
 8011552:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8011554:	4b36      	ldr	r3, [pc, #216]	; (8011630 <_txe_byte_pool_create+0x12c>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801155a:	2300      	movs	r3, #0
 801155c:	643b      	str	r3, [r7, #64]	; 0x40
 801155e:	e009      	b.n	8011574 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8011560:	68fa      	ldr	r2, [r7, #12]
 8011562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011564:	429a      	cmp	r2, r3
 8011566:	d00b      	beq.n	8011580 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8011568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801156c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801156e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011570:	3301      	adds	r3, #1
 8011572:	643b      	str	r3, [r7, #64]	; 0x40
 8011574:	4b2f      	ldr	r3, [pc, #188]	; (8011634 <_txe_byte_pool_create+0x130>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801157a:	429a      	cmp	r2, r3
 801157c:	d3f0      	bcc.n	8011560 <_txe_byte_pool_create+0x5c>
 801157e:	e000      	b.n	8011582 <_txe_byte_pool_create+0x7e>
                break;
 8011580:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011582:	f3ef 8310 	mrs	r3, PRIMASK
 8011586:	623b      	str	r3, [r7, #32]
    return(posture);
 8011588:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801158a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801158c:	b672      	cpsid	i
    return(int_posture);
 801158e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011590:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8011592:	4b26      	ldr	r3, [pc, #152]	; (801162c <_txe_byte_pool_create+0x128>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	3b01      	subs	r3, #1
 8011598:	4a24      	ldr	r2, [pc, #144]	; (801162c <_txe_byte_pool_create+0x128>)
 801159a:	6013      	str	r3, [r2, #0]
 801159c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80115a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a2:	f383 8810 	msr	PRIMASK, r3
}
 80115a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80115a8:	f7ff fa22 	bl	80109f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80115ac:	68fa      	ldr	r2, [r7, #12]
 80115ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d102      	bne.n	80115ba <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80115b4:	2302      	movs	r3, #2
 80115b6:	647b      	str	r3, [r7, #68]	; 0x44
 80115b8:	e029      	b.n	801160e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d102      	bne.n	80115c6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80115c0:	2303      	movs	r3, #3
 80115c2:	647b      	str	r3, [r7, #68]	; 0x44
 80115c4:	e023      	b.n	801160e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	2b63      	cmp	r3, #99	; 0x63
 80115ca:	d802      	bhi.n	80115d2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80115cc:	2305      	movs	r3, #5
 80115ce:	647b      	str	r3, [r7, #68]	; 0x44
 80115d0:	e01d      	b.n	801160e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80115d2:	4b19      	ldr	r3, [pc, #100]	; (8011638 <_txe_byte_pool_create+0x134>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80115d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115da:	4a18      	ldr	r2, [pc, #96]	; (801163c <_txe_byte_pool_create+0x138>)
 80115dc:	4293      	cmp	r3, r2
 80115de:	d101      	bne.n	80115e4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80115e0:	2313      	movs	r3, #19
 80115e2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80115e4:	f3ef 8305 	mrs	r3, IPSR
 80115e8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80115ea:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80115ec:	4b14      	ldr	r3, [pc, #80]	; (8011640 <_txe_byte_pool_create+0x13c>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	4313      	orrs	r3, r2
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d00b      	beq.n	801160e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80115f6:	f3ef 8305 	mrs	r3, IPSR
 80115fa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80115fc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80115fe:	4b10      	ldr	r3, [pc, #64]	; (8011640 <_txe_byte_pool_create+0x13c>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	4313      	orrs	r3, r2
 8011604:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011608:	d201      	bcs.n	801160e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801160a:	2313      	movs	r3, #19
 801160c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801160e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011610:	2b00      	cmp	r3, #0
 8011612:	d106      	bne.n	8011622 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	687a      	ldr	r2, [r7, #4]
 8011618:	68b9      	ldr	r1, [r7, #8]
 801161a:	68f8      	ldr	r0, [r7, #12]
 801161c:	f7fd f8ea 	bl	800e7f4 <_tx_byte_pool_create>
 8011620:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8011622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8011624:	4618      	mov	r0, r3
 8011626:	3748      	adds	r7, #72	; 0x48
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}
 801162c:	200039a8 	.word	0x200039a8
 8011630:	20003900 	.word	0x20003900
 8011634:	20003904 	.word	0x20003904
 8011638:	20003910 	.word	0x20003910
 801163c:	20003a58 	.word	0x20003a58
 8011640:	2000000c 	.word	0x2000000c

08011644 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b092      	sub	sp, #72	; 0x48
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011650:	2300      	movs	r3, #0
 8011652:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d102      	bne.n	8011660 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801165a:	2306      	movs	r3, #6
 801165c:	647b      	str	r3, [r7, #68]	; 0x44
 801165e:	e069      	b.n	8011734 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2b24      	cmp	r3, #36	; 0x24
 8011664:	d002      	beq.n	801166c <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8011666:	2306      	movs	r3, #6
 8011668:	647b      	str	r3, [r7, #68]	; 0x44
 801166a:	e063      	b.n	8011734 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801166c:	f3ef 8310 	mrs	r3, PRIMASK
 8011670:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011674:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011676:	b672      	cpsid	i
    return(int_posture);
 8011678:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801167a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801167c:	4b34      	ldr	r3, [pc, #208]	; (8011750 <_txe_event_flags_create+0x10c>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	3301      	adds	r3, #1
 8011682:	4a33      	ldr	r2, [pc, #204]	; (8011750 <_txe_event_flags_create+0x10c>)
 8011684:	6013      	str	r3, [r2, #0]
 8011686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011688:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168c:	f383 8810 	msr	PRIMASK, r3
}
 8011690:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8011692:	4b30      	ldr	r3, [pc, #192]	; (8011754 <_txe_event_flags_create+0x110>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8011698:	2300      	movs	r3, #0
 801169a:	643b      	str	r3, [r7, #64]	; 0x40
 801169c:	e009      	b.n	80116b2 <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 801169e:	68fa      	ldr	r2, [r7, #12]
 80116a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d00b      	beq.n	80116be <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 80116a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116a8:	699b      	ldr	r3, [r3, #24]
 80116aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 80116ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116ae:	3301      	adds	r3, #1
 80116b0:	643b      	str	r3, [r7, #64]	; 0x40
 80116b2:	4b29      	ldr	r3, [pc, #164]	; (8011758 <_txe_event_flags_create+0x114>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d3f0      	bcc.n	801169e <_txe_event_flags_create+0x5a>
 80116bc:	e000      	b.n	80116c0 <_txe_event_flags_create+0x7c>
                break;
 80116be:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80116c0:	f3ef 8310 	mrs	r3, PRIMASK
 80116c4:	623b      	str	r3, [r7, #32]
    return(posture);
 80116c6:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80116c8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80116ca:	b672      	cpsid	i
    return(int_posture);
 80116cc:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80116ce:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80116d0:	4b1f      	ldr	r3, [pc, #124]	; (8011750 <_txe_event_flags_create+0x10c>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	3b01      	subs	r3, #1
 80116d6:	4a1e      	ldr	r2, [pc, #120]	; (8011750 <_txe_event_flags_create+0x10c>)
 80116d8:	6013      	str	r3, [r2, #0]
 80116da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116dc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e0:	f383 8810 	msr	PRIMASK, r3
}
 80116e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80116e6:	f7ff f983 	bl	80109f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 80116ea:	68fa      	ldr	r2, [r7, #12]
 80116ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d102      	bne.n	80116f8 <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 80116f2:	2306      	movs	r3, #6
 80116f4:	647b      	str	r3, [r7, #68]	; 0x44
 80116f6:	e01d      	b.n	8011734 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80116f8:	4b18      	ldr	r3, [pc, #96]	; (801175c <_txe_event_flags_create+0x118>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80116fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011700:	4a17      	ldr	r2, [pc, #92]	; (8011760 <_txe_event_flags_create+0x11c>)
 8011702:	4293      	cmp	r3, r2
 8011704:	d101      	bne.n	801170a <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011706:	2313      	movs	r3, #19
 8011708:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801170a:	f3ef 8305 	mrs	r3, IPSR
 801170e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011710:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011712:	4b14      	ldr	r3, [pc, #80]	; (8011764 <_txe_event_flags_create+0x120>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	4313      	orrs	r3, r2
 8011718:	2b00      	cmp	r3, #0
 801171a:	d00b      	beq.n	8011734 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801171c:	f3ef 8305 	mrs	r3, IPSR
 8011720:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011722:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011724:	4b0f      	ldr	r3, [pc, #60]	; (8011764 <_txe_event_flags_create+0x120>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4313      	orrs	r3, r2
 801172a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801172e:	d201      	bcs.n	8011734 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8011730:	2313      	movs	r3, #19
 8011732:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011736:	2b00      	cmp	r3, #0
 8011738:	d104      	bne.n	8011744 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 801173a:	68b9      	ldr	r1, [r7, #8]
 801173c:	68f8      	ldr	r0, [r7, #12]
 801173e:	f7fd fa83 	bl	800ec48 <_tx_event_flags_create>
 8011742:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8011744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8011746:	4618      	mov	r0, r3
 8011748:	3748      	adds	r7, #72	; 0x48
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}
 801174e:	bf00      	nop
 8011750:	200039a8 	.word	0x200039a8
 8011754:	200038e8 	.word	0x200038e8
 8011758:	200038ec 	.word	0x200038ec
 801175c:	20003910 	.word	0x20003910
 8011760:	20003a58 	.word	0x20003a58
 8011764:	2000000c 	.word	0x2000000c

08011768 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b08a      	sub	sp, #40	; 0x28
 801176c:	af02      	add	r7, sp, #8
 801176e:	60f8      	str	r0, [r7, #12]
 8011770:	60b9      	str	r1, [r7, #8]
 8011772:	607a      	str	r2, [r7, #4]
 8011774:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011776:	2300      	movs	r3, #0
 8011778:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d102      	bne.n	8011786 <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8011780:	2306      	movs	r3, #6
 8011782:	61fb      	str	r3, [r7, #28]
 8011784:	e025      	b.n	80117d2 <_txe_event_flags_get+0x6a>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	4a1e      	ldr	r2, [pc, #120]	; (8011804 <_txe_event_flags_get+0x9c>)
 801178c:	4293      	cmp	r3, r2
 801178e:	d002      	beq.n	8011796 <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8011790:	2306      	movs	r3, #6
 8011792:	61fb      	str	r3, [r7, #28]
 8011794:	e01d      	b.n	80117d2 <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d102      	bne.n	80117a2 <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801179c:	2303      	movs	r3, #3
 801179e:	61fb      	str	r3, [r7, #28]
 80117a0:	e017      	b.n	80117d2 <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80117a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d014      	beq.n	80117d2 <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80117a8:	f3ef 8305 	mrs	r3, IPSR
 80117ac:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80117ae:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80117b0:	4b15      	ldr	r3, [pc, #84]	; (8011808 <_txe_event_flags_get+0xa0>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	4313      	orrs	r3, r2
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d002      	beq.n	80117c0 <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80117ba:	2304      	movs	r3, #4
 80117bc:	61fb      	str	r3, [r7, #28]
 80117be:	e008      	b.n	80117d2 <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80117c0:	4b12      	ldr	r3, [pc, #72]	; (801180c <_txe_event_flags_get+0xa4>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	4a11      	ldr	r2, [pc, #68]	; (8011810 <_txe_event_flags_get+0xa8>)
 80117ca:	4293      	cmp	r3, r2
 80117cc:	d101      	bne.n	80117d2 <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80117ce:	2304      	movs	r3, #4
 80117d0:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d104      	bne.n	80117e2 <_txe_event_flags_get+0x7a>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2b03      	cmp	r3, #3
 80117dc:	d901      	bls.n	80117e2 <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 80117de:	2308      	movs	r3, #8
 80117e0:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80117e2:	69fb      	ldr	r3, [r7, #28]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d108      	bne.n	80117fa <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 80117e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ea:	9300      	str	r3, [sp, #0]
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	687a      	ldr	r2, [r7, #4]
 80117f0:	68b9      	ldr	r1, [r7, #8]
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	f7fd fa76 	bl	800ece4 <_tx_event_flags_get>
 80117f8:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80117fa:	69fb      	ldr	r3, [r7, #28]
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3720      	adds	r7, #32
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	4456444e 	.word	0x4456444e
 8011808:	2000000c 	.word	0x2000000c
 801180c:	20003910 	.word	0x20003910
 8011810:	20003a58 	.word	0x20003a58

08011814 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b086      	sub	sp, #24
 8011818:	af00      	add	r7, sp, #0
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011820:	2300      	movs	r3, #0
 8011822:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d102      	bne.n	8011830 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801182a:	2306      	movs	r3, #6
 801182c:	617b      	str	r3, [r7, #20]
 801182e:	e00f      	b.n	8011850 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	4a0d      	ldr	r2, [pc, #52]	; (801186c <_txe_event_flags_set+0x58>)
 8011836:	4293      	cmp	r3, r2
 8011838:	d002      	beq.n	8011840 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801183a:	2306      	movs	r3, #6
 801183c:	617b      	str	r3, [r7, #20]
 801183e:	e007      	b.n	8011850 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2b02      	cmp	r3, #2
 8011844:	d004      	beq.n	8011850 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d001      	beq.n	8011850 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 801184c:	2308      	movs	r3, #8
 801184e:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d105      	bne.n	8011862 <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	68b9      	ldr	r1, [r7, #8]
 801185a:	68f8      	ldr	r0, [r7, #12]
 801185c:	f7fd fb2c 	bl	800eeb8 <_tx_event_flags_set>
 8011860:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8011862:	697b      	ldr	r3, [r7, #20]
}
 8011864:	4618      	mov	r0, r3
 8011866:	3718      	adds	r7, #24
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	4456444e 	.word	0x4456444e

08011870 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b092      	sub	sp, #72	; 0x48
 8011874:	af00      	add	r7, sp, #0
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	60b9      	str	r1, [r7, #8]
 801187a:	607a      	str	r2, [r7, #4]
 801187c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801187e:	2300      	movs	r3, #0
 8011880:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d102      	bne.n	801188e <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8011888:	231c      	movs	r3, #28
 801188a:	647b      	str	r3, [r7, #68]	; 0x44
 801188c:	e053      	b.n	8011936 <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	2b34      	cmp	r3, #52	; 0x34
 8011892:	d002      	beq.n	801189a <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8011894:	231c      	movs	r3, #28
 8011896:	647b      	str	r3, [r7, #68]	; 0x44
 8011898:	e04d      	b.n	8011936 <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801189a:	f3ef 8310 	mrs	r3, PRIMASK
 801189e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80118a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80118a2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80118a4:	b672      	cpsid	i
    return(int_posture);
 80118a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80118a8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80118aa:	4b3a      	ldr	r3, [pc, #232]	; (8011994 <_txe_mutex_create+0x124>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	3301      	adds	r3, #1
 80118b0:	4a38      	ldr	r2, [pc, #224]	; (8011994 <_txe_mutex_create+0x124>)
 80118b2:	6013      	str	r3, [r2, #0]
 80118b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80118b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ba:	f383 8810 	msr	PRIMASK, r3
}
 80118be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 80118c0:	4b35      	ldr	r3, [pc, #212]	; (8011998 <_txe_mutex_create+0x128>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80118c6:	2300      	movs	r3, #0
 80118c8:	643b      	str	r3, [r7, #64]	; 0x40
 80118ca:	e009      	b.n	80118e0 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 80118cc:	68fa      	ldr	r2, [r7, #12]
 80118ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d00b      	beq.n	80118ec <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 80118d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118d6:	6a1b      	ldr	r3, [r3, #32]
 80118d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80118da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118dc:	3301      	adds	r3, #1
 80118de:	643b      	str	r3, [r7, #64]	; 0x40
 80118e0:	4b2e      	ldr	r3, [pc, #184]	; (801199c <_txe_mutex_create+0x12c>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d3f0      	bcc.n	80118cc <_txe_mutex_create+0x5c>
 80118ea:	e000      	b.n	80118ee <_txe_mutex_create+0x7e>
                break;
 80118ec:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80118ee:	f3ef 8310 	mrs	r3, PRIMASK
 80118f2:	623b      	str	r3, [r7, #32]
    return(posture);
 80118f4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80118f6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80118f8:	b672      	cpsid	i
    return(int_posture);
 80118fa:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80118fc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80118fe:	4b25      	ldr	r3, [pc, #148]	; (8011994 <_txe_mutex_create+0x124>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	3b01      	subs	r3, #1
 8011904:	4a23      	ldr	r2, [pc, #140]	; (8011994 <_txe_mutex_create+0x124>)
 8011906:	6013      	str	r3, [r2, #0]
 8011908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801190a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190e:	f383 8810 	msr	PRIMASK, r3
}
 8011912:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011914:	f7ff f86c 	bl	80109f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8011918:	68fa      	ldr	r2, [r7, #12]
 801191a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801191c:	429a      	cmp	r2, r3
 801191e:	d102      	bne.n	8011926 <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8011920:	231c      	movs	r3, #28
 8011922:	647b      	str	r3, [r7, #68]	; 0x44
 8011924:	e007      	b.n	8011936 <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2b01      	cmp	r3, #1
 801192a:	d004      	beq.n	8011936 <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d001      	beq.n	8011936 <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8011932:	231f      	movs	r3, #31
 8011934:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011938:	2b00      	cmp	r3, #0
 801193a:	d11d      	bne.n	8011978 <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801193c:	4b18      	ldr	r3, [pc, #96]	; (80119a0 <_txe_mutex_create+0x130>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8011942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011944:	4a17      	ldr	r2, [pc, #92]	; (80119a4 <_txe_mutex_create+0x134>)
 8011946:	4293      	cmp	r3, r2
 8011948:	d101      	bne.n	801194e <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801194a:	2313      	movs	r3, #19
 801194c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801194e:	f3ef 8305 	mrs	r3, IPSR
 8011952:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011954:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011956:	4b14      	ldr	r3, [pc, #80]	; (80119a8 <_txe_mutex_create+0x138>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	4313      	orrs	r3, r2
 801195c:	2b00      	cmp	r3, #0
 801195e:	d00b      	beq.n	8011978 <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011960:	f3ef 8305 	mrs	r3, IPSR
 8011964:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011966:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011968:	4b0f      	ldr	r3, [pc, #60]	; (80119a8 <_txe_mutex_create+0x138>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	4313      	orrs	r3, r2
 801196e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011972:	d201      	bcs.n	8011978 <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011974:	2313      	movs	r3, #19
 8011976:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801197a:	2b00      	cmp	r3, #0
 801197c:	d105      	bne.n	801198a <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	68b9      	ldr	r1, [r7, #8]
 8011982:	68f8      	ldr	r0, [r7, #12]
 8011984:	f7fd fdd6 	bl	800f534 <_tx_mutex_create>
 8011988:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801198a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801198c:	4618      	mov	r0, r3
 801198e:	3748      	adds	r7, #72	; 0x48
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}
 8011994:	200039a8 	.word	0x200039a8
 8011998:	200038f0 	.word	0x200038f0
 801199c:	200038f4 	.word	0x200038f4
 80119a0:	20003910 	.word	0x20003910
 80119a4:	20003a58 	.word	0x20003a58
 80119a8:	2000000c 	.word	0x2000000c

080119ac <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b086      	sub	sp, #24
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 80119b4:	2300      	movs	r3, #0
 80119b6:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d102      	bne.n	80119c4 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80119be:	231c      	movs	r3, #28
 80119c0:	617b      	str	r3, [r7, #20]
 80119c2:	e023      	b.n	8011a0c <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	4a13      	ldr	r2, [pc, #76]	; (8011a18 <_txe_mutex_delete+0x6c>)
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d002      	beq.n	80119d4 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80119ce:	231c      	movs	r3, #28
 80119d0:	617b      	str	r3, [r7, #20]
 80119d2:	e01b      	b.n	8011a0c <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80119d4:	f3ef 8305 	mrs	r3, IPSR
 80119d8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80119da:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80119dc:	4b0f      	ldr	r3, [pc, #60]	; (8011a1c <_txe_mutex_delete+0x70>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	4313      	orrs	r3, r2
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d002      	beq.n	80119ec <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80119e6:	2313      	movs	r3, #19
 80119e8:	617b      	str	r3, [r7, #20]
 80119ea:	e00f      	b.n	8011a0c <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80119ec:	4b0c      	ldr	r3, [pc, #48]	; (8011a20 <_txe_mutex_delete+0x74>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	4a0b      	ldr	r2, [pc, #44]	; (8011a24 <_txe_mutex_delete+0x78>)
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d101      	bne.n	80119fe <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80119fa:	2313      	movs	r3, #19
 80119fc:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d103      	bne.n	8011a0c <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f7fd fdef 	bl	800f5e8 <_tx_mutex_delete>
 8011a0a:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8011a0c:	697b      	ldr	r3, [r7, #20]
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3718      	adds	r7, #24
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	4d555445 	.word	0x4d555445
 8011a1c:	2000000c 	.word	0x2000000c
 8011a20:	20003910 	.word	0x20003910
 8011a24:	20003a58 	.word	0x20003a58

08011a28 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b088      	sub	sp, #32
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011a32:	2300      	movs	r3, #0
 8011a34:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d102      	bne.n	8011a42 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8011a3c:	231c      	movs	r3, #28
 8011a3e:	61fb      	str	r3, [r7, #28]
 8011a40:	e01f      	b.n	8011a82 <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4a21      	ldr	r2, [pc, #132]	; (8011acc <_txe_mutex_get+0xa4>)
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d002      	beq.n	8011a52 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8011a4c:	231c      	movs	r3, #28
 8011a4e:	61fb      	str	r3, [r7, #28]
 8011a50:	e017      	b.n	8011a82 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d014      	beq.n	8011a82 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011a58:	f3ef 8305 	mrs	r3, IPSR
 8011a5c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011a5e:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011a60:	4b1b      	ldr	r3, [pc, #108]	; (8011ad0 <_txe_mutex_get+0xa8>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4313      	orrs	r3, r2
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d002      	beq.n	8011a70 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8011a6a:	2304      	movs	r3, #4
 8011a6c:	61fb      	str	r3, [r7, #28]
 8011a6e:	e008      	b.n	8011a82 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8011a70:	4b18      	ldr	r3, [pc, #96]	; (8011ad4 <_txe_mutex_get+0xac>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8011a76:	69bb      	ldr	r3, [r7, #24]
 8011a78:	4a17      	ldr	r2, [pc, #92]	; (8011ad8 <_txe_mutex_get+0xb0>)
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	d101      	bne.n	8011a82 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8011a7e:	2304      	movs	r3, #4
 8011a80:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011a82:	69fb      	ldr	r3, [r7, #28]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d114      	bne.n	8011ab2 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011a88:	f3ef 8305 	mrs	r3, IPSR
 8011a8c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011a8e:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011a90:	4b0f      	ldr	r3, [pc, #60]	; (8011ad0 <_txe_mutex_get+0xa8>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	4313      	orrs	r3, r2
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d00b      	beq.n	8011ab2 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011a9a:	f3ef 8305 	mrs	r3, IPSR
 8011a9e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011aa0:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011aa2:	4b0b      	ldr	r3, [pc, #44]	; (8011ad0 <_txe_mutex_get+0xa8>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	4313      	orrs	r3, r2
 8011aa8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011aac:	d201      	bcs.n	8011ab2 <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011aae:	2313      	movs	r3, #19
 8011ab0:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d104      	bne.n	8011ac2 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8011ab8:	6839      	ldr	r1, [r7, #0]
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f7fd fe3e 	bl	800f73c <_tx_mutex_get>
 8011ac0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8011ac2:	69fb      	ldr	r3, [r7, #28]
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3720      	adds	r7, #32
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	4d555445 	.word	0x4d555445
 8011ad0:	2000000c 	.word	0x2000000c
 8011ad4:	20003910 	.word	0x20003910
 8011ad8:	20003a58 	.word	0x20003a58

08011adc <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b086      	sub	sp, #24
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d102      	bne.n	8011af4 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8011aee:	231c      	movs	r3, #28
 8011af0:	617b      	str	r3, [r7, #20]
 8011af2:	e01c      	b.n	8011b2e <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4a13      	ldr	r2, [pc, #76]	; (8011b48 <_txe_mutex_put+0x6c>)
 8011afa:	4293      	cmp	r3, r2
 8011afc:	d002      	beq.n	8011b04 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8011afe:	231c      	movs	r3, #28
 8011b00:	617b      	str	r3, [r7, #20]
 8011b02:	e014      	b.n	8011b2e <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011b04:	f3ef 8305 	mrs	r3, IPSR
 8011b08:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011b0a:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011b0c:	4b0f      	ldr	r3, [pc, #60]	; (8011b4c <_txe_mutex_put+0x70>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	4313      	orrs	r3, r2
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d00b      	beq.n	8011b2e <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011b16:	f3ef 8305 	mrs	r3, IPSR
 8011b1a:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011b1c:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011b1e:	4b0b      	ldr	r3, [pc, #44]	; (8011b4c <_txe_mutex_put+0x70>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	4313      	orrs	r3, r2
 8011b24:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011b28:	d201      	bcs.n	8011b2e <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011b2a:	2313      	movs	r3, #19
 8011b2c:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d103      	bne.n	8011b3c <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f7fe f879 	bl	800fc2c <_tx_mutex_put>
 8011b3a:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8011b3c:	697b      	ldr	r3, [r7, #20]
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3718      	adds	r7, #24
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	4d555445 	.word	0x4d555445
 8011b4c:	2000000c 	.word	0x2000000c

08011b50 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b092      	sub	sp, #72	; 0x48
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	607a      	str	r2, [r7, #4]
 8011b5c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d102      	bne.n	8011b6e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011b68:	230c      	movs	r3, #12
 8011b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8011b6c:	e054      	b.n	8011c18 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	2b1c      	cmp	r3, #28
 8011b72:	d002      	beq.n	8011b7a <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011b74:	230c      	movs	r3, #12
 8011b76:	647b      	str	r3, [r7, #68]	; 0x44
 8011b78:	e04e      	b.n	8011c18 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8011b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011b82:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011b84:	b672      	cpsid	i
    return(int_posture);
 8011b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011b88:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8011b8a:	4b36      	ldr	r3, [pc, #216]	; (8011c64 <_txe_semaphore_create+0x114>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	3301      	adds	r3, #1
 8011b90:	4a34      	ldr	r2, [pc, #208]	; (8011c64 <_txe_semaphore_create+0x114>)
 8011b92:	6013      	str	r3, [r2, #0]
 8011b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b96:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b9a:	f383 8810 	msr	PRIMASK, r3
}
 8011b9e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8011ba0:	4b31      	ldr	r3, [pc, #196]	; (8011c68 <_txe_semaphore_create+0x118>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8011baa:	e009      	b.n	8011bc0 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8011bac:	68fa      	ldr	r2, [r7, #12]
 8011bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d00b      	beq.n	8011bcc <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8011bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bb6:	695b      	ldr	r3, [r3, #20]
 8011bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8011bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	643b      	str	r3, [r7, #64]	; 0x40
 8011bc0:	4b2a      	ldr	r3, [pc, #168]	; (8011c6c <_txe_semaphore_create+0x11c>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d3f0      	bcc.n	8011bac <_txe_semaphore_create+0x5c>
 8011bca:	e000      	b.n	8011bce <_txe_semaphore_create+0x7e>
                break;
 8011bcc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011bce:	f3ef 8310 	mrs	r3, PRIMASK
 8011bd2:	623b      	str	r3, [r7, #32]
    return(posture);
 8011bd4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011bd6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011bd8:	b672      	cpsid	i
    return(int_posture);
 8011bda:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011bdc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8011bde:	4b21      	ldr	r3, [pc, #132]	; (8011c64 <_txe_semaphore_create+0x114>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	3b01      	subs	r3, #1
 8011be4:	4a1f      	ldr	r2, [pc, #124]	; (8011c64 <_txe_semaphore_create+0x114>)
 8011be6:	6013      	str	r3, [r2, #0]
 8011be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bee:	f383 8810 	msr	PRIMASK, r3
}
 8011bf2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011bf4:	f7fe fefc 	bl	80109f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8011bf8:	68fa      	ldr	r2, [r7, #12]
 8011bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d102      	bne.n	8011c06 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8011c00:	230c      	movs	r3, #12
 8011c02:	647b      	str	r3, [r7, #68]	; 0x44
 8011c04:	e008      	b.n	8011c18 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011c06:	4b1a      	ldr	r3, [pc, #104]	; (8011c70 <_txe_semaphore_create+0x120>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8011c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c0e:	4a19      	ldr	r2, [pc, #100]	; (8011c74 <_txe_semaphore_create+0x124>)
 8011c10:	4293      	cmp	r3, r2
 8011c12:	d101      	bne.n	8011c18 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011c14:	2313      	movs	r3, #19
 8011c16:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d114      	bne.n	8011c48 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c1e:	f3ef 8305 	mrs	r3, IPSR
 8011c22:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011c24:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011c26:	4b14      	ldr	r3, [pc, #80]	; (8011c78 <_txe_semaphore_create+0x128>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	4313      	orrs	r3, r2
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d00b      	beq.n	8011c48 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c30:	f3ef 8305 	mrs	r3, IPSR
 8011c34:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011c36:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011c38:	4b0f      	ldr	r3, [pc, #60]	; (8011c78 <_txe_semaphore_create+0x128>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	4313      	orrs	r3, r2
 8011c3e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011c42:	d201      	bcs.n	8011c48 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011c44:	2313      	movs	r3, #19
 8011c46:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d105      	bne.n	8011c5a <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8011c4e:	687a      	ldr	r2, [r7, #4]
 8011c50:	68b9      	ldr	r1, [r7, #8]
 8011c52:	68f8      	ldr	r0, [r7, #12]
 8011c54:	f7fe fa8c 	bl	8010170 <_tx_semaphore_create>
 8011c58:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8011c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3748      	adds	r7, #72	; 0x48
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	200039a8 	.word	0x200039a8
 8011c68:	200038d8 	.word	0x200038d8
 8011c6c:	200038dc 	.word	0x200038dc
 8011c70:	20003910 	.word	0x20003910
 8011c74:	20003a58 	.word	0x20003a58
 8011c78:	2000000c 	.word	0x2000000c

08011c7c <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b086      	sub	sp, #24
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011c84:	2300      	movs	r3, #0
 8011c86:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d102      	bne.n	8011c94 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011c8e:	230c      	movs	r3, #12
 8011c90:	617b      	str	r3, [r7, #20]
 8011c92:	e01c      	b.n	8011cce <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	4a13      	ldr	r2, [pc, #76]	; (8011ce8 <_txe_semaphore_delete+0x6c>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d002      	beq.n	8011ca4 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011c9e:	230c      	movs	r3, #12
 8011ca0:	617b      	str	r3, [r7, #20]
 8011ca2:	e014      	b.n	8011cce <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011ca4:	f3ef 8305 	mrs	r3, IPSR
 8011ca8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011caa:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011cac:	4b0f      	ldr	r3, [pc, #60]	; (8011cec <_txe_semaphore_delete+0x70>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	4313      	orrs	r3, r2
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d002      	beq.n	8011cbc <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8011cb6:	2313      	movs	r3, #19
 8011cb8:	617b      	str	r3, [r7, #20]
 8011cba:	e008      	b.n	8011cce <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011cbc:	4b0c      	ldr	r3, [pc, #48]	; (8011cf0 <_txe_semaphore_delete+0x74>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	4a0b      	ldr	r2, [pc, #44]	; (8011cf4 <_txe_semaphore_delete+0x78>)
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d101      	bne.n	8011cce <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011cca:	2313      	movs	r3, #19
 8011ccc:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d103      	bne.n	8011cdc <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f7fe fa9d 	bl	8010214 <_tx_semaphore_delete>
 8011cda:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8011cdc:	697b      	ldr	r3, [r7, #20]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3718      	adds	r7, #24
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	53454d41 	.word	0x53454d41
 8011cec:	2000000c 	.word	0x2000000c
 8011cf0:	20003910 	.word	0x20003910
 8011cf4:	20003a58 	.word	0x20003a58

08011cf8 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b086      	sub	sp, #24
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011d02:	2300      	movs	r3, #0
 8011d04:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d102      	bne.n	8011d12 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011d0c:	230c      	movs	r3, #12
 8011d0e:	617b      	str	r3, [r7, #20]
 8011d10:	e01f      	b.n	8011d52 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	4a15      	ldr	r2, [pc, #84]	; (8011d6c <_txe_semaphore_get+0x74>)
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d002      	beq.n	8011d22 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011d1c:	230c      	movs	r3, #12
 8011d1e:	617b      	str	r3, [r7, #20]
 8011d20:	e017      	b.n	8011d52 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d014      	beq.n	8011d52 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011d28:	f3ef 8305 	mrs	r3, IPSR
 8011d2c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011d2e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011d30:	4b0f      	ldr	r3, [pc, #60]	; (8011d70 <_txe_semaphore_get+0x78>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	4313      	orrs	r3, r2
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d002      	beq.n	8011d40 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8011d3a:	2304      	movs	r3, #4
 8011d3c:	617b      	str	r3, [r7, #20]
 8011d3e:	e008      	b.n	8011d52 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8011d40:	4b0c      	ldr	r3, [pc, #48]	; (8011d74 <_txe_semaphore_get+0x7c>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	4a0b      	ldr	r2, [pc, #44]	; (8011d78 <_txe_semaphore_get+0x80>)
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	d101      	bne.n	8011d52 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8011d4e:	2304      	movs	r3, #4
 8011d50:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011d52:	697b      	ldr	r3, [r7, #20]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d104      	bne.n	8011d62 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8011d58:	6839      	ldr	r1, [r7, #0]
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f7fe faea 	bl	8010334 <_tx_semaphore_get>
 8011d60:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8011d62:	697b      	ldr	r3, [r7, #20]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3718      	adds	r7, #24
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	53454d41 	.word	0x53454d41
 8011d70:	2000000c 	.word	0x2000000c
 8011d74:	20003910 	.word	0x20003910
 8011d78:	20003a58 	.word	0x20003a58

08011d7c <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d102      	bne.n	8011d90 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011d8a:	230c      	movs	r3, #12
 8011d8c:	60fb      	str	r3, [r7, #12]
 8011d8e:	e00b      	b.n	8011da8 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4a07      	ldr	r2, [pc, #28]	; (8011db4 <_txe_semaphore_put+0x38>)
 8011d96:	4293      	cmp	r3, r2
 8011d98:	d002      	beq.n	8011da0 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011d9a:	230c      	movs	r3, #12
 8011d9c:	60fb      	str	r3, [r7, #12]
 8011d9e:	e003      	b.n	8011da8 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f7fe fb59 	bl	8010458 <_tx_semaphore_put>
 8011da6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8011da8:	68fb      	ldr	r3, [r7, #12]
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3710      	adds	r7, #16
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	53454d41 	.word	0x53454d41

08011db8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b09a      	sub	sp, #104	; 0x68
 8011dbc:	af06      	add	r7, sp, #24
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	60b9      	str	r1, [r7, #8]
 8011dc2:	607a      	str	r2, [r7, #4]
 8011dc4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d102      	bne.n	8011dd6 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011dd0:	230e      	movs	r3, #14
 8011dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011dd4:	e0bb      	b.n	8011f4e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8011dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011dd8:	2bb0      	cmp	r3, #176	; 0xb0
 8011dda:	d002      	beq.n	8011de2 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011ddc:	230e      	movs	r3, #14
 8011dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011de0:	e0b5      	b.n	8011f4e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011de2:	f3ef 8310 	mrs	r3, PRIMASK
 8011de6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8011de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8011dea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8011dec:	b672      	cpsid	i
    return(int_posture);
 8011dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011df0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8011df2:	4b64      	ldr	r3, [pc, #400]	; (8011f84 <_txe_thread_create+0x1cc>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	3301      	adds	r3, #1
 8011df8:	4a62      	ldr	r2, [pc, #392]	; (8011f84 <_txe_thread_create+0x1cc>)
 8011dfa:	6013      	str	r3, [r2, #0]
 8011dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e02:	f383 8810 	msr	PRIMASK, r3
}
 8011e06:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8011e08:	2300      	movs	r3, #0
 8011e0a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8011e0c:	4b5e      	ldr	r3, [pc, #376]	; (8011f88 <_txe_thread_create+0x1d0>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8011e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e14:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8011e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e18:	3b01      	subs	r3, #1
 8011e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e1c:	4413      	add	r3, r2
 8011e1e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8011e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e22:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8011e24:	2300      	movs	r3, #0
 8011e26:	647b      	str	r3, [r7, #68]	; 0x44
 8011e28:	e02b      	b.n	8011e82 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8011e2a:	68fa      	ldr	r2, [r7, #12]
 8011e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d101      	bne.n	8011e36 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8011e32:	2301      	movs	r3, #1
 8011e34:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8011e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d028      	beq.n	8011e8e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8011e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d308      	bcc.n	8011e58 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8011e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e48:	691b      	ldr	r3, [r3, #16]
 8011e4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	d203      	bcs.n	8011e58 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8011e50:	2300      	movs	r3, #0
 8011e52:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8011e54:	2301      	movs	r3, #1
 8011e56:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8011e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d308      	bcc.n	8011e74 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8011e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e64:	691b      	ldr	r3, [r3, #16]
 8011e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d203      	bcs.n	8011e74 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8011e70:	2301      	movs	r3, #1
 8011e72:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8011e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e7a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8011e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e7e:	3301      	adds	r3, #1
 8011e80:	647b      	str	r3, [r7, #68]	; 0x44
 8011e82:	4b42      	ldr	r3, [pc, #264]	; (8011f8c <_txe_thread_create+0x1d4>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d3ce      	bcc.n	8011e2a <_txe_thread_create+0x72>
 8011e8c:	e000      	b.n	8011e90 <_txe_thread_create+0xd8>
                break;
 8011e8e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e90:	f3ef 8310 	mrs	r3, PRIMASK
 8011e94:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011e96:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011e98:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e9a:	b672      	cpsid	i
    return(int_posture);
 8011e9c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011e9e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8011ea0:	4b38      	ldr	r3, [pc, #224]	; (8011f84 <_txe_thread_create+0x1cc>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	3b01      	subs	r3, #1
 8011ea6:	4a37      	ldr	r2, [pc, #220]	; (8011f84 <_txe_thread_create+0x1cc>)
 8011ea8:	6013      	str	r3, [r2, #0]
 8011eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eac:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011eae:	6a3b      	ldr	r3, [r7, #32]
 8011eb0:	f383 8810 	msr	PRIMASK, r3
}
 8011eb4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011eb6:	f7fe fd9b 	bl	80109f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8011eba:	68fa      	ldr	r2, [r7, #12]
 8011ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d102      	bne.n	8011ec8 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8011ec2:	230e      	movs	r3, #14
 8011ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ec6:	e042      	b.n	8011f4e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8011ec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d102      	bne.n	8011ed4 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8011ece:	2303      	movs	r3, #3
 8011ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ed2:	e03c      	b.n	8011f4e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d102      	bne.n	8011ee0 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8011eda:	2303      	movs	r3, #3
 8011edc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ede:	e036      	b.n	8011f4e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8011ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ee2:	2bc7      	cmp	r3, #199	; 0xc7
 8011ee4:	d802      	bhi.n	8011eec <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8011ee6:	2305      	movs	r3, #5
 8011ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011eea:	e030      	b.n	8011f4e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8011eec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011eee:	2b1f      	cmp	r3, #31
 8011ef0:	d902      	bls.n	8011ef8 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8011ef2:	230f      	movs	r3, #15
 8011ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ef6:	e02a      	b.n	8011f4e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8011ef8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011efc:	429a      	cmp	r2, r3
 8011efe:	d902      	bls.n	8011f06 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8011f00:	2318      	movs	r3, #24
 8011f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f04:	e023      	b.n	8011f4e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8011f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f08:	2b01      	cmp	r3, #1
 8011f0a:	d902      	bls.n	8011f12 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8011f0c:	2310      	movs	r3, #16
 8011f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f10:	e01d      	b.n	8011f4e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8011f12:	4b1f      	ldr	r3, [pc, #124]	; (8011f90 <_txe_thread_create+0x1d8>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8011f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1a:	4a1e      	ldr	r2, [pc, #120]	; (8011f94 <_txe_thread_create+0x1dc>)
 8011f1c:	4293      	cmp	r3, r2
 8011f1e:	d101      	bne.n	8011f24 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011f20:	2313      	movs	r3, #19
 8011f22:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011f24:	f3ef 8305 	mrs	r3, IPSR
 8011f28:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011f2a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011f2c:	4b1a      	ldr	r3, [pc, #104]	; (8011f98 <_txe_thread_create+0x1e0>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4313      	orrs	r3, r2
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d00b      	beq.n	8011f4e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011f36:	f3ef 8305 	mrs	r3, IPSR
 8011f3a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011f3c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011f3e:	4b16      	ldr	r3, [pc, #88]	; (8011f98 <_txe_thread_create+0x1e0>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	4313      	orrs	r3, r2
 8011f44:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011f48:	d201      	bcs.n	8011f4e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8011f4a:	2313      	movs	r3, #19
 8011f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d112      	bne.n	8011f7a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8011f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f56:	9305      	str	r3, [sp, #20]
 8011f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011f5a:	9304      	str	r3, [sp, #16]
 8011f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f5e:	9303      	str	r3, [sp, #12]
 8011f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f62:	9302      	str	r3, [sp, #8]
 8011f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f66:	9301      	str	r3, [sp, #4]
 8011f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f6a:	9300      	str	r3, [sp, #0]
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	68b9      	ldr	r1, [r7, #8]
 8011f72:	68f8      	ldr	r0, [r7, #12]
 8011f74:	f7fe fac8 	bl	8010508 <_tx_thread_create>
 8011f78:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8011f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3750      	adds	r7, #80	; 0x50
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	200039a8 	.word	0x200039a8
 8011f88:	20003918 	.word	0x20003918
 8011f8c:	2000391c 	.word	0x2000391c
 8011f90:	20003910 	.word	0x20003910
 8011f94:	20003a58 	.word	0x20003a58
 8011f98:	2000000c 	.word	0x2000000c

08011f9c <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b08c      	sub	sp, #48	; 0x30
 8011fa0:	af06      	add	r7, sp, #24
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	607a      	str	r2, [r7, #4]
 8011fa8:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d102      	bne.n	8011fb6 <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011fb0:	230e      	movs	r3, #14
 8011fb2:	617b      	str	r3, [r7, #20]
 8011fb4:	e018      	b.n	8011fe8 <_txe_thread_info_get+0x4c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	4a0e      	ldr	r2, [pc, #56]	; (8011ff4 <_txe_thread_info_get+0x58>)
 8011fbc:	4293      	cmp	r3, r2
 8011fbe:	d002      	beq.n	8011fc6 <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011fc0:	230e      	movs	r3, #14
 8011fc2:	617b      	str	r3, [r7, #20]
 8011fc4:	e010      	b.n	8011fe8 <_txe_thread_info_get+0x4c>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 8011fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc8:	9304      	str	r3, [sp, #16]
 8011fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fcc:	9303      	str	r3, [sp, #12]
 8011fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd0:	9302      	str	r3, [sp, #8]
 8011fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd4:	9301      	str	r3, [sp, #4]
 8011fd6:	6a3b      	ldr	r3, [r7, #32]
 8011fd8:	9300      	str	r3, [sp, #0]
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	68b9      	ldr	r1, [r7, #8]
 8011fe0:	68f8      	ldr	r0, [r7, #12]
 8011fe2:	f7fe fba5 	bl	8010730 <_tx_thread_info_get>
 8011fe6:	6178      	str	r0, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 8011fe8:	697b      	ldr	r3, [r7, #20]
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3718      	adds	r7, #24
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
 8011ff2:	bf00      	nop
 8011ff4:	54485244 	.word	0x54485244

08011ff8 <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b088      	sub	sp, #32
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8012000:	4b1b      	ldr	r3, [pc, #108]	; (8012070 <_ux_device_stack_alternate_setting_get+0x78>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	3320      	adds	r3, #32
 8012006:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8012008:	69bb      	ldr	r3, [r7, #24]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	2b03      	cmp	r3, #3
 801200e:	d129      	bne.n	8012064 <_ux_device_stack_alternate_setting_get+0x6c>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8012010:	69bb      	ldr	r3, [r7, #24]
 8012012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8012016:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 8012018:	e021      	b.n	801205e <_ux_device_stack_alternate_setting_get+0x66>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 801201a:	69fb      	ldr	r3, [r7, #28]
 801201c:	695b      	ldr	r3, [r3, #20]
 801201e:	687a      	ldr	r2, [r7, #4]
 8012020:	429a      	cmp	r2, r3
 8012022:	d119      	bne.n	8012058 <_ux_device_stack_alternate_setting_get+0x60>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 8012024:	69bb      	ldr	r3, [r7, #24]
 8012026:	333c      	adds	r3, #60	; 0x3c
 8012028:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	3330      	adds	r3, #48	; 0x30
 801202e:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 8012030:	69fb      	ldr	r3, [r7, #28]
 8012032:	699a      	ldr	r2, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 8012038:	b2d2      	uxtb	r2, r2
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 801203a:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	2201      	movs	r2, #1
 8012040:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	2203      	movs	r2, #3
 8012046:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8012048:	2201      	movs	r2, #1
 801204a:	2101      	movs	r1, #1
 801204c:	6938      	ldr	r0, [r7, #16]
 801204e:	f001 fd49 	bl	8013ae4 <_ux_device_stack_transfer_request>
 8012052:	60f8      	str	r0, [r7, #12]

                /* Return the function status.  */
                return(status);
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	e006      	b.n	8012066 <_ux_device_stack_alternate_setting_get+0x6e>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8012058:	69fb      	ldr	r3, [r7, #28]
 801205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801205c:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 801205e:	69fb      	ldr	r3, [r7, #28]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d1da      	bne.n	801201a <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 8012064:	23ff      	movs	r3, #255	; 0xff
}
 8012066:	4618      	mov	r0, r3
 8012068:	3720      	adds	r7, #32
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}
 801206e:	bf00      	nop
 8012070:	20003f18 	.word	0x20003f18

08012074 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b0ae      	sub	sp, #184	; 0xb8
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801207e:	4bc0      	ldr	r3, [pc, #768]	; (8012380 <_ux_device_stack_alternate_setting_set+0x30c>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	3320      	adds	r3, #32
 8012084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8012088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	2b03      	cmp	r3, #3
 8012090:	d001      	beq.n	8012096 <_ux_device_stack_alternate_setting_set+0x22>
        return(UX_FUNCTION_NOT_SUPPORTED);
 8012092:	2354      	movs	r3, #84	; 0x54
 8012094:	e217      	b.n	80124c6 <_ux_device_stack_alternate_setting_set+0x452>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 8012096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801209a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801209e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 80120a2:	e00a      	b.n	80120ba <_ux_device_stack_alternate_setting_set+0x46>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 80120a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80120a8:	695b      	ldr	r3, [r3, #20]
 80120aa:	687a      	ldr	r2, [r7, #4]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d009      	beq.n	80120c4 <_ux_device_stack_alternate_setting_set+0x50>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 80120b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80120b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (interface_ptr != UX_NULL)
 80120ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d1f0      	bne.n	80120a4 <_ux_device_stack_alternate_setting_set+0x30>
 80120c2:	e000      	b.n	80120c6 <_ux_device_stack_alternate_setting_set+0x52>
            break;
 80120c4:	bf00      	nop
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 80120c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d106      	bne.n	80120dc <_ux_device_stack_alternate_setting_set+0x68>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 80120ce:	2252      	movs	r2, #82	; 0x52
 80120d0:	2107      	movs	r1, #7
 80120d2:	2002      	movs	r0, #2
 80120d4:	f001 fd90 	bl	8013bf8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 80120d8:	2352      	movs	r3, #82	; 0x52
 80120da:	e1f4      	b.n	80124c6 <_ux_device_stack_alternate_setting_set+0x452>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 80120dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80120e0:	699b      	ldr	r3, [r3, #24]
 80120e2:	683a      	ldr	r2, [r7, #0]
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d101      	bne.n	80120ec <_ux_device_stack_alternate_setting_set+0x78>
        return(UX_SUCCESS);       
 80120e8:	2300      	movs	r3, #0
 80120ea:	e1ec      	b.n	80124c6 <_ux_device_stack_alternate_setting_set+0x452>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 80120ec:	4ba4      	ldr	r3, [pc, #656]	; (8012380 <_ux_device_stack_alternate_setting_set+0x30c>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 80120f4:	4ba2      	ldr	r3, [pc, #648]	; (8012380 <_ux_device_stack_alternate_setting_set+0x30c>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80120fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8012100:	4b9f      	ldr	r3, [pc, #636]	; (8012380 <_ux_device_stack_alternate_setting_set+0x30c>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8012108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 801210c:	e1d5      	b.n	80124ba <_ux_device_stack_alternate_setting_set+0x446>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 801210e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 8012118:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801211c:	785b      	ldrb	r3, [r3, #1]
 801211e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8012122:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8012126:	2b02      	cmp	r3, #2
 8012128:	f040 81b9 	bne.w	801249e <_ux_device_stack_alternate_setting_set+0x42a>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 801212c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012130:	2208      	movs	r2, #8
 8012132:	4994      	ldr	r1, [pc, #592]	; (8012384 <_ux_device_stack_alternate_setting_set+0x310>)
 8012134:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8012138:	f001 fe4c 	bl	8013dd4 <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 801213c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801213e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012142:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012146:	429a      	cmp	r2, r3
 8012148:	f040 81a9 	bne.w	801249e <_ux_device_stack_alternate_setting_set+0x42a>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 801214c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801214e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 8012152:	e19e      	b.n	8012492 <_ux_device_stack_alternate_setting_set+0x41e>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 8012154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 801215e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012162:	785b      	ldrb	r3, [r3, #1]
 8012164:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8012168:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801216c:	2b04      	cmp	r3, #4
 801216e:	f040 8182 	bne.w	8012476 <_ux_device_stack_alternate_setting_set+0x402>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 8012172:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012176:	2209      	movs	r2, #9
 8012178:	4983      	ldr	r1, [pc, #524]	; (8012388 <_ux_device_stack_alternate_setting_set+0x314>)
 801217a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801217e:	f001 fe29 	bl	8013dd4 <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8012182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012184:	687a      	ldr	r2, [r7, #4]
 8012186:	429a      	cmp	r2, r3
 8012188:	f040 8175 	bne.w	8012476 <_ux_device_stack_alternate_setting_set+0x402>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 801218c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 801218e:	683a      	ldr	r2, [r7, #0]
 8012190:	429a      	cmp	r2, r3
 8012192:	f040 8170 	bne.w	8012476 <_ux_device_stack_alternate_setting_set+0x402>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8012196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801219a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801219c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                            while (endpoint != UX_NULL)
 80121a0:	e028      	b.n	80121f4 <_ux_device_stack_alternate_setting_set+0x180>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 80121a2:	2126      	movs	r1, #38	; 0x26
 80121a4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80121a8:	f001 fc8a 	bl	8013ac0 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 80121ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80121b0:	699b      	ldr	r3, [r3, #24]
 80121b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80121b6:	210f      	movs	r1, #15
 80121b8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80121bc:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80121be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80121c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c4:	67bb      	str	r3, [r7, #120]	; 0x78
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 80121c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80121ca:	2200      	movs	r2, #0
 80121cc:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 80121ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80121d2:	2200      	movs	r2, #0
 80121d4:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 80121d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80121da:	2200      	movs	r2, #0
 80121dc:	625a      	str	r2, [r3, #36]	; 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 80121de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80121e2:	2200      	movs	r2, #0
 80121e4:	629a      	str	r2, [r3, #40]	; 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 80121e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80121ea:	2200      	movs	r2, #0
 80121ec:	62da      	str	r2, [r3, #44]	; 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 80121ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80121f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                            while (endpoint != UX_NULL)
 80121f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d1d2      	bne.n	80121a2 <_ux_device_stack_alternate_setting_set+0x12e>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 80121fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012200:	2200      	movs	r2, #0
 8012202:	635a      	str	r2, [r3, #52]	; 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 8012204:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	461a      	mov	r2, r3
 801220c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012210:	1a9b      	subs	r3, r3, r2
 8012212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                            device_framework +=  (ULONG) *device_framework;
 8012216:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801221a:	781b      	ldrb	r3, [r3, #0]
 801221c:	461a      	mov	r2, r3
 801221e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012222:	4413      	add	r3, r2
 8012224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 8012228:	e0e7      	b.n	80123fa <_ux_device_stack_alternate_setting_set+0x386>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 801222a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801222e:	781b      	ldrb	r3, [r3, #0]
 8012230:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 8012234:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012238:	785b      	ldrb	r3, [r3, #1]
 801223a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 801223e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8012242:	2b05      	cmp	r3, #5
 8012244:	d009      	beq.n	801225a <_ux_device_stack_alternate_setting_set+0x1e6>
 8012246:	2b05      	cmp	r3, #5
 8012248:	f300 80c8 	bgt.w	80123dc <_ux_device_stack_alternate_setting_set+0x368>
 801224c:	2b02      	cmp	r3, #2
 801224e:	f000 80c0 	beq.w	80123d2 <_ux_device_stack_alternate_setting_set+0x35e>
 8012252:	2b04      	cmp	r3, #4
 8012254:	f000 80bd 	beq.w	80123d2 <_ux_device_stack_alternate_setting_set+0x35e>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 8012258:	e0c0      	b.n	80123dc <_ux_device_stack_alternate_setting_set+0x368>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 801225a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801225e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8012262:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8012266:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801226a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801226e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                    while (endpoints_pool_number != 0)
 8012272:	e013      	b.n	801229c <_ux_device_stack_alternate_setting_set+0x228>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8012274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d104      	bne.n	8012288 <_ux_device_stack_alternate_setting_set+0x214>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 801227e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012282:	2201      	movs	r2, #1
 8012284:	601a      	str	r2, [r3, #0]
                                            break;
 8012286:	e00d      	b.n	80122a4 <_ux_device_stack_alternate_setting_set+0x230>
                                        endpoint++;
 8012288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801228c:	3390      	adds	r3, #144	; 0x90
 801228e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                                       endpoints_pool_number--; 
 8012292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012296:	3b01      	subs	r3, #1
 8012298:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                    while (endpoints_pool_number != 0)
 801229c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d1e7      	bne.n	8012274 <_ux_device_stack_alternate_setting_set+0x200>
                                    if (endpoints_pool_number == 0)
 80122a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d101      	bne.n	80122b0 <_ux_device_stack_alternate_setting_set+0x23c>
                                        return(UX_MEMORY_INSUFFICIENT);
 80122ac:	2312      	movs	r3, #18
 80122ae:	e10a      	b.n	80124c6 <_ux_device_stack_alternate_setting_set+0x452>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 80122b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80122b4:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 80122b6:	2206      	movs	r2, #6
 80122b8:	4934      	ldr	r1, [pc, #208]	; (801238c <_ux_device_stack_alternate_setting_set+0x318>)
 80122ba:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80122be:	f001 fd89 	bl	8013dd4 <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80122c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80122c6:	3330      	adds	r3, #48	; 0x30
 80122c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80122cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80122d0:	69db      	ldr	r3, [r3, #28]
                                    max_transfer_length =
 80122d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80122d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80122da:	4b29      	ldr	r3, [pc, #164]	; (8012380 <_ux_device_stack_alternate_setting_set+0x30c>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80122e2:	2b02      	cmp	r3, #2
 80122e4:	d11c      	bne.n	8012320 <_ux_device_stack_alternate_setting_set+0x2ac>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 80122e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80122ea:	699b      	ldr	r3, [r3, #24]
 80122ec:	f003 0301 	and.w	r3, r3, #1
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d015      	beq.n	8012320 <_ux_device_stack_alternate_setting_set+0x2ac>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80122f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80122f8:	69db      	ldr	r3, [r3, #28]
 80122fa:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80122fe:	67fb      	str	r3, [r7, #124]	; 0x7c
                                        if (n_trans)
 8012300:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012302:	2b00      	cmp	r3, #0
 8012304:	d00c      	beq.n	8012320 <_ux_device_stack_alternate_setting_set+0x2ac>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8012306:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012308:	0adb      	lsrs	r3, r3, #11
 801230a:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            n_trans ++;
 801230c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801230e:	3301      	adds	r3, #1
 8012310:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            max_transfer_length *= n_trans;
 8012312:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012316:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012318:	fb02 f303 	mul.w	r3, r2, r3
 801231c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8012320:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012324:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012328:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 801232a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801232e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012332:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8012334:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012338:	f04f 32ff 	mov.w	r2, #4294967295
 801233c:	64da      	str	r2, [r3, #76]	; 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 801233e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012346:	629a      	str	r2, [r3, #40]	; 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 8012348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801234c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012350:	62da      	str	r2, [r3, #44]	; 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8012352:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012356:	699b      	ldr	r3, [r3, #24]
 8012358:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801235c:	210e      	movs	r1, #14
 801235e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8012362:	4798      	blx	r3
 8012364:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                                    if (status != UX_SUCCESS)
 8012368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801236c:	2b00      	cmp	r3, #0
 801236e:	d00f      	beq.n	8012390 <_ux_device_stack_alternate_setting_set+0x31c>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8012370:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012374:	2200      	movs	r2, #0
 8012376:	601a      	str	r2, [r3, #0]
                                        return(status);
 8012378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801237c:	e0a3      	b.n	80124c6 <_ux_device_stack_alternate_setting_set+0x452>
 801237e:	bf00      	nop
 8012380:	20003f18 	.word	0x20003f18
 8012384:	20000040 	.word	0x20000040
 8012388:	20000048 	.word	0x20000048
 801238c:	20000028 	.word	0x20000028
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 8012390:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012396:	2b00      	cmp	r3, #0
 8012398:	d105      	bne.n	80123a6 <_ux_device_stack_alternate_setting_set+0x332>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 801239a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801239e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80123a2:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 80123a4:	e01b      	b.n	80123de <_ux_device_stack_alternate_setting_set+0x36a>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 80123a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80123aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 80123b0:	e004      	b.n	80123bc <_ux_device_stack_alternate_setting_set+0x348>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 80123b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80123b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 80123bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80123c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d1f5      	bne.n	80123b2 <_ux_device_stack_alternate_setting_set+0x33e>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 80123c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80123ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80123ce:	625a      	str	r2, [r3, #36]	; 0x24
                                    break;
 80123d0:	e005      	b.n	80123de <_ux_device_stack_alternate_setting_set+0x36a>
                                    device_framework_length =  descriptor_length;
 80123d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80123d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                                    break;
 80123da:	e000      	b.n	80123de <_ux_device_stack_alternate_setting_set+0x36a>
                                    break;
 80123dc:	bf00      	nop
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 80123de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80123e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80123e6:	1ad3      	subs	r3, r2, r3
 80123e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 80123ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80123f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80123f4:	4413      	add	r3, r2
 80123f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                            while (device_framework_length != 0)
 80123fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80123fe:	2b00      	cmp	r3, #0
 8012400:	f47f af13 	bne.w	801222a <_ux_device_stack_alternate_setting_set+0x1b6>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 8012404:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012408:	330c      	adds	r3, #12
 801240a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801240e:	2224      	movs	r2, #36	; 0x24
 8012410:	4618      	mov	r0, r3
 8012412:	f001 fe8a 	bl	801412a <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8012416:	4b2e      	ldr	r3, [pc, #184]	; (80124d0 <_ux_device_stack_alternate_setting_set+0x45c>)
 8012418:	681a      	ldr	r2, [r3, #0]
 801241a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801241e:	695b      	ldr	r3, [r3, #20]
 8012420:	3356      	adds	r3, #86	; 0x56
 8012422:	009b      	lsls	r3, r3, #2
 8012424:	4413      	add	r3, r2
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 801242c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012430:	2b00      	cmp	r3, #0
 8012432:	d004      	beq.n	801243e <_ux_device_stack_alternate_setting_set+0x3ca>
 8012434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801243a:	2b00      	cmp	r3, #0
 801243c:	d101      	bne.n	8012442 <_ux_device_stack_alternate_setting_set+0x3ce>
                            {

                                return (UX_NO_CLASS_MATCH);
 801243e:	2357      	movs	r3, #87	; 0x57
 8012440:	e041      	b.n	80124c6 <_ux_device_stack_alternate_setting_set+0x452>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8012442:	2306      	movs	r3, #6
 8012444:	60bb      	str	r3, [r7, #8]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 8012446:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801244a:	613b      	str	r3, [r7, #16]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 801244c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012450:	62bb      	str	r3, [r7, #40]	; 0x28
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 8012452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801245a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 801245e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012464:	f107 0208 	add.w	r2, r7, #8
 8012468:	4610      	mov	r0, r2
 801246a:	4798      	blx	r3
 801246c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

                            /* We are done here.  */
                            return(status); 
 8012470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012474:	e027      	b.n	80124c6 <_ux_device_stack_alternate_setting_set+0x452>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 8012476:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801247a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801247e:	1ad3      	subs	r3, r2, r3
 8012480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 8012484:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012488:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801248c:	4413      	add	r3, r2
 801248e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                while (device_framework_length != 0)
 8012492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012496:	2b00      	cmp	r3, #0
 8012498:	f47f ae5c 	bne.w	8012154 <_ux_device_stack_alternate_setting_set+0xe0>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 801249c:	e012      	b.n	80124c4 <_ux_device_stack_alternate_setting_set+0x450>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 801249e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80124a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80124a6:	1ad3      	subs	r3, r2, r3
 80124a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 80124ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80124b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80124b4:	4413      	add	r3, r2
 80124b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    while (device_framework_length != 0)
 80124ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f47f ae25 	bne.w	801210e <_ux_device_stack_alternate_setting_set+0x9a>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 80124c4:	23ff      	movs	r3, #255	; 0xff
#endif
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	37b8      	adds	r7, #184	; 0xb8
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
 80124ce:	bf00      	nop
 80124d0:	20003f18 	.word	0x20003f18

080124d4 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b092      	sub	sp, #72	; 0x48
 80124d8:	af00      	add	r7, sp, #0
 80124da:	60f8      	str	r0, [r7, #12]
 80124dc:	60b9      	str	r1, [r7, #8]
 80124de:	607a      	str	r2, [r7, #4]
 80124e0:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 80124e2:	2300      	movs	r3, #0
 80124e4:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 80124e6:	f107 0310 	add.w	r3, r7, #16
 80124ea:	223f      	movs	r2, #63	; 0x3f
 80124ec:	4619      	mov	r1, r3
 80124ee:	68f8      	ldr	r0, [r7, #12]
 80124f0:	f001 ffff 	bl	80144f2 <_ux_utility_string_length_check>
 80124f4:	6478      	str	r0, [r7, #68]	; 0x44
    if (status)
 80124f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d001      	beq.n	8012500 <_ux_device_stack_class_register+0x2c>
        return(status);
 80124fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124fe:	e035      	b.n	801256c <_ux_device_stack_class_register+0x98>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8012500:	4b1c      	ldr	r3, [pc, #112]	; (8012574 <_ux_device_stack_class_register+0xa0>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8012508:	643b      	str	r3, [r7, #64]	; 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 801250a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801250e:	2b00      	cmp	r3, #0
 8012510:	d12b      	bne.n	801256a <_ux_device_stack_class_register+0x96>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 8012512:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	3301      	adds	r3, #1
 8012518:	461a      	mov	r2, r3
 801251a:	68f9      	ldr	r1, [r7, #12]
 801251c:	f001 fe05 	bl	801412a <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 8012520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012522:	68ba      	ldr	r2, [r7, #8]
 8012524:	645a      	str	r2, [r3, #68]	; 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 8012526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012528:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801252a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 801252e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012530:	687a      	ldr	r2, [r7, #4]
 8012532:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 8012536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012538:	683a      	ldr	r2, [r7, #0]
 801253a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 801253e:	2305      	movs	r3, #5
 8012540:	617b      	str	r3, [r7, #20]
            command.ux_slave_class_command_parameter  =  parameter;
 8012542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012544:	63bb      	str	r3, [r7, #56]	; 0x38
            command.ux_slave_class_command_class_ptr  =  class_inst;
 8012546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012548:	637b      	str	r3, [r7, #52]	; 0x34

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 801254a:	f107 0214 	add.w	r2, r7, #20
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	4610      	mov	r0, r2
 8012552:	4798      	blx	r3
 8012554:	6478      	str	r0, [r7, #68]	; 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 8012556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012558:	2b00      	cmp	r3, #0
 801255a:	d001      	beq.n	8012560 <_ux_device_stack_class_register+0x8c>
                return(status);
 801255c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801255e:	e005      	b.n	801256c <_ux_device_stack_class_register+0x98>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 8012560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012562:	2201      	movs	r2, #1
 8012564:	641a      	str	r2, [r3, #64]	; 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 8012566:	2300      	movs	r3, #0
 8012568:	e000      	b.n	801256c <_ux_device_stack_class_register+0x98>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 801256a:	2312      	movs	r3, #18
}
 801256c:	4618      	mov	r0, r3
 801256e:	3748      	adds	r7, #72	; 0x48
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}
 8012574:	20003f18 	.word	0x20003f18

08012578 <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b08a      	sub	sp, #40	; 0x28
 801257c:	af00      	add	r7, sp, #0
 801257e:	60f8      	str	r0, [r7, #12]
 8012580:	60b9      	str	r1, [r7, #8]
 8012582:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012584:	4b2a      	ldr	r3, [pc, #168]	; (8012630 <_ux_device_stack_clear_feature+0xb8>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801258a:	4b29      	ldr	r3, [pc, #164]	; (8012630 <_ux_device_stack_clear_feature+0xb8>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	3320      	adds	r3, #32
 8012590:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8012592:	69bb      	ldr	r3, [r7, #24]
 8012594:	333c      	adds	r3, #60	; 0x3c
 8012596:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	f003 0303 	and.w	r3, r3, #3
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d002      	beq.n	80125a8 <_ux_device_stack_clear_feature+0x30>
 80125a2:	2b02      	cmp	r3, #2
 80125a4:	d011      	beq.n	80125ca <_ux_device_stack_clear_feature+0x52>
 80125a6:	e035      	b.n	8012614 <_ux_device_stack_clear_feature+0x9c>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	d13a      	bne.n	8012624 <_ux_device_stack_clear_feature+0xac>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 80125ae:	4b20      	ldr	r3, [pc, #128]	; (8012630 <_ux_device_stack_clear_feature+0xb8>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d005      	beq.n	80125c6 <_ux_device_stack_clear_feature+0x4e>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 80125ba:	4b1d      	ldr	r3, [pc, #116]	; (8012630 <_ux_device_stack_clear_feature+0xb8>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	2200      	movs	r2, #0
 80125c0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 80125c4:	e02e      	b.n	8012624 <_ux_device_stack_clear_feature+0xac>
                return (UX_FUNCTION_NOT_SUPPORTED);
 80125c6:	2354      	movs	r3, #84	; 0x54
 80125c8:	e02e      	b.n	8012628 <_ux_device_stack_clear_feature+0xb0>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 80125ca:	69bb      	ldr	r3, [r7, #24]
 80125cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80125d0:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 80125d2:	e01c      	b.n	801260e <_ux_device_stack_clear_feature+0x96>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 80125d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125d8:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 80125da:	e012      	b.n	8012602 <_ux_device_stack_clear_feature+0x8a>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 80125dc:	6a3b      	ldr	r3, [r7, #32]
 80125de:	695b      	ldr	r3, [r3, #20]
 80125e0:	687a      	ldr	r2, [r7, #4]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d10a      	bne.n	80125fc <_ux_device_stack_clear_feature+0x84>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 80125e6:	69fb      	ldr	r3, [r7, #28]
 80125e8:	699b      	ldr	r3, [r3, #24]
 80125ea:	6a3a      	ldr	r2, [r7, #32]
 80125ec:	2110      	movs	r1, #16
 80125ee:	69f8      	ldr	r0, [r7, #28]
 80125f0:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 80125f2:	6a3b      	ldr	r3, [r7, #32]
 80125f4:	2200      	movs	r2, #0
 80125f6:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 80125f8:	2300      	movs	r3, #0
 80125fa:	e015      	b.n	8012628 <_ux_device_stack_clear_feature+0xb0>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 80125fc:	6a3b      	ldr	r3, [r7, #32]
 80125fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012600:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8012602:	6a3b      	ldr	r3, [r7, #32]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d1e9      	bne.n	80125dc <_ux_device_stack_clear_feature+0x64>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8012608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801260c:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface_ptr != UX_NULL)
 801260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012610:	2b00      	cmp	r3, #0
 8012612:	d1df      	bne.n	80125d4 <_ux_device_stack_clear_feature+0x5c>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8012614:	69fb      	ldr	r3, [r7, #28]
 8012616:	699b      	ldr	r3, [r3, #24]
 8012618:	697a      	ldr	r2, [r7, #20]
 801261a:	2114      	movs	r1, #20
 801261c:	69f8      	ldr	r0, [r7, #28]
 801261e:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8012620:	2300      	movs	r3, #0
 8012622:	e001      	b.n	8012628 <_ux_device_stack_clear_feature+0xb0>
        break;
 8012624:	bf00      	nop
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 8012626:	2300      	movs	r3, #0
}
 8012628:	4618      	mov	r0, r3
 801262a:	3728      	adds	r7, #40	; 0x28
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}
 8012630:	20003f18 	.word	0x20003f18

08012634 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801263a:	4b0f      	ldr	r3, [pc, #60]	; (8012678 <_ux_device_stack_configuration_get+0x44>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	3320      	adds	r3, #32
 8012640:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	333c      	adds	r3, #60	; 0x3c
 8012646:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	3330      	adds	r3, #48	; 0x30
 801264c:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8012658:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 801265a:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2203      	movs	r2, #3
 8012660:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8012662:	2201      	movs	r2, #1
 8012664:	2101      	movs	r1, #1
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f001 fa3c 	bl	8013ae4 <_ux_device_stack_transfer_request>
 801266c:	6038      	str	r0, [r7, #0]

    /* Return the function status.  */
    return(status);
 801266e:	683b      	ldr	r3, [r7, #0]
}
 8012670:	4618      	mov	r0, r3
 8012672:	3710      	adds	r7, #16
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}
 8012678:	20003f18 	.word	0x20003f18

0801267c <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b0ac      	sub	sp, #176	; 0xb0
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 8012684:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012688:	2220      	movs	r2, #32
 801268a:	2100      	movs	r1, #0
 801268c:	4618      	mov	r0, r3
 801268e:	f004 fb45 	bl	8016d1c <memset>
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 8012692:	2300      	movs	r3, #0
 8012694:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 8012698:	2300      	movs	r3, #0
 801269a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
ULONG                           iad_number_interfaces =  0;
 801269e:	2300      	movs	r3, #0
 80126a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80126a4:	4b9d      	ldr	r3, [pc, #628]	; (801291c <_ux_device_stack_configuration_set+0x2a0>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80126ac:	4b9b      	ldr	r3, [pc, #620]	; (801291c <_ux_device_stack_configuration_set+0x2a0>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	3320      	adds	r3, #32
 80126b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 80126b6:	2300      	movs	r3, #0
 80126b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 80126bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80126c0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d101      	bne.n	80126ce <_ux_device_stack_configuration_set+0x52>
        return(UX_SUCCESS);
 80126ca:	2300      	movs	r3, #0
 80126cc:	e175      	b.n	80129ba <_ux_device_stack_configuration_set+0x33e>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 80126ce:	4b93      	ldr	r3, [pc, #588]	; (801291c <_ux_device_stack_configuration_set+0x2a0>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80126d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 80126da:	4b90      	ldr	r3, [pc, #576]	; (801291c <_ux_device_stack_configuration_set+0x2a0>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80126e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 80126e6:	e027      	b.n	8012738 <_ux_device_stack_configuration_set+0xbc>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 80126e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 80126f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126f6:	785b      	ldrb	r3, [r3, #1]
 80126f8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 80126fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012700:	2b02      	cmp	r3, #2
 8012702:	d10b      	bne.n	801271c <_ux_device_stack_configuration_set+0xa0>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8012704:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012708:	2208      	movs	r2, #8
 801270a:	4985      	ldr	r1, [pc, #532]	; (8012920 <_ux_device_stack_configuration_set+0x2a4>)
 801270c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8012710:	f001 fb60 	bl	8013dd4 <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 8012714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012716:	687a      	ldr	r2, [r7, #4]
 8012718:	429a      	cmp	r2, r3
 801271a:	d012      	beq.n	8012742 <_ux_device_stack_configuration_set+0xc6>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 801271c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012724:	1ad3      	subs	r3, r2, r3
 8012726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 801272a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801272e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012732:	4413      	add	r3, r2
 8012734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    while (device_framework_length != 0)
 8012738:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801273c:	2b00      	cmp	r3, #0
 801273e:	d1d3      	bne.n	80126e8 <_ux_device_stack_configuration_set+0x6c>
 8012740:	e000      	b.n	8012744 <_ux_device_stack_configuration_set+0xc8>
                break;
 8012742:	bf00      	nop
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 8012744:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012748:	2b00      	cmp	r3, #0
 801274a:	d104      	bne.n	8012756 <_ux_device_stack_configuration_set+0xda>
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d001      	beq.n	8012756 <_ux_device_stack_configuration_set+0xda>
        return(UX_ERROR);
 8012752:	23ff      	movs	r3, #255	; 0xff
 8012754:	e131      	b.n	80129ba <_ux_device_stack_configuration_set+0x33e>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 8012756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801275a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801275e:	2b00      	cmp	r3, #0
 8012760:	d02d      	beq.n	80127be <_ux_device_stack_configuration_set+0x142>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 8012762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801276a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 801276e:	e022      	b.n	80127b6 <_ux_device_stack_configuration_set+0x13a>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8012770:	2303      	movs	r3, #3
 8012772:	60fb      	str	r3, [r7, #12]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 8012774:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012778:	617b      	str	r3, [r7, #20]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 801277a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 8012784:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012788:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 801278a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801278e:	2b00      	cmp	r3, #0
 8012790:	d006      	beq.n	80127a0 <_ux_device_stack_configuration_set+0x124>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 8012792:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012798:	f107 020c 	add.w	r2, r7, #12
 801279c:	4610      	mov	r0, r2
 801279e:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 80127a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80127a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127a6:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 80127a8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80127ac:	f000 ff46 	bl	801363c <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 80127b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80127b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        while (interface_ptr != UX_NULL)
 80127b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d1d8      	bne.n	8012770 <_ux_device_stack_configuration_set+0xf4>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 80127be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80127c2:	2200      	movs	r2, #0
 80127c4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80127c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80127cc:	2201      	movs	r2, #1
 80127ce:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 80127d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80127d4:	699b      	ldr	r3, [r3, #24]
 80127d6:	2201      	movs	r2, #1
 80127d8:	2113      	movs	r1, #19
 80127da:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80127de:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d101      	bne.n	80127ea <_ux_device_stack_configuration_set+0x16e>
        return(UX_SUCCESS);
 80127e6:	2300      	movs	r3, #0
 80127e8:	e0e7      	b.n	80129ba <_ux_device_stack_configuration_set+0x33e>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 80127ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80127ee:	687a      	ldr	r2, [r7, #4]
 80127f0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 80127f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80127f8:	33d0      	adds	r3, #208	; 0xd0
    _ux_utility_descriptor_parse(device_framework,
 80127fa:	2208      	movs	r2, #8
 80127fc:	4948      	ldr	r1, [pc, #288]	; (8012920 <_ux_device_stack_configuration_set+0x2a4>)
 80127fe:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8012802:	f001 fae7 	bl	8013dd4 <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8012806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801280c:	2b00      	cmp	r3, #0
 801280e:	d001      	beq.n	8012814 <_ux_device_stack_configuration_set+0x198>
 8012810:	2202      	movs	r2, #2
 8012812:	e000      	b.n	8012816 <_ux_device_stack_configuration_set+0x19a>
 8012814:	2201      	movs	r2, #1
 8012816:	4b41      	ldr	r3, [pc, #260]	; (801291c <_ux_device_stack_configuration_set+0x2a0>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 801281e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012820:	095a      	lsrs	r2, r3, #5
 8012822:	4b3e      	ldr	r3, [pc, #248]	; (801291c <_ux_device_stack_configuration_set+0x2a0>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	f002 0201 	and.w	r2, r2, #1
 801282a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 801282e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 8012834:	e0af      	b.n	8012996 <_ux_device_stack_configuration_set+0x31a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8012836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8012840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012844:	785b      	ldrb	r3, [r3, #1]
 8012846:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 801284a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801284e:	2b0b      	cmp	r3, #11
 8012850:	d10e      	bne.n	8012870 <_ux_device_stack_configuration_set+0x1f4>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 8012852:	2301      	movs	r3, #1
 8012854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 8012858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801285c:	3302      	adds	r3, #2
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 8012864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012868:	3303      	adds	r3, #3
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8012870:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012874:	2b04      	cmp	r3, #4
 8012876:	f040 8080 	bne.w	801297a <_ux_device_stack_configuration_set+0x2fe>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 801287a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801287e:	2209      	movs	r2, #9
 8012880:	4928      	ldr	r1, [pc, #160]	; (8012924 <_ux_device_stack_configuration_set+0x2a8>)
 8012882:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8012886:	f001 faa5 	bl	8013dd4 <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 801288a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801288c:	2b00      	cmp	r3, #0
 801288e:	d174      	bne.n	801297a <_ux_device_stack_configuration_set+0x2fe>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 8012890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012894:	2b01      	cmp	r3, #1
 8012896:	d147      	bne.n	8012928 <_ux_device_stack_configuration_set+0x2ac>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8012898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801289a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801289e:	429a      	cmp	r2, r3
 80128a0:	d126      	bne.n	80128f0 <_ux_device_stack_configuration_set+0x274>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 80128a2:	4b1e      	ldr	r3, [pc, #120]	; (801291c <_ux_device_stack_configuration_set+0x2a0>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80128aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 80128ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d124      	bne.n	8012902 <_ux_device_stack_configuration_set+0x286>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 80128b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80128ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d11d      	bne.n	8012902 <_ux_device_stack_configuration_set+0x286>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 80128c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d116      	bne.n	8012902 <_ux_device_stack_configuration_set+0x286>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 80128d4:	4b11      	ldr	r3, [pc, #68]	; (801291c <_ux_device_stack_configuration_set+0x2a0>)
 80128d6:	681a      	ldr	r2, [r3, #0]
 80128d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128da:	3356      	adds	r3, #86	; 0x56
 80128dc:	009b      	lsls	r3, r3, #2
 80128de:	4413      	add	r3, r2
 80128e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80128e4:	605a      	str	r2, [r3, #4]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 80128e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80128ee:	e008      	b.n	8012902 <_ux_device_stack_configuration_set+0x286>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 80128f0:	4b0a      	ldr	r3, [pc, #40]	; (801291c <_ux_device_stack_configuration_set+0x2a0>)
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128f6:	3356      	adds	r3, #86	; 0x56
 80128f8:	009b      	lsls	r3, r3, #2
 80128fa:	4413      	add	r3, r2
 80128fc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8012900:	605a      	str	r2, [r3, #4]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 8012902:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012906:	3b01      	subs	r3, #1
 8012908:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 801290c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012910:	2b00      	cmp	r3, #0
 8012912:	d12b      	bne.n	801296c <_ux_device_stack_configuration_set+0x2f0>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 8012914:	2300      	movs	r3, #0
 8012916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801291a:	e027      	b.n	801296c <_ux_device_stack_configuration_set+0x2f0>
 801291c:	20003f18 	.word	0x20003f18
 8012920:	20000040 	.word	0x20000040
 8012924:	20000048 	.word	0x20000048
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8012928:	4b26      	ldr	r3, [pc, #152]	; (80129c4 <_ux_device_stack_configuration_set+0x348>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8012930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 8012934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801293a:	2b01      	cmp	r3, #1
 801293c:	d116      	bne.n	801296c <_ux_device_stack_configuration_set+0x2f0>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801293e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012940:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012944:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8012948:	429a      	cmp	r2, r3
 801294a:	d10f      	bne.n	801296c <_ux_device_stack_configuration_set+0x2f0>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 801294c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012950:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8012954:	687a      	ldr	r2, [r7, #4]
 8012956:	429a      	cmp	r2, r3
 8012958:	d108      	bne.n	801296c <_ux_device_stack_configuration_set+0x2f0>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 801295a:	4b1a      	ldr	r3, [pc, #104]	; (80129c4 <_ux_device_stack_configuration_set+0x348>)
 801295c:	681a      	ldr	r2, [r3, #0]
 801295e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012960:	3356      	adds	r3, #86	; 0x56
 8012962:	009b      	lsls	r3, r3, #2
 8012964:	4413      	add	r3, r2
 8012966:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801296a:	605a      	str	r2, [r3, #4]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 801296c:	2200      	movs	r2, #0
 801296e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8012972:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8012976:	f000 fea9 	bl	80136cc <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 801297a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801297e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012982:	1ad3      	subs	r3, r2, r3
 8012984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8012988:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801298c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012990:	4413      	add	r3, r2
 8012992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    while (device_framework_length != 0)
 8012996:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801299a:	2b00      	cmp	r3, #0
 801299c:	f47f af4b 	bne.w	8012836 <_ux_device_stack_configuration_set+0x1ba>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 80129a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80129a4:	2203      	movs	r2, #3
 80129a6:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 80129a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80129ac:	699b      	ldr	r3, [r3, #24]
 80129ae:	2203      	movs	r2, #3
 80129b0:	2113      	movs	r1, #19
 80129b2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80129b6:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 80129b8:	2300      	movs	r3, #0
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	37b0      	adds	r7, #176	; 0xb0
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
 80129c2:	bf00      	nop
 80129c4:	20003f18 	.word	0x20003f18

080129c8 <_ux_device_stack_control_request_process>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 80129c8:	b590      	push	{r4, r7, lr}
 80129ca:	b09d      	sub	sp, #116	; 0x74
 80129cc:	af02      	add	r7, sp, #8
 80129ce:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 80129d0:	23ff      	movs	r3, #255	; 0xff
 80129d2:	65fb      	str	r3, [r7, #92]	; 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80129d4:	4b9f      	ldr	r3, [pc, #636]	; (8012c54 <_ux_device_stack_control_request_process+0x28c>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80129da:	4b9e      	ldr	r3, [pc, #632]	; (8012c54 <_ux_device_stack_control_request_process+0x28c>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	3320      	adds	r3, #32
 80129e0:	657b      	str	r3, [r7, #84]	; 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	f040 812e 	bne.w	8012c48 <_ux_device_stack_control_request_process+0x280>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80129f2:	667b      	str	r3, [r7, #100]	; 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80129fa:	653b      	str	r3, [r7, #80]	; 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	3354      	adds	r3, #84	; 0x54
 8012a00:	3302      	adds	r3, #2
 8012a02:	4618      	mov	r0, r3
 8012a04:	f001 fd5d 	bl	80144c2 <_ux_utility_short_get>
 8012a08:	64f8      	str	r0, [r7, #76]	; 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	3354      	adds	r3, #84	; 0x54
 8012a0e:	3304      	adds	r3, #4
 8012a10:	4618      	mov	r0, r3
 8012a12:	f001 fd56 	bl	80144c2 <_ux_utility_short_get>
 8012a16:	64b8      	str	r0, [r7, #72]	; 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	3354      	adds	r3, #84	; 0x54
 8012a1c:	3306      	adds	r3, #6
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f001 fd4f 	bl	80144c2 <_ux_utility_short_get>
 8012a24:	6478      	str	r0, [r7, #68]	; 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8012a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a28:	2b06      	cmp	r3, #6
 8012a2a:	d002      	beq.n	8012a32 <_ux_device_stack_control_request_process+0x6a>
 8012a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a2e:	2b07      	cmp	r3, #7
 8012a30:	d10d      	bne.n	8012a4e <_ux_device_stack_control_request_process+0x86>
 8012a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a34:	0a1b      	lsrs	r3, r3, #8
 8012a36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d007      	beq.n	8012a4e <_ux_device_stack_control_request_process+0x86>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 8012a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a40:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8012a44:	667b      	str	r3, [r7, #100]	; 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 8012a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a48:	f043 0320 	orr.w	r3, r3, #32
 8012a4c:	667b      	str	r3, [r7, #100]	; 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 8012a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012a54:	2b40      	cmp	r3, #64	; 0x40
 8012a56:	d134      	bne.n	8012ac2 <_ux_device_stack_control_request_process+0xfa>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 8012a58:	4b7e      	ldr	r3, [pc, #504]	; (8012c54 <_ux_device_stack_control_request_process+0x28c>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8012a60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d12d      	bne.n	8012ac2 <_ux_device_stack_control_request_process+0xfa>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8012a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a6a:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 8012a6c:	4b79      	ldr	r3, [pc, #484]	; (8012c54 <_ux_device_stack_control_request_process+0x28c>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	f8d3 41c8 	ldr.w	r4, [r3, #456]	; 0x1c8
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	68db      	ldr	r3, [r3, #12]
 8012a78:	f107 020c 	add.w	r2, r7, #12
 8012a7c:	9201      	str	r2, [sp, #4]
 8012a7e:	9300      	str	r3, [sp, #0]
 8012a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012a86:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012a88:	47a0      	blx	r4
 8012a8a:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 8012a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d110      	bne.n	8012ab4 <_ux_device_stack_control_request_process+0xec>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 8012a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a94:	333c      	adds	r3, #60	; 0x3c
 8012a96:	643b      	str	r3, [r7, #64]	; 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8012a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a9a:	3330      	adds	r3, #48	; 0x30
 8012a9c:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	2203      	movs	r2, #3
 8012aa2:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	f001 f81a 	bl	8013ae4 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	e0ca      	b.n	8012c4a <_ux_device_stack_control_request_process+0x282>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8012ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ab6:	333c      	adds	r3, #60	; 0x3c
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f000 fb5d 	bl	8013178 <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 8012abe:	2300      	movs	r3, #0
 8012ac0:	e0c3      	b.n	8012c4a <_ux_device_stack_control_request_process+0x282>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8012ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012ac4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012ac8:	2b20      	cmp	r3, #32
 8012aca:	d004      	beq.n	8012ad6 <_ux_device_stack_control_request_process+0x10e>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 8012acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8012ad2:	2b40      	cmp	r3, #64	; 0x40
 8012ad4:	d14b      	bne.n	8012b6e <_ux_device_stack_control_request_process+0x1a6>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 8012ad6:	2304      	movs	r3, #4
 8012ad8:	613b      	str	r3, [r7, #16]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8012ada:	2300      	movs	r3, #0
 8012adc:	663b      	str	r3, [r7, #96]	; 0x60
 8012ade:	e037      	b.n	8012b50 <_ux_device_stack_control_request_process+0x188>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 8012ae0:	4b5c      	ldr	r3, [pc, #368]	; (8012c54 <_ux_device_stack_control_request_process+0x28c>)
 8012ae2:	681a      	ldr	r2, [r3, #0]
 8012ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ae6:	3356      	adds	r3, #86	; 0x56
 8012ae8:	009b      	lsls	r3, r3, #2
 8012aea:	4413      	add	r3, r2
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 8012af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d026      	beq.n	8012b44 <_ux_device_stack_control_request_process+0x17c>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 8012af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012af8:	f003 0303 	and.w	r3, r3, #3
 8012afc:	2b01      	cmp	r3, #1
 8012afe:	d114      	bne.n	8012b2a <_ux_device_stack_control_request_process+0x162>
                       the request is for. So if the current index does not match 
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).  */
                    if (((request_index & 0xFF) != class_index) ||
 8012b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b02:	b2db      	uxtb	r3, r3
 8012b04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d11e      	bne.n	8012b48 <_ux_device_stack_control_request_process+0x180>
                        ((class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 8012b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b0c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8012b10:	6a1b      	ldr	r3, [r3, #32]
                    if (((request_index & 0xFF) != class_index) ||
 8012b12:	2b07      	cmp	r3, #7
 8012b14:	d109      	bne.n	8012b2a <_ux_device_stack_control_request_process+0x162>
                        ((class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 8012b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d106      	bne.n	8012b2a <_ux_device_stack_control_request_process+0x162>
                         (request == 0x00) &&
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012b22:	461a      	mov	r2, r3
                         (request == 0x00) &&
 8012b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b26:	4293      	cmp	r3, r2
 8012b28:	d10e      	bne.n	8012b48 <_ux_device_stack_control_request_process+0x180>
                        continue;
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 8012b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b2c:	633b      	str	r3, [r7, #48]	; 0x30

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8012b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b32:	f107 0210 	add.w	r2, r7, #16
 8012b36:	4610      	mov	r0, r2
 8012b38:	4798      	blx	r3
 8012b3a:	65f8      	str	r0, [r7, #92]	; 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 8012b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d00a      	beq.n	8012b58 <_ux_device_stack_control_request_process+0x190>
 8012b42:	e002      	b.n	8012b4a <_ux_device_stack_control_request_process+0x182>
                    continue;
 8012b44:	bf00      	nop
 8012b46:	e000      	b.n	8012b4a <_ux_device_stack_control_request_process+0x182>
                        continue;
 8012b48:	bf00      	nop
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8012b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	663b      	str	r3, [r7, #96]	; 0x60
 8012b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b52:	2b0f      	cmp	r3, #15
 8012b54:	d9c4      	bls.n	8012ae0 <_ux_device_stack_control_request_process+0x118>
 8012b56:	e000      	b.n	8012b5a <_ux_device_stack_control_request_process+0x192>

                    /* We are done, break the loop!  */
                    break;
 8012b58:	bf00      	nop

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 8012b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d004      	beq.n	8012b6a <_ux_device_stack_control_request_process+0x1a2>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8012b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b62:	333c      	adds	r3, #60	; 0x3c
 8012b64:	4618      	mov	r0, r3
 8012b66:	f000 fb07 	bl	8013178 <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 8012b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b6c:	e06d      	b.n	8012c4a <_ux_device_stack_control_request_process+0x282>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 8012b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b70:	2b0c      	cmp	r3, #12
 8012b72:	d85e      	bhi.n	8012c32 <_ux_device_stack_control_request_process+0x26a>
 8012b74:	a201      	add	r2, pc, #4	; (adr r2, 8012b7c <_ux_device_stack_control_request_process+0x1b4>)
 8012b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b7a:	bf00      	nop
 8012b7c:	08012bb1 	.word	0x08012bb1
 8012b80:	08012bbf 	.word	0x08012bbf
 8012b84:	08012c33 	.word	0x08012c33
 8012b88:	08012bcd 	.word	0x08012bcd
 8012b8c:	08012c33 	.word	0x08012c33
 8012b90:	08012bdb 	.word	0x08012bdb
 8012b94:	08012bf1 	.word	0x08012bf1
 8012b98:	08012bff 	.word	0x08012bff
 8012b9c:	08012c05 	.word	0x08012c05
 8012ba0:	08012c0d 	.word	0x08012c0d
 8012ba4:	08012c17 	.word	0x08012c17
 8012ba8:	08012c21 	.word	0x08012c21
 8012bac:	08012c2d 	.word	0x08012c2d
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 8012bb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012bb2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012bb4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8012bb6:	f000 fb17 	bl	80131e8 <_ux_device_stack_get_status>
 8012bba:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8012bbc:	e03c      	b.n	8012c38 <_ux_device_stack_control_request_process+0x270>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 8012bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bc0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012bc2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8012bc4:	f7ff fcd8 	bl	8012578 <_ux_device_stack_clear_feature>
 8012bc8:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8012bca:	e035      	b.n	8012c38 <_ux_device_stack_control_request_process+0x270>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 8012bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012bd0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8012bd2:	f000 fedf 	bl	8013994 <_ux_device_stack_set_feature>
 8012bd6:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8012bd8:	e02e      	b.n	8012c38 <_ux_device_stack_control_request_process+0x270>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 8012bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012bdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012bde:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 8012be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012be2:	699b      	ldr	r3, [r3, #24]
 8012be4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012be6:	2111      	movs	r1, #17
 8012be8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012bea:	4798      	blx	r3
 8012bec:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8012bee:	e023      	b.n	8012c38 <_ux_device_stack_control_request_process+0x270>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 8012bf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012bf2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012bf4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012bf6:	f000 f82f 	bl	8012c58 <_ux_device_stack_descriptor_send>
 8012bfa:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8012bfc:	e01c      	b.n	8012c38 <_ux_device_stack_control_request_process+0x270>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 8012bfe:	2354      	movs	r3, #84	; 0x54
 8012c00:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c02:	e019      	b.n	8012c38 <_ux_device_stack_control_request_process+0x270>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 8012c04:	f7ff fd16 	bl	8012634 <_ux_device_stack_configuration_get>
 8012c08:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8012c0a:	e015      	b.n	8012c38 <_ux_device_stack_control_request_process+0x270>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 8012c0c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012c0e:	f7ff fd35 	bl	801267c <_ux_device_stack_configuration_set>
 8012c12:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8012c14:	e010      	b.n	8012c38 <_ux_device_stack_control_request_process+0x270>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 8012c16:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012c18:	f7ff f9ee 	bl	8011ff8 <_ux_device_stack_alternate_setting_get>
 8012c1c:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8012c1e:	e00b      	b.n	8012c38 <_ux_device_stack_control_request_process+0x270>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 8012c20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012c22:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012c24:	f7ff fa26 	bl	8012074 <_ux_device_stack_alternate_setting_set>
 8012c28:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 8012c2a:	e005      	b.n	8012c38 <_ux_device_stack_control_request_process+0x270>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c30:	e002      	b.n	8012c38 <_ux_device_stack_control_request_process+0x270>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 8012c32:	2354      	movs	r3, #84	; 0x54
 8012c34:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c36:	bf00      	nop
        }

        if (status != UX_SUCCESS)
 8012c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d004      	beq.n	8012c48 <_ux_device_stack_control_request_process+0x280>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8012c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c40:	333c      	adds	r3, #60	; 0x3c
 8012c42:	4618      	mov	r0, r3
 8012c44:	f000 fa98 	bl	8013178 <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 8012c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	376c      	adds	r7, #108	; 0x6c
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd90      	pop	{r4, r7, pc}
 8012c52:	bf00      	nop
 8012c54:	20003f18 	.word	0x20003f18

08012c58 <_ux_device_stack_descriptor_send>:
/*                                            internal clean up,          */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b0a2      	sub	sp, #136	; 0x88
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 8012c64:	2300      	movs	r3, #0
 8012c66:	677b      	str	r3, [r7, #116]	; 0x74
UINT                            status =  UX_ERROR;
 8012c68:	23ff      	movs	r3, #255	; 0xff
 8012c6a:	673b      	str	r3, [r7, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012c6c:	4ba4      	ldr	r3, [pc, #656]	; (8012f00 <_ux_device_stack_descriptor_send+0x2a8>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8012c72:	4ba3      	ldr	r3, [pc, #652]	; (8012f00 <_ux_device_stack_descriptor_send+0x2a8>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	3320      	adds	r3, #32
 8012c78:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8012c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c7c:	333c      	adds	r3, #60	; 0x3c
 8012c7e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8012c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c82:	3330      	adds	r3, #48	; 0x30
 8012c84:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8012c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c88:	2203      	movs	r2, #3
 8012c8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	b2db      	uxtb	r3, r3
 8012c90:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 8012c92:	2300      	movs	r3, #0
 8012c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	0a1b      	lsrs	r3, r3, #8
 8012c9c:	b2db      	uxtb	r3, r3
 8012c9e:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	3b01      	subs	r3, #1
 8012ca8:	2b0e      	cmp	r3, #14
 8012caa:	f200 81f8 	bhi.w	801309e <_ux_device_stack_descriptor_send+0x446>
 8012cae:	a201      	add	r2, pc, #4	; (adr r2, 8012cb4 <_ux_device_stack_descriptor_send+0x5c>)
 8012cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cb4:	08012cf1 	.word	0x08012cf1
 8012cb8:	08012d95 	.word	0x08012d95
 8012cbc:	08012ed1 	.word	0x08012ed1
 8012cc0:	0801309f 	.word	0x0801309f
 8012cc4:	0801309f 	.word	0x0801309f
 8012cc8:	08012cfb 	.word	0x08012cfb
 8012ccc:	08012d95 	.word	0x08012d95
 8012cd0:	0801309f 	.word	0x0801309f
 8012cd4:	08012d0b 	.word	0x08012d0b
 8012cd8:	0801309f 	.word	0x0801309f
 8012cdc:	0801309f 	.word	0x0801309f
 8012ce0:	0801309f 	.word	0x0801309f
 8012ce4:	0801309f 	.word	0x0801309f
 8012ce8:	0801309f 	.word	0x0801309f
 8012cec:	08012d95 	.word	0x08012d95
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2b12      	cmp	r3, #18
 8012cf4:	d901      	bls.n	8012cfa <_ux_device_stack_descriptor_send+0xa2>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 8012cf6:	2312      	movs	r3, #18
 8012cf8:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	2b06      	cmp	r3, #6
 8012cfe:	d104      	bne.n	8012d0a <_ux_device_stack_descriptor_send+0xb2>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2b0a      	cmp	r3, #10
 8012d04:	d901      	bls.n	8012d0a <_ux_device_stack_descriptor_send+0xb2>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 8012d06:	230a      	movs	r3, #10
 8012d08:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	2b09      	cmp	r3, #9
 8012d0e:	d104      	bne.n	8012d1a <_ux_device_stack_descriptor_send+0xc2>
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2b05      	cmp	r3, #5
 8012d14:	d901      	bls.n	8012d1a <_ux_device_stack_descriptor_send+0xc2>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 8012d16:	2305      	movs	r3, #5
 8012d18:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8012d1a:	4b79      	ldr	r3, [pc, #484]	; (8012f00 <_ux_device_stack_descriptor_send+0x2a8>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8012d22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8012d26:	4b76      	ldr	r3, [pc, #472]	; (8012f00 <_ux_device_stack_descriptor_send+0x2a8>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8012d2e:	67bb      	str	r3, [r7, #120]	; 0x78
        device_framework_end = device_framework + device_framework_length;
 8012d30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d36:	4413      	add	r3, r2
 8012d38:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 8012d3a:	e025      	b.n	8012d88 <_ux_device_stack_descriptor_send+0x130>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 8012d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	647b      	str	r3, [r7, #68]	; 0x44

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 8012d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d48:	3301      	adds	r3, #1
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	4293      	cmp	r3, r2
 8012d52:	d10f      	bne.n	8012d74 <_ux_device_stack_descriptor_send+0x11c>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8012d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d56:	68db      	ldr	r3, [r3, #12]
 8012d58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012d5a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f001 f9e3 	bl	801412a <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8012d64:	687a      	ldr	r2, [r7, #4]
 8012d66:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012d68:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012d6a:	f000 febb 	bl	8013ae4 <_ux_device_stack_transfer_request>
 8012d6e:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 8012d70:	bf00      	nop
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 8012d72:	e19f      	b.n	80130b4 <_ux_device_stack_descriptor_send+0x45c>
            device_framework_length -=  descriptor_length;
 8012d74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d78:	1ad3      	subs	r3, r2, r3
 8012d7a:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework +=  descriptor_length;
 8012d7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d82:	4413      	add	r3, r2
 8012d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (device_framework < device_framework_end)
 8012d88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012d8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d3d4      	bcc.n	8012d3c <_ux_device_stack_descriptor_send+0xe4>
        break;
 8012d92:	e18f      	b.n	80130b4 <_ux_device_stack_descriptor_send+0x45c>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2b07      	cmp	r3, #7
 8012d98:	d110      	bne.n	8012dbc <_ux_device_stack_descriptor_send+0x164>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8012d9a:	4b59      	ldr	r3, [pc, #356]	; (8012f00 <_ux_device_stack_descriptor_send+0x2a8>)
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8012da2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8012da6:	4b56      	ldr	r3, [pc, #344]	; (8012f00 <_ux_device_stack_descriptor_send+0x2a8>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8012dae:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 8012db0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012db6:	4413      	add	r3, r2
 8012db8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012dba:	e051      	b.n	8012e60 <_ux_device_stack_descriptor_send+0x208>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8012dbc:	4b50      	ldr	r3, [pc, #320]	; (8012f00 <_ux_device_stack_descriptor_send+0x2a8>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8012dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8012dc8:	4b4d      	ldr	r3, [pc, #308]	; (8012f00 <_ux_device_stack_descriptor_send+0x2a8>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8012dd0:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 8012dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012dd8:	4413      	add	r3, r2
 8012dda:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 8012ddc:	e040      	b.n	8012e60 <_ux_device_stack_descriptor_send+0x208>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 8012dde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	647b      	str	r3, [r7, #68]	; 0x44

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	2b0f      	cmp	r3, #15
 8012dea:	d112      	bne.n	8012e12 <_ux_device_stack_descriptor_send+0x1ba>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 8012dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012df0:	3301      	adds	r3, #1
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	2b0f      	cmp	r3, #15
 8012df6:	d129      	bne.n	8012e4c <_ux_device_stack_descriptor_send+0x1f4>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 8012df8:	f107 0314 	add.w	r3, r7, #20
 8012dfc:	2204      	movs	r2, #4
 8012dfe:	4941      	ldr	r1, [pc, #260]	; (8012f04 <_ux_device_stack_descriptor_send+0x2ac>)
 8012e00:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012e04:	f000 ffe6 	bl	8013dd4 <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 8012e08:	69fb      	ldr	r3, [r7, #28]
 8012e0a:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	673b      	str	r3, [r7, #112]	; 0x70
                    break;
 8012e10:	e02b      	b.n	8012e6a <_ux_device_stack_descriptor_send+0x212>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8012e12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012e16:	3301      	adds	r3, #1
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	2b02      	cmp	r3, #2
 8012e1c:	d116      	bne.n	8012e4c <_ux_device_stack_descriptor_send+0x1f4>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 8012e1e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d10c      	bne.n	8012e42 <_ux_device_stack_descriptor_send+0x1ea>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 8012e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e2c:	2208      	movs	r2, #8
 8012e2e:	4936      	ldr	r1, [pc, #216]	; (8012f08 <_ux_device_stack_descriptor_send+0x2b0>)
 8012e30:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012e34:	f000 ffce 	bl	8013dd4 <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 8012e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e3a:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 8012e40:	e013      	b.n	8012e6a <_ux_device_stack_descriptor_send+0x212>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 8012e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012e46:	3301      	adds	r3, #1
 8012e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 8012e4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e50:	1ad3      	subs	r3, r2, r3
 8012e52:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8012e54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e5a:	4413      	add	r3, r2
 8012e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (device_framework < device_framework_end)
 8012e60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012e64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d3b9      	bcc.n	8012dde <_ux_device_stack_descriptor_send+0x186>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 8012e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	f040 811e 	bne.w	80130ae <_ux_device_stack_descriptor_send+0x456>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 8012e72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	429a      	cmp	r2, r3
 8012e78:	d202      	bcs.n	8012e80 <_ux_device_stack_descriptor_send+0x228>
                length =  target_descriptor_length;
 8012e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012e7e:	e001      	b.n	8012e84 <_ux_device_stack_descriptor_send+0x22c>
            else
                length =  host_length;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8012e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e8a:	d90c      	bls.n	8012ea6 <_ux_device_stack_descriptor_send+0x24e>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8012e8c:	2212      	movs	r2, #18
 8012e8e:	2109      	movs	r1, #9
 8012e90:	2002      	movs	r0, #2
 8012e92:	f000 feb1 	bl	8013bf8 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8012e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e98:	699b      	ldr	r3, [r3, #24]
 8012e9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012e9c:	2114      	movs	r1, #20
 8012e9e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8012ea0:	4798      	blx	r3
 8012ea2:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 8012ea4:	e106      	b.n	80130b4 <_ux_device_stack_descriptor_send+0x45c>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8012ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ea8:	68db      	ldr	r3, [r3, #12]
 8012eaa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012eac:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f001 f93a 	bl	801412a <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 8012eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	68fa      	ldr	r2, [r7, #12]
 8012ebe:	b2d2      	uxtb	r2, r2
 8012ec0:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8012ec2:	687a      	ldr	r2, [r7, #4]
 8012ec4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012ec6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012ec8:	f000 fe0c 	bl	8013ae4 <_ux_device_stack_transfer_request>
 8012ecc:	6738      	str	r0, [r7, #112]	; 0x70
        }
        break;
 8012ece:	e0ee      	b.n	80130ae <_ux_device_stack_descriptor_send+0x456>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 8012ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d14f      	bne.n	8012f76 <_ux_device_stack_descriptor_send+0x31e>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8012ed6:	4b0a      	ldr	r3, [pc, #40]	; (8012f00 <_ux_device_stack_descriptor_send+0x2a8>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012ede:	3302      	adds	r3, #2
 8012ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ee4:	d912      	bls.n	8012f0c <_ux_device_stack_descriptor_send+0x2b4>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8012ee6:	2212      	movs	r2, #18
 8012ee8:	2109      	movs	r1, #9
 8012eea:	2002      	movs	r0, #2
 8012eec:	f000 fe84 	bl	8013bf8 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8012ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ef2:	699b      	ldr	r3, [r3, #24]
 8012ef4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012ef6:	2114      	movs	r1, #20
 8012ef8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8012efa:	4798      	blx	r3
 8012efc:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 8012efe:	e0d9      	b.n	80130b4 <_ux_device_stack_descriptor_send+0x45c>
 8012f00:	20003f18 	.word	0x20003f18
 8012f04:	20000054 	.word	0x20000054
 8012f08:	20000040 	.word	0x20000040
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8012f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f0e:	68db      	ldr	r3, [r3, #12]
 8012f10:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 8012f12:	4b6b      	ldr	r3, [pc, #428]	; (80130c0 <_ux_device_stack_descriptor_send+0x468>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	3302      	adds	r3, #2
 8012f1e:	b2da      	uxtb	r2, r3
 8012f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f22:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 8012f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f26:	3301      	adds	r3, #1
 8012f28:	2203      	movs	r2, #3
 8012f2a:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8012f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f2e:	1c98      	adds	r0, r3, #2
 8012f30:	4b63      	ldr	r3, [pc, #396]	; (80130c0 <_ux_device_stack_descriptor_send+0x468>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 8012f38:	4b61      	ldr	r3, [pc, #388]	; (80130c0 <_ux_device_stack_descriptor_send+0x468>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8012f3c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012f40:	461a      	mov	r2, r3
 8012f42:	f001 f8f2 	bl	801412a <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 8012f46:	4b5e      	ldr	r3, [pc, #376]	; (80130c0 <_ux_device_stack_descriptor_send+0x468>)
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012f4e:	3302      	adds	r3, #2
 8012f50:	687a      	ldr	r2, [r7, #4]
 8012f52:	429a      	cmp	r2, r3
 8012f54:	d906      	bls.n	8012f64 <_ux_device_stack_descriptor_send+0x30c>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 8012f56:	4b5a      	ldr	r3, [pc, #360]	; (80130c0 <_ux_device_stack_descriptor_send+0x468>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012f5e:	3302      	adds	r3, #2
 8012f60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012f62:	e001      	b.n	8012f68 <_ux_device_stack_descriptor_send+0x310>
            else
                length =  host_length;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8012f68:	687a      	ldr	r2, [r7, #4]
 8012f6a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012f6c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012f6e:	f000 fdb9 	bl	8013ae4 <_ux_device_stack_transfer_request>
 8012f72:	6738      	str	r0, [r7, #112]	; 0x70
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 8012f74:	e09d      	b.n	80130b2 <_ux_device_stack_descriptor_send+0x45a>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 8012f76:	4b52      	ldr	r3, [pc, #328]	; (80130c0 <_ux_device_stack_descriptor_send+0x468>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8012f7e:	66bb      	str	r3, [r7, #104]	; 0x68
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 8012f80:	4b4f      	ldr	r3, [pc, #316]	; (80130c0 <_ux_device_stack_descriptor_send+0x468>)
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8012f88:	667b      	str	r3, [r7, #100]	; 0x64
            while (string_framework_length != 0)
 8012f8a:	e07a      	b.n	8013082 <_ux_device_stack_descriptor_send+0x42a>
                if (_ux_utility_short_get(string_framework) == request_index)
 8012f8c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8012f8e:	f001 fa98 	bl	80144c2 <_ux_utility_short_get>
 8012f92:	4602      	mov	r2, r0
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	4293      	cmp	r3, r2
 8012f98:	d164      	bne.n	8013064 <_ux_device_stack_descriptor_send+0x40c>
                    if (*(string_framework + 2) == descriptor_index)
 8012f9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f9c:	3302      	adds	r3, #2
 8012f9e:	781b      	ldrb	r3, [r3, #0]
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fa4:	4293      	cmp	r3, r2
 8012fa6:	d15d      	bne.n	8013064 <_ux_device_stack_descriptor_send+0x40c>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8012fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012faa:	3303      	adds	r3, #3
 8012fac:	781b      	ldrb	r3, [r3, #0]
 8012fae:	3301      	adds	r3, #1
 8012fb0:	005b      	lsls	r3, r3, #1
 8012fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012fb6:	dd0c      	ble.n	8012fd2 <_ux_device_stack_descriptor_send+0x37a>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8012fb8:	2212      	movs	r2, #18
 8012fba:	2109      	movs	r1, #9
 8012fbc:	2002      	movs	r0, #2
 8012fbe:	f000 fe1b 	bl	8013bf8 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8012fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012fc4:	699b      	ldr	r3, [r3, #24]
 8012fc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012fc8:	2114      	movs	r1, #20
 8012fca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8012fcc:	4798      	blx	r3
 8012fce:	6738      	str	r0, [r7, #112]	; 0x70
                            break;
 8012fd0:	e05a      	b.n	8013088 <_ux_device_stack_descriptor_send+0x430>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8012fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fd4:	68db      	ldr	r3, [r3, #12]
 8012fd6:	64bb      	str	r3, [r7, #72]	; 0x48
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 8012fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fda:	3303      	adds	r3, #3
 8012fdc:	781b      	ldrb	r3, [r3, #0]
 8012fde:	3301      	adds	r3, #1
 8012fe0:	b2db      	uxtb	r3, r3
 8012fe2:	005b      	lsls	r3, r3, #1
 8012fe4:	b2da      	uxtb	r2, r3
 8012fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fe8:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 8012fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fec:	3301      	adds	r3, #1
 8012fee:	2203      	movs	r2, #3
 8012ff0:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8012ff6:	e015      	b.n	8013024 <_ux_device_stack_descriptor_send+0x3cc>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 8012ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ffa:	3304      	adds	r3, #4
 8012ffc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012ffe:	441a      	add	r2, r3
 8013000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013002:	3301      	adds	r3, #1
 8013004:	005b      	lsls	r3, r3, #1
 8013006:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013008:	440b      	add	r3, r1
 801300a:	7812      	ldrb	r2, [r2, #0]
 801300c:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 801300e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013010:	3301      	adds	r3, #1
 8013012:	005b      	lsls	r3, r3, #1
 8013014:	3301      	adds	r3, #1
 8013016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013018:	4413      	add	r3, r2
 801301a:	2200      	movs	r2, #0
 801301c:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 801301e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013020:	3301      	adds	r3, #1
 8013022:	663b      	str	r3, [r7, #96]	; 0x60
 8013024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013026:	3303      	adds	r3, #3
 8013028:	781b      	ldrb	r3, [r3, #0]
 801302a:	461a      	mov	r2, r3
 801302c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801302e:	4293      	cmp	r3, r2
 8013030:	d3e2      	bcc.n	8012ff8 <_ux_device_stack_descriptor_send+0x3a0>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 8013032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013034:	3303      	adds	r3, #3
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	3301      	adds	r3, #1
 801303a:	005b      	lsls	r3, r3, #1
 801303c:	461a      	mov	r2, r3
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	4293      	cmp	r3, r2
 8013042:	d906      	bls.n	8013052 <_ux_device_stack_descriptor_send+0x3fa>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 8013044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013046:	3303      	adds	r3, #3
 8013048:	781b      	ldrb	r3, [r3, #0]
 801304a:	3301      	adds	r3, #1
 801304c:	005b      	lsls	r3, r3, #1
 801304e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013050:	e001      	b.n	8013056 <_ux_device_stack_descriptor_send+0x3fe>
                            length =  host_length;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	66fb      	str	r3, [r7, #108]	; 0x6c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8013056:	687a      	ldr	r2, [r7, #4]
 8013058:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801305a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801305c:	f000 fd42 	bl	8013ae4 <_ux_device_stack_transfer_request>
 8013060:	6738      	str	r0, [r7, #112]	; 0x70
                        break;
 8013062:	e011      	b.n	8013088 <_ux_device_stack_descriptor_send+0x430>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 8013064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013066:	3303      	adds	r3, #3
 8013068:	781b      	ldrb	r3, [r3, #0]
 801306a:	461a      	mov	r2, r3
 801306c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801306e:	1a9b      	subs	r3, r3, r2
 8013070:	3b04      	subs	r3, #4
 8013072:	667b      	str	r3, [r7, #100]	; 0x64
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 8013074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013076:	3303      	adds	r3, #3
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	3304      	adds	r3, #4
 801307c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801307e:	4413      	add	r3, r2
 8013080:	66bb      	str	r3, [r7, #104]	; 0x68
            while (string_framework_length != 0)
 8013082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013084:	2b00      	cmp	r3, #0
 8013086:	d181      	bne.n	8012f8c <_ux_device_stack_descriptor_send+0x334>
            if (string_framework_length == 0)
 8013088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801308a:	2b00      	cmp	r3, #0
 801308c:	d111      	bne.n	80130b2 <_ux_device_stack_descriptor_send+0x45a>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801308e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013090:	699b      	ldr	r3, [r3, #24]
 8013092:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013094:	2114      	movs	r1, #20
 8013096:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013098:	4798      	blx	r3
                return(UX_ERROR);
 801309a:	23ff      	movs	r3, #255	; 0xff
 801309c:	e00b      	b.n	80130b6 <_ux_device_stack_descriptor_send+0x45e>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801309e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80130a0:	699b      	ldr	r3, [r3, #24]
 80130a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80130a4:	2114      	movs	r1, #20
 80130a6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80130a8:	4798      	blx	r3
        return(UX_ERROR);
 80130aa:	23ff      	movs	r3, #255	; 0xff
 80130ac:	e003      	b.n	80130b6 <_ux_device_stack_descriptor_send+0x45e>
        break;
 80130ae:	bf00      	nop
 80130b0:	e000      	b.n	80130b4 <_ux_device_stack_descriptor_send+0x45c>
        break;
 80130b2:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 80130b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3788      	adds	r7, #136	; 0x88
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	bf00      	nop
 80130c0:	20003f18 	.word	0x20003f18

080130c4 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b092      	sub	sp, #72	; 0x48
 80130c8:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 80130ca:	23ff      	movs	r3, #255	; 0xff
 80130cc:	643b      	str	r3, [r7, #64]	; 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80130ce:	4b29      	ldr	r3, [pc, #164]	; (8013174 <_ux_device_stack_disconnect+0xb0>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80130d4:	4b27      	ldr	r3, [pc, #156]	; (8013174 <_ux_device_stack_disconnect+0xb0>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	3320      	adds	r3, #32
 80130da:	63bb      	str	r3, [r7, #56]	; 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80130dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	2b03      	cmp	r3, #3
 80130e2:	d123      	bne.n	801312c <_ux_device_stack_disconnect+0x68>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 80130e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80130ea:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 80130ec:	e018      	b.n	8013120 <_ux_device_stack_disconnect+0x5c>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 80130ee:	2303      	movs	r3, #3
 80130f0:	607b      	str	r3, [r7, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 80130f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130f4:	60fb      	str	r3, [r7, #12]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 80130f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130f8:	685b      	ldr	r3, [r3, #4]
 80130fa:	637b      	str	r3, [r7, #52]	; 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 80130fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130fe:	627b      	str	r3, [r7, #36]	; 0x24

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 8013100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013102:	2b00      	cmp	r3, #0
 8013104:	d004      	beq.n	8013110 <_ux_device_stack_disconnect+0x4c>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 8013106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801310a:	1d3a      	adds	r2, r7, #4
 801310c:	4610      	mov	r0, r2
 801310e:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8013110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013114:	633b      	str	r3, [r7, #48]	; 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 8013116:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013118:	f000 fa90 	bl	801363c <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 801311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311e:	647b      	str	r3, [r7, #68]	; 0x44
        while (interface_ptr != UX_NULL)
 8013120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013122:	2b00      	cmp	r3, #0
 8013124:	d1e3      	bne.n	80130ee <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8013126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013128:	2201      	movs	r2, #1
 801312a:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 801312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	2b01      	cmp	r3, #1
 8013132:	d107      	bne.n	8013144 <_ux_device_stack_disconnect+0x80>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8013134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013136:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 8013138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801313a:	323c      	adds	r2, #60	; 0x3c
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 801313c:	210f      	movs	r1, #15
 801313e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013140:	4798      	blx	r3
 8013142:	6438      	str	r0, [r7, #64]	; 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 8013144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013146:	2200      	movs	r2, #0
 8013148:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 801314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801314e:	2200      	movs	r2, #0
 8013150:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8013152:	4b08      	ldr	r3, [pc, #32]	; (8013174 <_ux_device_stack_disconnect+0xb0>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d005      	beq.n	801316a <_ux_device_stack_disconnect+0xa6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 801315e:	4b05      	ldr	r3, [pc, #20]	; (8013174 <_ux_device_stack_disconnect+0xb0>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8013166:	200a      	movs	r0, #10
 8013168:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 801316a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 801316c:	4618      	mov	r0, r3
 801316e:	3748      	adds	r7, #72	; 0x48
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}
 8013174:	20003f18 	.word	0x20003f18

08013178 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b088      	sub	sp, #32
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013180:	4b18      	ldr	r3, [pc, #96]	; (80131e4 <_ux_device_stack_endpoint_stall+0x6c>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 8013186:	23ff      	movs	r3, #255	; 0xff
 8013188:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801318a:	f3ef 8310 	mrs	r3, PRIMASK
 801318e:	613b      	str	r3, [r7, #16]
    return(posture);
 8013190:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8013192:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013194:	b672      	cpsid	i
    return(int_posture);
 8013196:	68fb      	ldr	r3, [r7, #12]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 8013198:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 801319a:	4b12      	ldr	r3, [pc, #72]	; (80131e4 <_ux_device_stack_endpoint_stall+0x6c>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	6a1b      	ldr	r3, [r3, #32]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d013      	beq.n	80131cc <_ux_device_stack_endpoint_stall+0x54>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 80131a8:	2b02      	cmp	r3, #2
 80131aa:	d00f      	beq.n	80131cc <_ux_device_stack_endpoint_stall+0x54>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	699b      	ldr	r3, [r3, #24]
 80131b0:	687a      	ldr	r2, [r7, #4]
 80131b2:	2114      	movs	r1, #20
 80131b4:	69b8      	ldr	r0, [r7, #24]
 80131b6:	4798      	blx	r3
 80131b8:	61f8      	str	r0, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	699b      	ldr	r3, [r3, #24]
 80131be:	f003 0303 	and.w	r3, r3, #3
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d002      	beq.n	80131cc <_ux_device_stack_endpoint_stall+0x54>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2202      	movs	r2, #2
 80131ca:	605a      	str	r2, [r3, #4]
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	f383 8810 	msr	PRIMASK, r3
}
 80131d6:	bf00      	nop

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 80131d8:	69fb      	ldr	r3, [r7, #28]
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3720      	adds	r7, #32
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}
 80131e2:	bf00      	nop
 80131e4:	20003f18 	.word	0x20003f18

080131e8 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b08a      	sub	sp, #40	; 0x28
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	60f8      	str	r0, [r7, #12]
 80131f0:	60b9      	str	r1, [r7, #8]
 80131f2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80131f4:	4b39      	ldr	r3, [pc, #228]	; (80132dc <_ux_device_stack_get_status+0xf4>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80131fa:	4b38      	ldr	r3, [pc, #224]	; (80132dc <_ux_device_stack_get_status+0xf4>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	3320      	adds	r3, #32
 8013200:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8013202:	69fb      	ldr	r3, [r7, #28]
 8013204:	333c      	adds	r3, #60	; 0x3c
 8013206:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8013208:	69bb      	ldr	r3, [r7, #24]
 801320a:	3330      	adds	r3, #48	; 0x30
 801320c:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	2200      	movs	r2, #0
 8013214:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	68db      	ldr	r3, [r3, #12]
 801321a:	3301      	adds	r3, #1
 801321c:	2200      	movs	r2, #0
 801321e:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 8013220:	2302      	movs	r3, #2
 8013222:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	f003 0303 	and.w	r3, r3, #3
 801322a:	2b00      	cmp	r3, #0
 801322c:	d002      	beq.n	8013234 <_ux_device_stack_get_status+0x4c>
 801322e:	2b02      	cmp	r3, #2
 8013230:	d021      	beq.n	8013276 <_ux_device_stack_get_status+0x8e>
 8013232:	e03a      	b.n	80132aa <_ux_device_stack_get_status+0xc2>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 801323a:	d102      	bne.n	8013242 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 801323c:	2301      	movs	r3, #1
 801323e:	627b      	str	r3, [r7, #36]	; 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 8013240:	e03b      	b.n	80132ba <_ux_device_stack_get_status+0xd2>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 8013242:	4b26      	ldr	r3, [pc, #152]	; (80132dc <_ux_device_stack_get_status+0xf4>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801324a:	2b02      	cmp	r3, #2
 801324c:	d103      	bne.n	8013256 <_ux_device_stack_get_status+0x6e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	68db      	ldr	r3, [r3, #12]
 8013252:	2201      	movs	r2, #1
 8013254:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 8013256:	4b21      	ldr	r3, [pc, #132]	; (80132dc <_ux_device_stack_get_status+0xf4>)
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 801325e:	2b00      	cmp	r3, #0
 8013260:	d02b      	beq.n	80132ba <_ux_device_stack_get_status+0xd2>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	68db      	ldr	r3, [r3, #12]
 8013266:	781a      	ldrb	r2, [r3, #0]
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	68db      	ldr	r3, [r3, #12]
 801326c:	f042 0202 	orr.w	r2, r2, #2
 8013270:	b2d2      	uxtb	r2, r2
 8013272:	701a      	strb	r2, [r3, #0]
        break;
 8013274:	e021      	b.n	80132ba <_ux_device_stack_get_status+0xd2>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 8013276:	6a3b      	ldr	r3, [r7, #32]
 8013278:	699b      	ldr	r3, [r3, #24]
 801327a:	68ba      	ldr	r2, [r7, #8]
 801327c:	2115      	movs	r1, #21
 801327e:	6a38      	ldr	r0, [r7, #32]
 8013280:	4798      	blx	r3
 8013282:	6138      	str	r0, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	2bff      	cmp	r3, #255	; 0xff
 8013288:	d007      	beq.n	801329a <_ux_device_stack_get_status+0xb2>
        {

            if (status == UX_TRUE)
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	2b01      	cmp	r3, #1
 801328e:	d116      	bne.n	80132be <_ux_device_stack_get_status+0xd6>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	68db      	ldr	r3, [r3, #12]
 8013294:	2201      	movs	r2, #1
 8013296:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 8013298:	e011      	b.n	80132be <_ux_device_stack_get_status+0xd6>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801329a:	6a3b      	ldr	r3, [r7, #32]
 801329c:	699b      	ldr	r3, [r3, #24]
 801329e:	69ba      	ldr	r2, [r7, #24]
 80132a0:	2114      	movs	r1, #20
 80132a2:	6a38      	ldr	r0, [r7, #32]
 80132a4:	4798      	blx	r3
            return(UX_SUCCESS);            
 80132a6:	2300      	movs	r3, #0
 80132a8:	e014      	b.n	80132d4 <_ux_device_stack_get_status+0xec>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80132aa:	6a3b      	ldr	r3, [r7, #32]
 80132ac:	699b      	ldr	r3, [r3, #24]
 80132ae:	69ba      	ldr	r2, [r7, #24]
 80132b0:	2114      	movs	r1, #20
 80132b2:	6a38      	ldr	r0, [r7, #32]
 80132b4:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 80132b6:	2300      	movs	r3, #0
 80132b8:	e00c      	b.n	80132d4 <_ux_device_stack_get_status+0xec>
        break;
 80132ba:	bf00      	nop
 80132bc:	e000      	b.n	80132c0 <_ux_device_stack_get_status+0xd8>
        break;
 80132be:	bf00      	nop
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	2203      	movs	r2, #3
 80132c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 80132c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80132ca:	6978      	ldr	r0, [r7, #20]
 80132cc:	f000 fc0a 	bl	8013ae4 <_ux_device_stack_transfer_request>
 80132d0:	6138      	str	r0, [r7, #16]

    /* Return the function status.  */
    return(status);
 80132d2:	693b      	ldr	r3, [r7, #16]
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3728      	adds	r7, #40	; 0x28
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	20003f18 	.word	0x20003f18

080132e0 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b094      	sub	sp, #80	; 0x50
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	60f8      	str	r0, [r7, #12]
 80132e8:	60b9      	str	r1, [r7, #8]
 80132ea:	607a      	str	r2, [r7, #4]
 80132ec:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80132ee:	4b9a      	ldr	r3, [pc, #616]	; (8013558 <_ux_device_stack_initialize+0x278>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	3320      	adds	r3, #32
 80132f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 80132f6:	4b98      	ldr	r3, [pc, #608]	; (8013558 <_ux_device_stack_initialize+0x278>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	68fa      	ldr	r2, [r7, #12]
 80132fc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 8013300:	4b95      	ldr	r3, [pc, #596]	; (8013558 <_ux_device_stack_initialize+0x278>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	68ba      	ldr	r2, [r7, #8]
 8013306:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 801330a:	4b93      	ldr	r3, [pc, #588]	; (8013558 <_ux_device_stack_initialize+0x278>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 8013314:	4b90      	ldr	r3, [pc, #576]	; (8013558 <_ux_device_stack_initialize+0x278>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	683a      	ldr	r2, [r7, #0]
 801331a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 801331e:	4b8e      	ldr	r3, [pc, #568]	; (8013558 <_ux_device_stack_initialize+0x278>)
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013324:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 8013328:	4b8b      	ldr	r3, [pc, #556]	; (8013558 <_ux_device_stack_initialize+0x278>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801332e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 8013332:	4b89      	ldr	r3, [pc, #548]	; (8013558 <_ux_device_stack_initialize+0x278>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013338:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 801333c:	4b86      	ldr	r3, [pc, #536]	; (8013558 <_ux_device_stack_initialize+0x278>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013342:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 8013346:	4b84      	ldr	r3, [pc, #528]	; (8013558 <_ux_device_stack_initialize+0x278>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801334c:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 8013350:	f44f 728a 	mov.w	r2, #276	; 0x114
 8013354:	2100      	movs	r1, #0
 8013356:	2000      	movs	r0, #0
 8013358:	f000 fdbe 	bl	8013ed8 <_ux_utility_memory_allocate>
 801335c:	6238      	str	r0, [r7, #32]
    if (memory == UX_NULL)
 801335e:	6a3b      	ldr	r3, [r7, #32]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d101      	bne.n	8013368 <_ux_device_stack_initialize+0x88>
        return(UX_MEMORY_INSUFFICIENT);
 8013364:	2312      	movs	r3, #18
 8013366:	e160      	b.n	801362a <_ux_device_stack_initialize+0x34a>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 8013368:	4b7b      	ldr	r3, [pc, #492]	; (8013558 <_ux_device_stack_initialize+0x278>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	6a3a      	ldr	r2, [r7, #32]
 801336e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8013372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013374:	336c      	adds	r3, #108	; 0x6c
 8013376:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 8013378:	f44f 7280 	mov.w	r2, #256	; 0x100
 801337c:	2101      	movs	r1, #1
 801337e:	2000      	movs	r0, #0
 8013380:	f000 fdaa 	bl	8013ed8 <_ux_utility_memory_allocate>
 8013384:	4602      	mov	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 8013386:	69fb      	ldr	r3, [r7, #28]
 8013388:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 801338a:	69fb      	ldr	r3, [r7, #28]
 801338c:	68db      	ldr	r3, [r3, #12]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d102      	bne.n	8013398 <_ux_device_stack_initialize+0xb8>
        status = UX_MEMORY_INSUFFICIENT;
 8013392:	2312      	movs	r3, #18
 8013394:	64bb      	str	r3, [r7, #72]	; 0x48
 8013396:	e001      	b.n	801339c <_ux_device_stack_initialize+0xbc>
    else
        status = UX_SUCCESS;
 8013398:	2300      	movs	r3, #0
 801339a:	64bb      	str	r3, [r7, #72]	; 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 801339c:	2300      	movs	r3, #0
 801339e:	647b      	str	r3, [r7, #68]	; 0x44
    endpoints_found                    =  0;
 80133a0:	2300      	movs	r3, #0
 80133a2:	643b      	str	r3, [r7, #64]	; 0x40
    max_interface_number               =  0;
 80133a4:	2300      	movs	r3, #0
 80133a6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 80133a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	f040 8090 	bne.w	80134d0 <_ux_device_stack_initialize+0x1f0>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 80133b0:	4b69      	ldr	r3, [pc, #420]	; (8013558 <_ux_device_stack_initialize+0x278>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80133b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 80133ba:	4b67      	ldr	r3, [pc, #412]	; (8013558 <_ux_device_stack_initialize+0x278>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80133c2:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 80133c4:	2300      	movs	r3, #0
 80133c6:	63bb      	str	r3, [r7, #56]	; 0x38
        local_endpoints_found              =  0;
 80133c8:	2300      	movs	r3, #0
 80133ca:	637b      	str	r3, [r7, #52]	; 0x34
        endpoints_in_interface_found       =  0;
 80133cc:	2300      	movs	r3, #0
 80133ce:	633b      	str	r3, [r7, #48]	; 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 80133d0:	e054      	b.n	801347c <_ux_device_stack_initialize+0x19c>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 80133d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 80133d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133da:	785b      	ldrb	r3, [r3, #1]
 80133dc:	75fb      	strb	r3, [r7, #23]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 80133de:	7dfb      	ldrb	r3, [r7, #23]
 80133e0:	2b02      	cmp	r3, #2
 80133e2:	d029      	beq.n	8013438 <_ux_device_stack_initialize+0x158>
 80133e4:	2b04      	cmp	r3, #4
 80133e6:	d13e      	bne.n	8013466 <_ux_device_stack_initialize+0x186>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 80133e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ea:	3303      	adds	r3, #3
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d10b      	bne.n	801340a <_ux_device_stack_initialize+0x12a>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 80133f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f6:	4413      	add	r3, r2
 80133f8:	637b      	str	r3, [r7, #52]	; 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 80133fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133fc:	3304      	adds	r3, #4
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	633b      	str	r3, [r7, #48]	; 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 8013402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013404:	3301      	adds	r3, #1
 8013406:	63bb      	str	r3, [r7, #56]	; 0x38
 8013408:	e00a      	b.n	8013420 <_ux_device_stack_initialize+0x140>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 801340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801340c:	3304      	adds	r3, #4
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	461a      	mov	r2, r3
 8013412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013414:	4293      	cmp	r3, r2
 8013416:	d203      	bcs.n	8013420 <_ux_device_stack_initialize+0x140>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 8013418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341a:	3304      	adds	r3, #4
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	633b      	str	r3, [r7, #48]	; 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 8013420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013422:	3302      	adds	r3, #2
 8013424:	781b      	ldrb	r3, [r3, #0]
 8013426:	461a      	mov	r2, r3
 8013428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801342a:	4293      	cmp	r3, r2
 801342c:	d21d      	bcs.n	801346a <_ux_device_stack_initialize+0x18a>
                    max_interface_number = *(device_framework + 2);
 801342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013430:	3302      	adds	r3, #2
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	63fb      	str	r3, [r7, #60]	; 0x3c

                break;
 8013436:	e018      	b.n	801346a <_ux_device_stack_initialize+0x18a>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 8013438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801343a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801343c:	429a      	cmp	r2, r3
 801343e:	d901      	bls.n	8013444 <_ux_device_stack_initialize+0x164>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 8013440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013442:	647b      	str	r3, [r7, #68]	; 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 8013444:	2300      	movs	r3, #0
 8013446:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 8013448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801344c:	4413      	add	r3, r2
 801344e:	637b      	str	r3, [r7, #52]	; 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 8013450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013454:	429a      	cmp	r2, r3
 8013456:	d901      	bls.n	801345c <_ux_device_stack_initialize+0x17c>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 8013458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801345a:	643b      	str	r3, [r7, #64]	; 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 801345c:	2300      	movs	r3, #0
 801345e:	637b      	str	r3, [r7, #52]	; 0x34
                endpoints_in_interface_found  =  0;
 8013460:	2300      	movs	r3, #0
 8013462:	633b      	str	r3, [r7, #48]	; 0x30

                break;
 8013464:	e002      	b.n	801346c <_ux_device_stack_initialize+0x18c>

            default:
                break;
 8013466:	bf00      	nop
 8013468:	e000      	b.n	801346c <_ux_device_stack_initialize+0x18c>
                break;
 801346a:	bf00      	nop
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 801346c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801346e:	69bb      	ldr	r3, [r7, #24]
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8013474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	4413      	add	r3, r2
 801347a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (device_framework_length != 0)
 801347c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801347e:	2b00      	cmp	r3, #0
 8013480:	d1a7      	bne.n	80133d2 <_ux_device_stack_initialize+0xf2>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 8013482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013486:	4413      	add	r3, r2
 8013488:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 801348a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801348c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801348e:	429a      	cmp	r2, r3
 8013490:	d901      	bls.n	8013496 <_ux_device_stack_initialize+0x1b6>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 8013492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013494:	643b      	str	r3, [r7, #64]	; 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 8013496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801349a:	429a      	cmp	r2, r3
 801349c:	d901      	bls.n	80134a2 <_ux_device_stack_initialize+0x1c2>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 801349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134a0:	647b      	str	r3, [r7, #68]	; 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 80134a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d106      	bne.n	80134b6 <_ux_device_stack_initialize+0x1d6>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 80134a8:	2242      	movs	r2, #66	; 0x42
 80134aa:	2103      	movs	r1, #3
 80134ac:	2002      	movs	r0, #2
 80134ae:	f000 fba3 	bl	8013bf8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 80134b2:	2342      	movs	r3, #66	; 0x42
 80134b4:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 80134b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d109      	bne.n	80134d0 <_ux_device_stack_initialize+0x1f0>
 80134bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134be:	2b0f      	cmp	r3, #15
 80134c0:	d906      	bls.n	80134d0 <_ux_device_stack_initialize+0x1f0>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 80134c2:	2212      	movs	r2, #18
 80134c4:	2103      	movs	r1, #3
 80134c6:	2002      	movs	r0, #2
 80134c8:	f000 fb96 	bl	8013bf8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 80134cc:	2312      	movs	r3, #18
 80134ce:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 80134d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d118      	bne.n	8013508 <_ux_device_stack_initialize+0x228>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 80134d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134da:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 80134de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80134e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 80134e6:	2338      	movs	r3, #56	; 0x38
 80134e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134ea:	2100      	movs	r1, #0
 80134ec:	2000      	movs	r0, #0
 80134ee:	f000 fdf7 	bl	80140e0 <_ux_utility_memory_allocate_mulc_safe>
 80134f2:	6138      	str	r0, [r7, #16]
        if (interfaces_pool == UX_NULL)
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d102      	bne.n	8013500 <_ux_device_stack_initialize+0x220>
            status = UX_MEMORY_INSUFFICIENT;
 80134fa:	2312      	movs	r3, #18
 80134fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80134fe:	e003      	b.n	8013508 <_ux_device_stack_initialize+0x228>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 8013500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013502:	693a      	ldr	r2, [r7, #16]
 8013504:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 8013508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801350a:	2b00      	cmp	r3, #0
 801350c:	d045      	beq.n	801359a <_ux_device_stack_initialize+0x2ba>
 801350e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013510:	2b00      	cmp	r3, #0
 8013512:	d142      	bne.n	801359a <_ux_device_stack_initialize+0x2ba>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 8013514:	2390      	movs	r3, #144	; 0x90
 8013516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013518:	2100      	movs	r1, #0
 801351a:	2000      	movs	r0, #0
 801351c:	f000 fde0 	bl	80140e0 <_ux_utility_memory_allocate_mulc_safe>
 8013520:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (endpoints_pool == UX_NULL)
 8013522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013524:	2b00      	cmp	r3, #0
 8013526:	d102      	bne.n	801352e <_ux_device_stack_initialize+0x24e>
            status = UX_MEMORY_INSUFFICIENT;
 8013528:	2312      	movs	r3, #18
 801352a:	64bb      	str	r3, [r7, #72]	; 0x48
        if (endpoints_pool == UX_NULL)
 801352c:	e037      	b.n	801359e <_ux_device_stack_initialize+0x2be>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 801352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013530:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013532:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 8013536:	e022      	b.n	801357e <_ux_device_stack_initialize+0x29e>
            {

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 8013538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801353c:	2101      	movs	r1, #1
 801353e:	2000      	movs	r0, #0
 8013540:	f000 fcca 	bl	8013ed8 <_ux_utility_memory_allocate>
 8013544:	4602      	mov	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 8013546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013548:	63da      	str	r2, [r3, #60]	; 0x3c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 801354a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801354e:	2b00      	cmp	r3, #0
 8013550:	d104      	bne.n	801355c <_ux_device_stack_initialize+0x27c>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 8013552:	2312      	movs	r3, #18
 8013554:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 8013556:	e01f      	b.n	8013598 <_ux_device_stack_initialize+0x2b8>
 8013558:	20003f18 	.word	0x20003f18
                }
        
                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 801355c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801355e:	3360      	adds	r3, #96	; 0x60
 8013560:	2200      	movs	r2, #0
 8013562:	4934      	ldr	r1, [pc, #208]	; (8013634 <_ux_device_stack_initialize+0x354>)
 8013564:	4618      	mov	r0, r3
 8013566:	f000 ff3f 	bl	80143e8 <_ux_utility_semaphore_create>
 801356a:	64b8      	str	r0, [r7, #72]	; 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 801356c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801356e:	2b00      	cmp	r3, #0
 8013570:	d002      	beq.n	8013578 <_ux_device_stack_initialize+0x298>
                {
                    status = UX_SEMAPHORE_ERROR;
 8013572:	2315      	movs	r3, #21
 8013574:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 8013576:	e00f      	b.n	8013598 <_ux_device_stack_initialize+0x2b8>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 8013578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801357a:	3390      	adds	r3, #144	; 0x90
 801357c:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 801357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013580:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
 8013584:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013586:	4613      	mov	r3, r2
 8013588:	00db      	lsls	r3, r3, #3
 801358a:	4413      	add	r3, r2
 801358c:	011b      	lsls	r3, r3, #4
 801358e:	440b      	add	r3, r1
 8013590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013592:	429a      	cmp	r2, r3
 8013594:	d3d0      	bcc.n	8013538 <_ux_device_stack_initialize+0x258>
        if (endpoints_pool == UX_NULL)
 8013596:	e002      	b.n	801359e <_ux_device_stack_initialize+0x2be>
 8013598:	e001      	b.n	801359e <_ux_device_stack_initialize+0x2be>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 801359a:	2300      	movs	r3, #0
 801359c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 801359e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d101      	bne.n	80135a8 <_ux_device_stack_initialize+0x2c8>
        return(UX_SUCCESS);
 80135a4:	2300      	movs	r3, #0
 80135a6:	e040      	b.n	801362a <_ux_device_stack_initialize+0x34a>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 80135a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d021      	beq.n	80135f2 <_ux_device_stack_initialize+0x312>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 80135ae:	e014      	b.n	80135da <_ux_device_stack_initialize+0x2fa>
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 80135b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d004      	beq.n	80135c2 <_ux_device_stack_initialize+0x2e2>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 80135b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135ba:	3360      	adds	r3, #96	; 0x60
 80135bc:	4618      	mov	r0, r3
 80135be:	f000 ff2d 	bl	801441c <_ux_utility_semaphore_delete>

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 80135c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d004      	beq.n	80135d4 <_ux_device_stack_initialize+0x2f4>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 80135ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135ce:	4618      	mov	r0, r3
 80135d0:	f000 fdca 	bl	8014168 <_ux_utility_memory_free>

            /* Move to previous endpoint.  */
            endpoints_pool --;
 80135d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135d6:	3b90      	subs	r3, #144	; 0x90
 80135d8:	64fb      	str	r3, [r7, #76]	; 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 80135da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135dc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80135e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d2e4      	bcs.n	80135b0 <_ux_device_stack_initialize+0x2d0>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 80135e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80135ec:	4618      	mov	r0, r3
 80135ee:	f000 fdbb 	bl	8014168 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 80135f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d005      	beq.n	8013608 <_ux_device_stack_initialize+0x328>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 80135fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8013602:	4618      	mov	r0, r3
 8013604:	f000 fdb0 	bl	8014168 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 8013608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801360a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801360c:	2b00      	cmp	r3, #0
 801360e:	d004      	beq.n	801361a <_ux_device_stack_initialize+0x33a>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 8013610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013614:	4618      	mov	r0, r3
 8013616:	f000 fda7 	bl	8014168 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 801361a:	4b07      	ldr	r3, [pc, #28]	; (8013638 <_ux_device_stack_initialize+0x358>)
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8013622:	4618      	mov	r0, r3
 8013624:	f000 fda0 	bl	8014168 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8013628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801362a:	4618      	mov	r0, r3
 801362c:	3750      	adds	r7, #80	; 0x50
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}
 8013632:	bf00      	nop
 8013634:	08016de8 	.word	0x08016de8
 8013638:	20003f18 	.word	0x20003f18

0801363c <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b086      	sub	sp, #24
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013644:	4b20      	ldr	r3, [pc, #128]	; (80136c8 <_ux_device_stack_interface_delete+0x8c>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	3320      	adds	r3, #32
 801364a:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013650:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 8013652:	e01c      	b.n	801368e <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 8013654:	697b      	ldr	r3, [r7, #20]
 8013656:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801365c:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 801365e:	4b1a      	ldr	r3, [pc, #104]	; (80136c8 <_ux_device_stack_interface_delete+0x8c>)
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	699b      	ldr	r3, [r3, #24]
 8013668:	68fa      	ldr	r2, [r7, #12]
 801366a:	210f      	movs	r1, #15
 801366c:	68b8      	ldr	r0, [r7, #8]
 801366e:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2200      	movs	r2, #0
 8013674:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	2200      	movs	r2, #0
 801367a:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	2200      	movs	r2, #0
 8013680:	625a      	str	r2, [r3, #36]	; 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	2200      	movs	r2, #0
 8013686:	629a      	str	r2, [r3, #40]	; 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2200      	movs	r2, #0
 801368c:	62da      	str	r2, [r3, #44]	; 0x2c
    while (next_endpoint != UX_NULL)
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d1df      	bne.n	8013654 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	2200      	movs	r2, #0
 80136a2:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2200      	movs	r2, #0
 80136a8:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	2200      	movs	r2, #0
 80136ae:	631a      	str	r2, [r3, #48]	; 0x30
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2200      	movs	r2, #0
 80136b4:	635a      	str	r2, [r3, #52]	; 0x34
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2200      	movs	r2, #0
 80136ba:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 80136bc:	2300      	movs	r3, #0
}
 80136be:	4618      	mov	r0, r3
 80136c0:	3718      	adds	r7, #24
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}
 80136c6:	bf00      	nop
 80136c8:	20003f18 	.word	0x20003f18

080136cc <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b092      	sub	sp, #72	; 0x48
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	60f8      	str	r0, [r7, #12]
 80136d4:	60b9      	str	r1, [r7, #8]
 80136d6:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80136d8:	4b82      	ldr	r3, [pc, #520]	; (80138e4 <_ux_device_stack_interface_set+0x218>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80136de:	4b81      	ldr	r3, [pc, #516]	; (80138e4 <_ux_device_stack_interface_set+0x218>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	3320      	adds	r3, #32
 80136e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 80136e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80136ec:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 80136ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80136f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 80136f6:	e009      	b.n	801370c <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 80136f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d009      	beq.n	8013714 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 8013700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013702:	3338      	adds	r3, #56	; 0x38
 8013704:	647b      	str	r3, [r7, #68]	; 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 8013706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013708:	3b01      	subs	r3, #1
 801370a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 801370c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801370e:	2b00      	cmp	r3, #0
 8013710:	d1f2      	bne.n	80136f8 <_ux_device_stack_interface_set+0x2c>
 8013712:	e000      	b.n	8013716 <_ux_device_stack_interface_set+0x4a>
            break;
 8013714:	bf00      	nop
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 8013716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013718:	2b00      	cmp	r3, #0
 801371a:	d101      	bne.n	8013720 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 801371c:	2312      	movs	r3, #18
 801371e:	e0dd      	b.n	80138dc <_ux_device_stack_interface_set+0x210>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 8013720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013722:	2201      	movs	r2, #1
 8013724:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 8013726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013728:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 801372a:	2209      	movs	r2, #9
 801372c:	496e      	ldr	r1, [pc, #440]	; (80138e8 <_ux_device_stack_interface_set+0x21c>)
 801372e:	68f8      	ldr	r0, [r7, #12]
 8013730:	f000 fb50 	bl	8013dd4 <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 8013734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801373a:	2b00      	cmp	r3, #0
 801373c:	d104      	bne.n	8013748 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 801373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013742:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8013746:	e00e      	b.n	8013766 <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 8013748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801374a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801374e:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8013750:	e002      	b.n	8013758 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 8013752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013756:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8013758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801375c:	2b00      	cmp	r3, #0
 801375e:	d1f8      	bne.n	8013752 <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 8013760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013764:	631a      	str	r2, [r3, #48]	; 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	781b      	ldrb	r3, [r3, #0]
 801376a:	461a      	mov	r2, r3
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	1a9b      	subs	r3, r3, r2
 8013770:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	461a      	mov	r2, r3
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	4413      	add	r3, r2
 801377c:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 801377e:	e0a4      	b.n	80138ca <_ux_device_stack_interface_set+0x1fe>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	785b      	ldrb	r3, [r3, #1]
 801378a:	76fb      	strb	r3, [r7, #27]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 801378c:	7efb      	ldrb	r3, [r7, #27]
 801378e:	2b05      	cmp	r3, #5
 8013790:	d009      	beq.n	80137a6 <_ux_device_stack_interface_set+0xda>
 8013792:	2b05      	cmp	r3, #5
 8013794:	f300 8090 	bgt.w	80138b8 <_ux_device_stack_interface_set+0x1ec>
 8013798:	2b02      	cmp	r3, #2
 801379a:	f000 8087 	beq.w	80138ac <_ux_device_stack_interface_set+0x1e0>
 801379e:	2b04      	cmp	r3, #4
 80137a0:	f000 8084 	beq.w	80138ac <_ux_device_stack_interface_set+0x1e0>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 80137a4:	e088      	b.n	80138b8 <_ux_device_stack_interface_set+0x1ec>
            endpoint = device -> ux_slave_device_endpoints_pool;
 80137a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80137ac:	63bb      	str	r3, [r7, #56]	; 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 80137ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80137b4:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 80137b6:	e00d      	b.n	80137d4 <_ux_device_stack_interface_set+0x108>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 80137b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d103      	bne.n	80137c8 <_ux_device_stack_interface_set+0xfc>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 80137c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c2:	2201      	movs	r2, #1
 80137c4:	601a      	str	r2, [r3, #0]
                    break;
 80137c6:	e008      	b.n	80137da <_ux_device_stack_interface_set+0x10e>
                endpoint++;
 80137c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ca:	3390      	adds	r3, #144	; 0x90
 80137cc:	63bb      	str	r3, [r7, #56]	; 0x38
               endpoints_pool_number--; 
 80137ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d0:	3b01      	subs	r3, #1
 80137d2:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 80137d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d1ee      	bne.n	80137b8 <_ux_device_stack_interface_set+0xec>
            if (endpoints_pool_number == 0)
 80137da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d101      	bne.n	80137e4 <_ux_device_stack_interface_set+0x118>
                return(UX_MEMORY_INSUFFICIENT);
 80137e0:	2312      	movs	r3, #18
 80137e2:	e07b      	b.n	80138dc <_ux_device_stack_interface_set+0x210>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 80137e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e6:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 80137e8:	2206      	movs	r2, #6
 80137ea:	4940      	ldr	r1, [pc, #256]	; (80138ec <_ux_device_stack_interface_set+0x220>)
 80137ec:	68f8      	ldr	r0, [r7, #12]
 80137ee:	f000 faf1 	bl	8013dd4 <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80137f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f4:	3330      	adds	r3, #48	; 0x30
 80137f6:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80137f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fa:	69db      	ldr	r3, [r3, #28]
            max_transfer_length =
 80137fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013800:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8013802:	4b38      	ldr	r3, [pc, #224]	; (80138e4 <_ux_device_stack_interface_set+0x218>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 801380a:	2b02      	cmp	r3, #2
 801380c:	d118      	bne.n	8013840 <_ux_device_stack_interface_set+0x174>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 801380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013810:	699b      	ldr	r3, [r3, #24]
 8013812:	f003 0301 	and.w	r3, r3, #1
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8013816:	2b00      	cmp	r3, #0
 8013818:	d012      	beq.n	8013840 <_ux_device_stack_interface_set+0x174>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801381c:	69db      	ldr	r3, [r3, #28]
 801381e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8013822:	613b      	str	r3, [r7, #16]
                if (n_trans)
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d00a      	beq.n	8013840 <_ux_device_stack_interface_set+0x174>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	0adb      	lsrs	r3, r3, #11
 801382e:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 8013830:	693b      	ldr	r3, [r7, #16]
 8013832:	3301      	adds	r3, #1
 8013834:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 8013836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013838:	693a      	ldr	r2, [r7, #16]
 801383a:	fb02 f303 	mul.w	r3, r2, r3
 801383e:	62fb      	str	r3, [r7, #44]	; 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013844:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801384a:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	f04f 32ff 	mov.w	r2, #4294967295
 8013852:	64da      	str	r2, [r3, #76]	; 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 8013854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013858:	629a      	str	r2, [r3, #40]	; 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 801385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801385c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801385e:	62da      	str	r2, [r3, #44]	; 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8013860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013862:	699b      	ldr	r3, [r3, #24]
 8013864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013866:	210e      	movs	r1, #14
 8013868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801386a:	4798      	blx	r3
 801386c:	6238      	str	r0, [r7, #32]
            if (status != UX_SUCCESS)
 801386e:	6a3b      	ldr	r3, [r7, #32]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d004      	beq.n	801387e <_ux_device_stack_interface_set+0x1b2>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8013874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013876:	2200      	movs	r2, #0
 8013878:	601a      	str	r2, [r3, #0]
                return(status);
 801387a:	6a3b      	ldr	r3, [r7, #32]
 801387c:	e02e      	b.n	80138dc <_ux_device_stack_interface_set+0x210>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 801387e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013882:	2b00      	cmp	r3, #0
 8013884:	d103      	bne.n	801388e <_ux_device_stack_interface_set+0x1c2>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 8013886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801388a:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 801388c:	e015      	b.n	80138ba <_ux_device_stack_interface_set+0x1ee>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 801388e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013892:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8013894:	e002      	b.n	801389c <_ux_device_stack_interface_set+0x1d0>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 8013896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801389a:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d1f8      	bne.n	8013896 <_ux_device_stack_interface_set+0x1ca>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 80138a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138a8:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 80138aa:	e006      	b.n	80138ba <_ux_device_stack_interface_set+0x1ee>
            status =  _ux_device_stack_interface_start(interface_ptr);
 80138ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80138ae:	f000 f81f 	bl	80138f0 <_ux_device_stack_interface_start>
 80138b2:	6238      	str	r0, [r7, #32]
            return(status);
 80138b4:	6a3b      	ldr	r3, [r7, #32]
 80138b6:	e011      	b.n	80138dc <_ux_device_stack_interface_set+0x210>
            break;
 80138b8:	bf00      	nop
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 80138ba:	68ba      	ldr	r2, [r7, #8]
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	1ad3      	subs	r3, r2, r3
 80138c0:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 80138c2:	68fa      	ldr	r2, [r7, #12]
 80138c4:	69fb      	ldr	r3, [r7, #28]
 80138c6:	4413      	add	r3, r2
 80138c8:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	f47f af57 	bne.w	8013780 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 80138d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80138d4:	f000 f80c 	bl	80138f0 <_ux_device_stack_interface_start>
 80138d8:	6238      	str	r0, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 80138da:	6a3b      	ldr	r3, [r7, #32]
}
 80138dc:	4618      	mov	r0, r3
 80138de:	3748      	adds	r7, #72	; 0x48
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}
 80138e4:	20003f18 	.word	0x20003f18
 80138e8:	20000048 	.word	0x20000048
 80138ec:	20000028 	.word	0x20000028

080138f0 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b090      	sub	sp, #64	; 0x40
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 80138f8:	4b25      	ldr	r3, [pc, #148]	; (8013990 <_ux_device_stack_interface_start+0xa0>)
 80138fa:	681a      	ldr	r2, [r3, #0]
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	695b      	ldr	r3, [r3, #20]
 8013900:	3356      	adds	r3, #86	; 0x56
 8013902:	009b      	lsls	r3, r3, #2
 8013904:	4413      	add	r3, r2
 8013906:	685b      	ldr	r3, [r3, #4]
 8013908:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 801390a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801390c:	2b00      	cmp	r3, #0
 801390e:	d101      	bne.n	8013914 <_ux_device_stack_interface_start+0x24>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 8013910:	2357      	movs	r3, #87	; 0x57
 8013912:	e038      	b.n	8013986 <_ux_device_stack_interface_start+0x96>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013914:	4b1e      	ldr	r3, [pc, #120]	; (8013990 <_ux_device_stack_interface_start+0xa0>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	3320      	adds	r3, #32
 801391a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 801391c:	2301      	movs	r3, #1
 801391e:	60bb      	str	r3, [r7, #8]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	613b      	str	r3, [r7, #16]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6a1b      	ldr	r3, [r3, #32]
 8013928:	61fb      	str	r3, [r7, #28]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801392e:	623b      	str	r3, [r7, #32]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013934:	627b      	str	r3, [r7, #36]	; 0x24
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 8013936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013938:	6a1b      	ldr	r3, [r3, #32]
 801393a:	61bb      	str	r3, [r7, #24]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 801393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013940:	617b      	str	r3, [r7, #20]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 8013942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013944:	687a      	ldr	r2, [r7, #4]
 8013946:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 801394a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801394e:	f107 0208 	add.w	r2, r7, #8
 8013952:	4610      	mov	r0, r2
 8013954:	4798      	blx	r3
 8013956:	6378      	str	r0, [r7, #52]	; 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 8013958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801395a:	2b00      	cmp	r3, #0
 801395c:	d112      	bne.n	8013984 <_ux_device_stack_interface_start+0x94>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 801395e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013960:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8013962:	2302      	movs	r3, #2
 8013964:	60bb      	str	r3, [r7, #8]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8013966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801396a:	f107 0208 	add.w	r2, r7, #8
 801396e:	4610      	mov	r0, r2
 8013970:	4798      	blx	r3
 8013972:	6378      	str	r0, [r7, #52]	; 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 8013974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013976:	2b00      	cmp	r3, #0
 8013978:	d102      	bne.n	8013980 <_ux_device_stack_interface_start+0x90>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801397e:	605a      	str	r2, [r3, #4]

        return(status); 
 8013980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013982:	e000      	b.n	8013986 <_ux_device_stack_interface_start+0x96>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 8013984:	2357      	movs	r3, #87	; 0x57
}
 8013986:	4618      	mov	r0, r3
 8013988:	3740      	adds	r7, #64	; 0x40
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}
 801398e:	bf00      	nop
 8013990:	20003f18 	.word	0x20003f18

08013994 <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b08a      	sub	sp, #40	; 0x28
 8013998:	af00      	add	r7, sp, #0
 801399a:	60f8      	str	r0, [r7, #12]
 801399c:	60b9      	str	r1, [r7, #8]
 801399e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80139a0:	4b29      	ldr	r3, [pc, #164]	; (8013a48 <_ux_device_stack_set_feature+0xb4>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80139a6:	4b28      	ldr	r3, [pc, #160]	; (8013a48 <_ux_device_stack_set_feature+0xb4>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	3320      	adds	r3, #32
 80139ac:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80139ae:	69bb      	ldr	r3, [r7, #24]
 80139b0:	333c      	adds	r3, #60	; 0x3c
 80139b2:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	f003 0303 	and.w	r3, r3, #3
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d002      	beq.n	80139c4 <_ux_device_stack_set_feature+0x30>
 80139be:	2b02      	cmp	r3, #2
 80139c0:	d014      	beq.n	80139ec <_ux_device_stack_set_feature+0x58>
 80139c2:	e035      	b.n	8013a30 <_ux_device_stack_set_feature+0x9c>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	2b01      	cmp	r3, #1
 80139c8:	d10e      	bne.n	80139e8 <_ux_device_stack_set_feature+0x54>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 80139ca:	4b1f      	ldr	r3, [pc, #124]	; (8013a48 <_ux_device_stack_set_feature+0xb4>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d006      	beq.n	80139e4 <_ux_device_stack_set_feature+0x50>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 80139d6:	4b1c      	ldr	r3, [pc, #112]	; (8013a48 <_ux_device_stack_set_feature+0xb4>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	2201      	movs	r2, #1
 80139dc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

                /* OK. */
                return (UX_SUCCESS);
 80139e0:	2300      	movs	r3, #0
 80139e2:	e02c      	b.n	8013a3e <_ux_device_stack_set_feature+0xaa>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 80139e4:	2354      	movs	r3, #84	; 0x54
 80139e6:	e02a      	b.n	8013a3e <_ux_device_stack_set_feature+0xaa>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 80139e8:	2354      	movs	r3, #84	; 0x54
 80139ea:	e028      	b.n	8013a3e <_ux_device_stack_set_feature+0xaa>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 80139ec:	69bb      	ldr	r3, [r7, #24]
 80139ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80139f2:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 80139f4:	e019      	b.n	8013a2a <_ux_device_stack_set_feature+0x96>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 80139f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139fa:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 80139fc:	e00f      	b.n	8013a1e <_ux_device_stack_set_feature+0x8a>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 80139fe:	6a3b      	ldr	r3, [r7, #32]
 8013a00:	695b      	ldr	r3, [r3, #20]
 8013a02:	687a      	ldr	r2, [r7, #4]
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d107      	bne.n	8013a18 <_ux_device_stack_set_feature+0x84>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	699b      	ldr	r3, [r3, #24]
 8013a0c:	6a3a      	ldr	r2, [r7, #32]
 8013a0e:	2114      	movs	r1, #20
 8013a10:	69f8      	ldr	r0, [r7, #28]
 8013a12:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8013a14:	2300      	movs	r3, #0
 8013a16:	e012      	b.n	8013a3e <_ux_device_stack_set_feature+0xaa>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8013a18:	6a3b      	ldr	r3, [r7, #32]
 8013a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a1c:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8013a1e:	6a3b      	ldr	r3, [r7, #32]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d1ec      	bne.n	80139fe <_ux_device_stack_set_feature+0x6a>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 8013a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a28:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface_ptr != UX_NULL)
 8013a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d1e2      	bne.n	80139f6 <_ux_device_stack_set_feature+0x62>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8013a30:	69fb      	ldr	r3, [r7, #28]
 8013a32:	699b      	ldr	r3, [r3, #24]
 8013a34:	697a      	ldr	r2, [r7, #20]
 8013a36:	2114      	movs	r1, #20
 8013a38:	69f8      	ldr	r0, [r7, #28]
 8013a3a:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8013a3c:	2300      	movs	r3, #0
    }
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3728      	adds	r7, #40	; 0x28
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
 8013a46:	bf00      	nop
 8013a48:	20003f18 	.word	0x20003f18

08013a4c <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b088      	sub	sp, #32
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
 8013a54:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013a56:	4b19      	ldr	r3, [pc, #100]	; (8013abc <_ux_device_stack_transfer_abort+0x70>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	683a      	ldr	r2, [r7, #0]
 8013a60:	625a      	str	r2, [r3, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a62:	f3ef 8310 	mrs	r3, PRIMASK
 8013a66:	617b      	str	r3, [r7, #20]
    return(posture);
 8013a68:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013a6a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013a6c:	b672      	cpsid	i
    return(int_posture);
 8013a6e:	693b      	ldr	r3, [r7, #16]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 8013a70:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	2b01      	cmp	r3, #1
 8013a78:	d114      	bne.n	8013aa4 <_ux_device_stack_transfer_abort+0x58>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 8013a7a:	69fb      	ldr	r3, [r7, #28]
 8013a7c:	699b      	ldr	r3, [r3, #24]
 8013a7e:	687a      	ldr	r2, [r7, #4]
 8013a80:	210d      	movs	r1, #13
 8013a82:	69f8      	ldr	r0, [r7, #28]
 8013a84:	4798      	blx	r3
 8013a86:	69bb      	ldr	r3, [r7, #24]
 8013a88:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	f383 8810 	msr	PRIMASK, r3
}
 8013a90:	bf00      	nop

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2204      	movs	r2, #4
 8013a96:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	3330      	adds	r3, #48	; 0x30
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f000 fd03 	bl	80144a8 <_ux_utility_semaphore_put>
 8013aa2:	e005      	b.n	8013ab0 <_ux_device_stack_transfer_abort+0x64>
 8013aa4:	69bb      	ldr	r3, [r7, #24]
 8013aa6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	f383 8810 	msr	PRIMASK, r3
}
 8013aae:	bf00      	nop
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 8013ab0:	2300      	movs	r3, #0
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3720      	adds	r7, #32
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	bf00      	nop
 8013abc:	20003f18 	.word	0x20003f18

08013ac0 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b084      	sub	sp, #16
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
 8013ac8:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	3330      	adds	r3, #48	; 0x30
 8013ace:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 8013ad0:	6839      	ldr	r1, [r7, #0]
 8013ad2:	68f8      	ldr	r0, [r7, #12]
 8013ad4:	f7ff ffba 	bl	8013a4c <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8013ad8:	2300      	movs	r3, #0
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	3710      	adds	r7, #16
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}
	...

08013ae4 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b08e      	sub	sp, #56	; 0x38
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	60f8      	str	r0, [r7, #12]
 8013aec:	60b9      	str	r1, [r7, #8]
 8013aee:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013af4:	2b01      	cmp	r3, #1
 8013af6:	d101      	bne.n	8013afc <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 8013af8:	2300      	movs	r3, #0
 8013afa:	e077      	b.n	8013bec <_ux_device_stack_transfer_request+0x108>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013afc:	f3ef 8310 	mrs	r3, PRIMASK
 8013b00:	623b      	str	r3, [r7, #32]
    return(posture);
 8013b02:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013b04:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b06:	b672      	cpsid	i
    return(int_posture);
 8013b08:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 8013b0a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 8013b0c:	4b39      	ldr	r3, [pc, #228]	; (8013bf4 <_ux_device_stack_transfer_request+0x110>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	6a1b      	ldr	r3, [r3, #32]
 8013b12:	633b      	str	r3, [r7, #48]	; 0x30

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 8013b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b16:	2b01      	cmp	r3, #1
 8013b18:	d005      	beq.n	8013b26 <_ux_device_stack_transfer_request+0x42>
 8013b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b1c:	2b02      	cmp	r3, #2
 8013b1e:	d002      	beq.n	8013b26 <_ux_device_stack_transfer_request+0x42>
            || (device_state == UX_DEVICE_CONFIGURED))
 8013b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b22:	2b03      	cmp	r3, #3
 8013b24:	d115      	bne.n	8013b52 <_ux_device_stack_transfer_request+0x6e>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2201      	movs	r2, #1
 8013b2a:	601a      	str	r2, [r3, #0]
 8013b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b2e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b30:	69bb      	ldr	r3, [r7, #24]
 8013b32:	f383 8810 	msr	PRIMASK, r3
}
 8013b36:	bf00      	nop
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013b38:	4b2e      	ldr	r3, [pc, #184]	; (8013bf4 <_ux_device_stack_transfer_request+0x110>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	689b      	ldr	r3, [r3, #8]
 8013b42:	62bb      	str	r3, [r7, #40]	; 0x28
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8013b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b46:	699b      	ldr	r3, [r3, #24]
 8013b48:	f003 0303 	and.w	r3, r3, #3
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d10b      	bne.n	8013b68 <_ux_device_stack_transfer_request+0x84>
 8013b50:	e01b      	b.n	8013b8a <_ux_device_stack_transfer_request+0xa6>
 8013b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b54:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	f383 8810 	msr	PRIMASK, r3
}
 8013b5c:	bf00      	nop
        return(UX_TRANSFER_NOT_READY);
 8013b5e:	2325      	movs	r3, #37	; 0x25
 8013b60:	e044      	b.n	8013bec <_ux_device_stack_transfer_request+0x108>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 8013b62:	2064      	movs	r0, #100	; 0x64
 8013b64:	f000 f91c 	bl	8013da0 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8013b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	2b02      	cmp	r3, #2
 8013b6e:	d0f8      	beq.n	8013b62 <_ux_device_stack_transfer_request+0x7e>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 8013b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b72:	695b      	ldr	r3, [r3, #20]
 8013b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d003      	beq.n	8013b84 <_ux_device_stack_transfer_request+0xa0>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	2203      	movs	r2, #3
 8013b80:	629a      	str	r2, [r3, #40]	; 0x28
 8013b82:	e002      	b.n	8013b8a <_ux_device_stack_transfer_request+0xa6>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	2202      	movs	r2, #2
 8013b88:	629a      	str	r2, [r3, #40]	; 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b8e:	2b03      	cmp	r3, #3
 8013b90:	d114      	bne.n	8013bbc <_ux_device_stack_transfer_request+0xd8>
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d011      	beq.n	8013bbc <_ux_device_stack_transfer_request+0xd8>
        (slave_length != 0) && (host_length != slave_length) && 
 8013b98:	687a      	ldr	r2, [r7, #4]
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d00d      	beq.n	8013bbc <_ux_device_stack_transfer_request+0xd8>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 8013ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba2:	69da      	ldr	r2, [r3, #28]
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	fbb3 f1f2 	udiv	r1, r3, r2
 8013baa:	fb01 f202 	mul.w	r2, r1, r2
 8013bae:	1a9b      	subs	r3, r3, r2
        (slave_length != 0) && (host_length != slave_length) && 
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d103      	bne.n	8013bbc <_ux_device_stack_transfer_request+0xd8>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2201      	movs	r2, #1
 8013bb8:	651a      	str	r2, [r3, #80]	; 0x50
 8013bba:	e002      	b.n	8013bc2 <_ux_device_stack_transfer_request+0xde>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	68ba      	ldr	r2, [r7, #8]
 8013bcc:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	68ba      	ldr	r2, [r7, #8]
 8013bd2:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 8013bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bde:	699b      	ldr	r3, [r3, #24]
 8013be0:	68fa      	ldr	r2, [r7, #12]
 8013be2:	210c      	movs	r1, #12
 8013be4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013be6:	4798      	blx	r3
 8013be8:	6278      	str	r0, [r7, #36]	; 0x24

    /* And return the status.  */
    return(status);
 8013bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

#endif
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3738      	adds	r7, #56	; 0x38
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	20003f18 	.word	0x20003f18

08013bf8 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b084      	sub	sp, #16
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	60f8      	str	r0, [r7, #12]
 8013c00:	60b9      	str	r1, [r7, #8]
 8013c02:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 8013c04:	4b0c      	ldr	r3, [pc, #48]	; (8013c38 <_ux_system_error_handler+0x40>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	687a      	ldr	r2, [r7, #4]
 8013c0a:	651a      	str	r2, [r3, #80]	; 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8013c0c:	4b0a      	ldr	r3, [pc, #40]	; (8013c38 <_ux_system_error_handler+0x40>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013c12:	3201      	adds	r2, #1
 8013c14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 8013c16:	4b08      	ldr	r3, [pc, #32]	; (8013c38 <_ux_system_error_handler+0x40>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d006      	beq.n	8013c2e <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 8013c20:	4b05      	ldr	r3, [pc, #20]	; (8013c38 <_ux_system_error_handler+0x40>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c26:	687a      	ldr	r2, [r7, #4]
 8013c28:	68b9      	ldr	r1, [r7, #8]
 8013c2a:	68f8      	ldr	r0, [r7, #12]
 8013c2c:	4798      	blx	r3
    }
}
 8013c2e:	bf00      	nop
 8013c30:	3710      	adds	r7, #16
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}
 8013c36:	bf00      	nop
 8013c38:	20003f1c 	.word	0x20003f1c

08013c3c <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b08a      	sub	sp, #40	; 0x28
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	60f8      	str	r0, [r7, #12]
 8013c44:	60b9      	str	r1, [r7, #8]
 8013c46:	607a      	str	r2, [r7, #4]
 8013c48:	603b      	str	r3, [r7, #0]
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 8013c4a:	68ba      	ldr	r2, [r7, #8]
 8013c4c:	2100      	movs	r1, #0
 8013c4e:	68f8      	ldr	r0, [r7, #12]
 8013c50:	f000 fb68 	bl	8014324 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8013c54:	4a4f      	ldr	r2, [pc, #316]	; (8013d94 <_ux_system_initialize+0x158>)
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 8013c5a:	235c      	movs	r3, #92	; 0x5c
 8013c5c:	627b      	str	r3, [r7, #36]	; 0x24
#endif 

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8013c5e:	68fa      	ldr	r2, [r7, #12]
 8013c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c62:	4413      	add	r3, r2
 8013c64:	4a4c      	ldr	r2, [pc, #304]	; (8013d98 <_ux_system_initialize+0x15c>)
 8013c66:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 8013c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8013c6e:	627b      	str	r3, [r7, #36]	; 0x24
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 8013c70:	4b48      	ldr	r3, [pc, #288]	; (8013d94 <_ux_system_initialize+0x158>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	68f9      	ldr	r1, [r7, #12]
 8013c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c78:	440a      	add	r2, r1
 8013c7a:	601a      	str	r2, [r3, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 8013c7c:	4b45      	ldr	r3, [pc, #276]	; (8013d94 <_ux_system_initialize+0x158>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	623b      	str	r3, [r7, #32]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 8013c84:	6a3b      	ldr	r3, [r7, #32]
 8013c86:	330f      	adds	r3, #15
 8013c88:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8013c8a:	6a3b      	ldr	r3, [r7, #32]
 8013c8c:	f023 030f 	bic.w	r3, r3, #15
 8013c90:	623b      	str	r3, [r7, #32]
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 8013c92:	68fa      	ldr	r2, [r7, #12]
 8013c94:	68bb      	ldr	r3, [r7, #8]
 8013c96:	4413      	add	r3, r2
 8013c98:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8013c9a:	69fb      	ldr	r3, [r7, #28]
 8013c9c:	6a3a      	ldr	r2, [r7, #32]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d301      	bcc.n	8013ca6 <_ux_system_initialize+0x6a>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 8013ca2:	2312      	movs	r3, #18
 8013ca4:	e071      	b.n	8013d8a <_ux_system_initialize+0x14e>
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 8013ca6:	69f9      	ldr	r1, [r7, #28]
 8013ca8:	4b3a      	ldr	r3, [pc, #232]	; (8013d94 <_ux_system_initialize+0x158>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	6a3a      	ldr	r2, [r7, #32]
 8013cae:	1a8a      	subs	r2, r1, r2
 8013cb0:	605a      	str	r2, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 8013cb2:	4b38      	ldr	r3, [pc, #224]	; (8013d94 <_ux_system_initialize+0x158>)
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	4b37      	ldr	r3, [pc, #220]	; (8013d94 <_ux_system_initialize+0x158>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	6852      	ldr	r2, [r2, #4]
 8013cbc:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 8013cbe:	4b35      	ldr	r3, [pc, #212]	; (8013d94 <_ux_system_initialize+0x158>)
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	6a3a      	ldr	r2, [r7, #32]
 8013cc4:	601a      	str	r2, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 8013cc6:	4b33      	ldr	r3, [pc, #204]	; (8013d94 <_ux_system_initialize+0x158>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	61bb      	str	r3, [r7, #24]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013cce:	4b31      	ldr	r3, [pc, #196]	; (8013d94 <_ux_system_initialize+0x158>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	685b      	ldr	r3, [r3, #4]
 8013cd4:	f1a3 0210 	sub.w	r2, r3, #16
 8013cd8:	69bb      	ldr	r3, [r7, #24]
 8013cda:	601a      	str	r2, [r3, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8013cdc:	69bb      	ldr	r3, [r7, #24]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	605a      	str	r2, [r3, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d112      	bne.n	8013d0e <_ux_system_initialize+0xd2>
    {

        /* Cache safe memory is the same as regular memory.  */
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 8013ce8:	4b2a      	ldr	r3, [pc, #168]	; (8013d94 <_ux_system_initialize+0x158>)
 8013cea:	681a      	ldr	r2, [r3, #0]
 8013cec:	4b29      	ldr	r3, [pc, #164]	; (8013d94 <_ux_system_initialize+0x158>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	6852      	ldr	r2, [r2, #4]
 8013cf2:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 8013cf4:	4b27      	ldr	r3, [pc, #156]	; (8013d94 <_ux_system_initialize+0x158>)
 8013cf6:	681a      	ldr	r2, [r3, #0]
 8013cf8:	4b26      	ldr	r3, [pc, #152]	; (8013d94 <_ux_system_initialize+0x158>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	6892      	ldr	r2, [r2, #8]
 8013cfe:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 8013d00:	4b24      	ldr	r3, [pc, #144]	; (8013d94 <_ux_system_initialize+0x158>)
 8013d02:	681a      	ldr	r2, [r3, #0]
 8013d04:	4b23      	ldr	r3, [pc, #140]	; (8013d94 <_ux_system_initialize+0x158>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	6812      	ldr	r2, [r2, #0]
 8013d0a:	60da      	str	r2, [r3, #12]
 8013d0c:	e02f      	b.n	8013d6e <_ux_system_initialize+0x132>
    }
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 8013d12:	6a3b      	ldr	r3, [r7, #32]
 8013d14:	330f      	adds	r3, #15
 8013d16:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8013d18:	6a3b      	ldr	r3, [r7, #32]
 8013d1a:	f023 030f 	bic.w	r3, r3, #15
 8013d1e:	623b      	str	r3, [r7, #32]
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 8013d20:	4b1c      	ldr	r3, [pc, #112]	; (8013d94 <_ux_system_initialize+0x158>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	683a      	ldr	r2, [r7, #0]
 8013d26:	3a0f      	subs	r2, #15
 8013d28:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 8013d2a:	4b1a      	ldr	r3, [pc, #104]	; (8013d94 <_ux_system_initialize+0x158>)
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	4b19      	ldr	r3, [pc, #100]	; (8013d94 <_ux_system_initialize+0x158>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	6912      	ldr	r2, [r2, #16]
 8013d34:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 8013d36:	4b17      	ldr	r3, [pc, #92]	; (8013d94 <_ux_system_initialize+0x158>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	6a3a      	ldr	r2, [r7, #32]
 8013d3c:	60da      	str	r2, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 8013d3e:	4b15      	ldr	r3, [pc, #84]	; (8013d94 <_ux_system_initialize+0x158>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	68d8      	ldr	r0, [r3, #12]
 8013d44:	4b13      	ldr	r3, [pc, #76]	; (8013d94 <_ux_system_initialize+0x158>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	691b      	ldr	r3, [r3, #16]
 8013d4a:	461a      	mov	r2, r3
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	f000 fae9 	bl	8014324 <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 8013d52:	4b10      	ldr	r3, [pc, #64]	; (8013d94 <_ux_system_initialize+0x158>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	68db      	ldr	r3, [r3, #12]
 8013d58:	61bb      	str	r3, [r7, #24]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013d5a:	4b0e      	ldr	r3, [pc, #56]	; (8013d94 <_ux_system_initialize+0x158>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	691b      	ldr	r3, [r3, #16]
 8013d60:	f1a3 0210 	sub.w	r2, r3, #16
 8013d64:	69bb      	ldr	r3, [r7, #24]
 8013d66:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8013d68:	69bb      	ldr	r3, [r7, #24]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 8013d6e:	4b09      	ldr	r3, [pc, #36]	; (8013d94 <_ux_system_initialize+0x158>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	331c      	adds	r3, #28
 8013d74:	4909      	ldr	r1, [pc, #36]	; (8013d9c <_ux_system_initialize+0x160>)
 8013d76:	4618      	mov	r0, r3
 8013d78:	f000 faee 	bl	8014358 <_ux_utility_mutex_create>
 8013d7c:	6178      	str	r0, [r7, #20]
    if(status != UX_SUCCESS)
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d001      	beq.n	8013d88 <_ux_system_initialize+0x14c>
        return(UX_MUTEX_ERROR);
 8013d84:	2317      	movs	r3, #23
 8013d86:	e000      	b.n	8013d8a <_ux_system_initialize+0x14e>
#endif

    return(UX_SUCCESS);
 8013d88:	2300      	movs	r3, #0
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3728      	adds	r7, #40	; 0x28
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	20003f1c 	.word	0x20003f1c
 8013d98:	20003f18 	.word	0x20003f18
 8013d9c:	08016e08 	.word	0x08016e08

08013da0 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b084      	sub	sp, #16
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2264      	movs	r2, #100	; 0x64
 8013dac:	fb02 f303 	mul.w	r3, r2, r3
 8013db0:	4a07      	ldr	r2, [pc, #28]	; (8013dd0 <_ux_utility_delay_ms+0x30>)
 8013db2:	fba2 2303 	umull	r2, r3, r2, r3
 8013db6:	099b      	lsrs	r3, r3, #6
 8013db8:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 8013dc0:	68f8      	ldr	r0, [r7, #12]
 8013dc2:	f7fc fd95 	bl	80108f0 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 8013dc6:	bf00      	nop
}
 8013dc8:	3710      	adds	r7, #16
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	10624dd3 	.word	0x10624dd3

08013dd4 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b084      	sub	sp, #16
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	607a      	str	r2, [r7, #4]
 8013de0:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 8013de2:	e026      	b.n	8013e32 <_ux_utility_descriptor_parse+0x5e>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	1c5a      	adds	r2, r3, #1
 8013de8:	60ba      	str	r2, [r7, #8]
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	2b02      	cmp	r3, #2
 8013dee:	d00b      	beq.n	8013e08 <_ux_utility_descriptor_parse+0x34>
 8013df0:	2b04      	cmp	r3, #4
 8013df2:	d113      	bne.n	8013e1c <_ux_utility_descriptor_parse+0x48>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 8013df4:	68f8      	ldr	r0, [r7, #12]
 8013df6:	f000 f825 	bl	8013e44 <_ux_utility_long_get>
 8013dfa:	4602      	mov	r2, r0
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	3304      	adds	r3, #4
 8013e04:	60fb      	str	r3, [r7, #12]
            break;                   
 8013e06:	e011      	b.n	8013e2c <_ux_utility_descriptor_parse+0x58>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 8013e08:	68f8      	ldr	r0, [r7, #12]
 8013e0a:	f000 fb5a 	bl	80144c2 <_ux_utility_short_get>
 8013e0e:	4602      	mov	r2, r0
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	3302      	adds	r3, #2
 8013e18:	60fb      	str	r3, [r7, #12]
            break;                   
 8013e1a:	e007      	b.n	8013e2c <_ux_utility_descriptor_parse+0x58>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	781b      	ldrb	r3, [r3, #0]
 8013e20:	461a      	mov	r2, r3
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	3301      	adds	r3, #1
 8013e2a:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	3304      	adds	r3, #4
 8013e30:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	1e5a      	subs	r2, r3, #1
 8013e36:	607a      	str	r2, [r7, #4]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d1d3      	bne.n	8013de4 <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 8013e3c:	bf00      	nop
}
 8013e3e:	3710      	adds	r7, #16
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 8013e44:	b480      	push	{r7}
 8013e46:	b085      	sub	sp, #20
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	1c5a      	adds	r2, r3, #1
 8013e50:	607a      	str	r2, [r7, #4]
 8013e52:	781b      	ldrb	r3, [r3, #0]
 8013e54:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	1c5a      	adds	r2, r3, #1
 8013e5a:	607a      	str	r2, [r7, #4]
 8013e5c:	781b      	ldrb	r3, [r3, #0]
 8013e5e:	021b      	lsls	r3, r3, #8
 8013e60:	68fa      	ldr	r2, [r7, #12]
 8013e62:	4313      	orrs	r3, r2
 8013e64:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	1c5a      	adds	r2, r3, #1
 8013e6a:	607a      	str	r2, [r7, #4]
 8013e6c:	781b      	ldrb	r3, [r3, #0]
 8013e6e:	041b      	lsls	r3, r3, #16
 8013e70:	68fa      	ldr	r2, [r7, #12]
 8013e72:	4313      	orrs	r3, r2
 8013e74:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	781b      	ldrb	r3, [r3, #0]
 8013e7a:	061b      	lsls	r3, r3, #24
 8013e7c:	68fa      	ldr	r2, [r7, #12]
 8013e7e:	4313      	orrs	r3, r2
 8013e80:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 8013e82:	68fb      	ldr	r3, [r7, #12]
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3714      	adds	r7, #20
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8e:	4770      	bx	lr

08013e90 <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 8013e90:	b480      	push	{r7}
 8013e92:	b083      	sub	sp, #12
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	1c5a      	adds	r2, r3, #1
 8013e9e:	607a      	str	r2, [r7, #4]
 8013ea0:	683a      	ldr	r2, [r7, #0]
 8013ea2:	b2d2      	uxtb	r2, r2
 8013ea4:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	0a19      	lsrs	r1, r3, #8
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	1c5a      	adds	r2, r3, #1
 8013eae:	607a      	str	r2, [r7, #4]
 8013eb0:	b2ca      	uxtb	r2, r1
 8013eb2:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	0c19      	lsrs	r1, r3, #16
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	1c5a      	adds	r2, r3, #1
 8013ebc:	607a      	str	r2, [r7, #4]
 8013ebe:	b2ca      	uxtb	r2, r1
 8013ec0:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	0e1b      	lsrs	r3, r3, #24
 8013ec6:	b2da      	uxtb	r2, r3
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 8013ecc:	bf00      	nop
}
 8013ece:	370c      	adds	r7, #12
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed6:	4770      	bx	lr

08013ed8 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b08c      	sub	sp, #48	; 0x30
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	60f8      	str	r0, [r7, #12]
 8013ee0:	60b9      	str	r1, [r7, #8]
 8013ee2:	607a      	str	r2, [r7, #4]
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 8013ee4:	4b7d      	ldr	r3, [pc, #500]	; (80140dc <_ux_utility_memory_allocate+0x204>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	331c      	adds	r3, #28
 8013eea:	4618      	mov	r0, r3
 8013eec:	f000 fa65 	bl	80143ba <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ef6:	d101      	bne.n	8013efc <_ux_utility_memory_allocate+0x24>
        memory_alignment = UX_NO_ALIGN;
 8013ef8:	2300      	movs	r3, #0
 8013efa:	60fb      	str	r3, [r7, #12]
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	2b0e      	cmp	r3, #14
 8013f00:	d801      	bhi.n	8013f06 <_ux_utility_memory_allocate+0x2e>
        memory_alignment =  UX_ALIGN_MIN;
 8013f02:	230f      	movs	r3, #15
 8013f04:	60fb      	str	r3, [r7, #12]

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	627b      	str	r3, [r7, #36]	; 0x24
    memory_alignment++;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	3301      	adds	r3, #1
 8013f0e:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	330f      	adds	r3, #15
 8013f14:	f023 030f 	bic.w	r3, r3, #15
 8013f18:	607b      	str	r3, [r7, #4]
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8013f1a:	687a      	ldr	r2, [r7, #4]
 8013f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1e:	4413      	add	r3, r2
 8013f20:	3310      	adds	r3, #16
 8013f22:	4619      	mov	r1, r3
 8013f24:	68b8      	ldr	r0, [r7, #8]
 8013f26:	f000 f9bb 	bl	80142a0 <_ux_utility_memory_free_block_best_get>
 8013f2a:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 8013f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d10c      	bne.n	8013f4c <_ux_utility_memory_allocate+0x74>
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8013f32:	4b6a      	ldr	r3, [pc, #424]	; (80140dc <_ux_utility_memory_allocate+0x204>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	331c      	adds	r3, #28
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f000 fa33 	bl	80143a4 <_ux_utility_mutex_off>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8013f3e:	2212      	movs	r2, #18
 8013f40:	2108      	movs	r1, #8
 8013f42:	2002      	movs	r0, #2
 8013f44:	f7ff fe58 	bl	8013bf8 <_ux_system_error_handler>

        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
 8013f48:	2300      	movs	r3, #0
 8013f4a:	e0c3      	b.n	80140d4 <_ux_utility_memory_allocate+0x1fc>
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8013f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4e:	3310      	adds	r3, #16
 8013f50:	623b      	str	r3, [r7, #32]

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	1e5a      	subs	r2, r3, #1
 8013f56:	6a3b      	ldr	r3, [r7, #32]
 8013f58:	4013      	ands	r3, r2
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d126      	bne.n	8013fac <_ux_utility_memory_allocate+0xd4>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	3310      	adds	r3, #16
 8013f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f64:	4413      	add	r3, r2
 8013f66:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8013f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f6a:	689a      	ldr	r2, [r3, #8]
 8013f6c:	69fb      	ldr	r3, [r7, #28]
 8013f6e:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8013f70:	69fb      	ldr	r3, [r7, #28]
 8013f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f74:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f78:	681a      	ldr	r2, [r3, #0]
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	1ad3      	subs	r3, r2, r3
 8013f7e:	f1a3 0210 	sub.w	r2, r3, #16
 8013f82:	69fb      	ldr	r3, [r7, #28]
 8013f84:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8013f86:	69fb      	ldr	r3, [r7, #28]
 8013f88:	2200      	movs	r2, #0
 8013f8a:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 8013f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f8e:	687a      	ldr	r2, [r7, #4]
 8013f90:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8013f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f94:	69fa      	ldr	r2, [r7, #28]
 8013f96:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa0:	605a      	str	r2, [r3, #4]

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	3310      	adds	r3, #16
 8013fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8013faa:	e05e      	b.n	801406a <_ux_utility_memory_allocate+0x192>
    {

        /* Align the buffer. The first thing we do is increment by the size of a
           memory block because we have to make sure we have enough memory for at
           least that.  */
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013fac:	6a3b      	ldr	r3, [r7, #32]
 8013fae:	3310      	adds	r3, #16
 8013fb0:	623b      	str	r3, [r7, #32]
        int_memory_buffer +=  memory_alignment - 1;
 8013fb2:	68fa      	ldr	r2, [r7, #12]
 8013fb4:	6a3b      	ldr	r3, [r7, #32]
 8013fb6:	4413      	add	r3, r2
 8013fb8:	3b01      	subs	r3, #1
 8013fba:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	425b      	negs	r3, r3
 8013fc0:	6a3a      	ldr	r2, [r7, #32]
 8013fc2:	4013      	ands	r3, r2
 8013fc4:	623b      	str	r3, [r7, #32]

        /* Setup the new memory block. Note that its size is updated again later.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 8013fc6:	6a3b      	ldr	r3, [r7, #32]
 8013fc8:	3b10      	subs	r3, #16
 8013fca:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8013fcc:	69fb      	ldr	r3, [r7, #28]
 8013fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013fd0:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8013fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd4:	689a      	ldr	r2, [r3, #8]
 8013fd6:	69fb      	ldr	r3, [r7, #28]
 8013fd8:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 8013fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fdc:	681a      	ldr	r2, [r3, #0]
 8013fde:	69fb      	ldr	r3, [r7, #28]
 8013fe0:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 8013fe2:	68bb      	ldr	r3, [r7, #8]
 8013fe4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013fe8:	69fb      	ldr	r3, [r7, #28]
 8013fea:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8013fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fee:	3310      	adds	r3, #16
 8013ff0:	623b      	str	r3, [r7, #32]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8013ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff4:	69fa      	ldr	r2, [r7, #28]
 8013ff6:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 8013ff8:	69fa      	ldr	r2, [r7, #28]
 8013ffa:	6a3b      	ldr	r3, [r7, #32]
 8013ffc:	1ad2      	subs	r2, r2, r3
 8013ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014000:	601a      	str	r2, [r3, #0]

        /* Update the new memory block's size.  */
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8014002:	69fb      	ldr	r3, [r7, #28]
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	1ad3      	subs	r3, r2, r3
 801400c:	f1a3 0210 	sub.w	r2, r3, #16
 8014010:	69fb      	ldr	r3, [r7, #28]
 8014012:	601a      	str	r2, [r3, #0]

        /* Calculate how much memory is leftover in the new memory block after doing
           the alignment.  */
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 8014014:	69fb      	ldr	r3, [r7, #28]
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	1ad3      	subs	r3, r2, r3
 801401c:	61bb      	str	r3, [r7, #24]

        /* Can we fit another block after the new block? */
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 801401e:	69bb      	ldr	r3, [r7, #24]
 8014020:	2b10      	cmp	r3, #16
 8014022:	d91c      	bls.n	801405e <_ux_utility_memory_allocate+0x186>
        {

            /* Setup the leftover memory block.  */
            leftover_memory_block = (UX_MEMORY_BLOCK *) (((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested) & 0xFFFFFFFFu);
 8014024:	69fa      	ldr	r2, [r7, #28]
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	4413      	add	r3, r2
 801402a:	3310      	adds	r3, #16
 801402c:	617b      	str	r3, [r7, #20]
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 801402e:	69fb      	ldr	r3, [r7, #28]
 8014030:	689a      	ldr	r2, [r3, #8]
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	609a      	str	r2, [r3, #8]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	69fa      	ldr	r2, [r7, #28]
 801403a:	60da      	str	r2, [r3, #12]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 801403c:	69bb      	ldr	r3, [r7, #24]
 801403e:	f1a3 0210 	sub.w	r2, r3, #16
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	601a      	str	r2, [r3, #0]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	2200      	movs	r2, #0
 801404a:	605a      	str	r2, [r3, #4]

            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 801404c:	69fb      	ldr	r3, [r7, #28]
 801404e:	697a      	ldr	r2, [r7, #20]
 8014050:	609a      	str	r2, [r3, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 8014052:	69fb      	ldr	r3, [r7, #28]
 8014054:	681a      	ldr	r2, [r3, #0]
 8014056:	69bb      	ldr	r3, [r7, #24]
 8014058:	1ad2      	subs	r2, r2, r3
 801405a:	69fb      	ldr	r3, [r7, #28]
 801405c:	601a      	str	r2, [r3, #0]
        }

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 801405e:	69fb      	ldr	r3, [r7, #28]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	3310      	adds	r3, #16
 8014064:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
 8014066:	69fb      	ldr	r3, [r7, #28]
 8014068:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 801406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801406c:	3310      	adds	r3, #16
 801406e:	613b      	str	r3, [r7, #16]

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 8014070:	687a      	ldr	r2, [r7, #4]
 8014072:	2100      	movs	r1, #0
 8014074:	6938      	ldr	r0, [r7, #16]
 8014076:	f000 f955 	bl	8014324 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 801407a:	4b18      	ldr	r3, [pc, #96]	; (80140dc <_ux_utility_memory_allocate+0x204>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	68da      	ldr	r2, [r3, #12]
 8014080:	4b16      	ldr	r3, [pc, #88]	; (80140dc <_ux_utility_memory_allocate+0x204>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	429a      	cmp	r2, r3
 8014088:	d108      	bne.n	801409c <_ux_utility_memory_allocate+0x1c4>
    {

        /* There is only one memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 801408a:	4b14      	ldr	r3, [pc, #80]	; (80140dc <_ux_utility_memory_allocate+0x204>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	6899      	ldr	r1, [r3, #8]
 8014090:	4b12      	ldr	r3, [pc, #72]	; (80140dc <_ux_utility_memory_allocate+0x204>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014096:	1a8a      	subs	r2, r1, r2
 8014098:	609a      	str	r2, [r3, #8]
 801409a:	e014      	b.n	80140c6 <_ux_utility_memory_allocate+0x1ee>
    }
    else
    {

       switch (memory_cache_flag)
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	2b01      	cmp	r3, #1
 80140a0:	d108      	bne.n	80140b4 <_ux_utility_memory_allocate+0x1dc>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 80140a2:	4b0e      	ldr	r3, [pc, #56]	; (80140dc <_ux_utility_memory_allocate+0x204>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	6959      	ldr	r1, [r3, #20]
 80140a8:	4b0c      	ldr	r3, [pc, #48]	; (80140dc <_ux_utility_memory_allocate+0x204>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140ae:	1a8a      	subs	r2, r1, r2
 80140b0:	615a      	str	r2, [r3, #20]

            break;
 80140b2:	e008      	b.n	80140c6 <_ux_utility_memory_allocate+0x1ee>

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 80140b4:	4b09      	ldr	r3, [pc, #36]	; (80140dc <_ux_utility_memory_allocate+0x204>)
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	6899      	ldr	r1, [r3, #8]
 80140ba:	4b08      	ldr	r3, [pc, #32]	; (80140dc <_ux_utility_memory_allocate+0x204>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140c0:	1a8a      	subs	r2, r1, r2
 80140c2:	609a      	str	r2, [r3, #8]
            break;
 80140c4:	bf00      	nop
        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;

#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 80140c6:	4b05      	ldr	r3, [pc, #20]	; (80140dc <_ux_utility_memory_allocate+0x204>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	331c      	adds	r3, #28
 80140cc:	4618      	mov	r0, r3
 80140ce:	f000 f969 	bl	80143a4 <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
 80140d2:	693b      	ldr	r3, [r7, #16]
}                                
 80140d4:	4618      	mov	r0, r3
 80140d6:	3730      	adds	r7, #48	; 0x30
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	20003f1c 	.word	0x20003f1c

080140e0 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b084      	sub	sp, #16
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	60f8      	str	r0, [r7, #12]
 80140e8:	60b9      	str	r1, [r7, #8]
 80140ea:	607a      	str	r2, [r7, #4]
 80140ec:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d00a      	beq.n	801410a <_ux_utility_memory_allocate_mulc_safe+0x2a>
 80140f4:	2100      	movs	r1, #0
 80140f6:	687a      	ldr	r2, [r7, #4]
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	fba3 2302 	umull	r2, r3, r3, r2
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d000      	beq.n	8014104 <_ux_utility_memory_allocate_mulc_safe+0x24>
 8014102:	2101      	movs	r1, #1
 8014104:	460b      	mov	r3, r1
 8014106:	2b00      	cmp	r3, #0
 8014108:	d10a      	bne.n	8014120 <_ux_utility_memory_allocate_mulc_safe+0x40>
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	683a      	ldr	r2, [r7, #0]
 801410e:	fb02 f303 	mul.w	r3, r2, r3
 8014112:	461a      	mov	r2, r3
 8014114:	68b9      	ldr	r1, [r7, #8]
 8014116:	68f8      	ldr	r0, [r7, #12]
 8014118:	f7ff fede 	bl	8013ed8 <_ux_utility_memory_allocate>
 801411c:	4603      	mov	r3, r0
 801411e:	e000      	b.n	8014122 <_ux_utility_memory_allocate_mulc_safe+0x42>
 8014120:	2300      	movs	r3, #0
}
 8014122:	4618      	mov	r0, r3
 8014124:	3710      	adds	r7, #16
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}

0801412a <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 801412a:	b480      	push	{r7}
 801412c:	b087      	sub	sp, #28
 801412e:	af00      	add	r7, sp, #0
 8014130:	60f8      	str	r0, [r7, #12]
 8014132:	60b9      	str	r1, [r7, #8]
 8014134:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 801413e:	e007      	b.n	8014150 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 8014140:	697a      	ldr	r2, [r7, #20]
 8014142:	1c53      	adds	r3, r2, #1
 8014144:	617b      	str	r3, [r7, #20]
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	1c59      	adds	r1, r3, #1
 801414a:	6139      	str	r1, [r7, #16]
 801414c:	7812      	ldrb	r2, [r2, #0]
 801414e:	701a      	strb	r2, [r3, #0]
    while(length--)
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	1e5a      	subs	r2, r3, #1
 8014154:	607a      	str	r2, [r7, #4]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d1f2      	bne.n	8014140 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 801415a:	bf00      	nop
}
 801415c:	371c      	adds	r7, #28
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr
	...

08014168 <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b086      	sub	sp, #24
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
UCHAR               *regular_start, *regular_end;
UCHAR               *cache_safe_start, *cache_safe_end;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 8014170:	4b49      	ldr	r3, [pc, #292]	; (8014298 <_ux_utility_memory_free+0x130>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	331c      	adds	r3, #28
 8014176:	4618      	mov	r0, r3
 8014178:	f000 f91f 	bl	80143ba <_ux_utility_mutex_on>
    }
#endif

    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	3b10      	subs	r3, #16
 8014180:	617b      	str	r3, [r7, #20]
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8014182:	697b      	ldr	r3, [r7, #20]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	3310      	adds	r3, #16
 8014188:	60fb      	str	r3, [r7, #12]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014192:	d010      	beq.n	80141b6 <_ux_utility_memory_free+0x4e>
        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))
 8014194:	697b      	ldr	r3, [r7, #20]
 8014196:	685b      	ldr	r3, [r3, #4]
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 8014198:	4a40      	ldr	r2, [pc, #256]	; (801429c <_ux_utility_memory_free+0x134>)
 801419a:	4293      	cmp	r3, r2
 801419c:	d00b      	beq.n	80141b6 <_ux_utility_memory_free+0x4e>
    {

        /* Not valid. Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 801419e:	4b3e      	ldr	r3, [pc, #248]	; (8014298 <_ux_utility_memory_free+0x130>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	331c      	adds	r3, #28
 80141a4:	4618      	mov	r0, r3
 80141a6:	f000 f8fd 	bl	80143a4 <_ux_utility_mutex_off>

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 80141aa:	2219      	movs	r2, #25
 80141ac:	2108      	movs	r1, #8
 80141ae:	2002      	movs	r0, #2
 80141b0:	f7ff fd22 	bl	8013bf8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return to caller.  */
        return;
 80141b4:	e06c      	b.n	8014290 <_ux_utility_memory_free+0x128>
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	2200      	movs	r2, #0
 80141ba:	605a      	str	r2, [r3, #4]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 80141bc:	e007      	b.n	80141ce <_ux_utility_memory_free+0x66>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	68db      	ldr	r3, [r3, #12]
 80141c2:	685b      	ldr	r3, [r3, #4]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d107      	bne.n	80141d8 <_ux_utility_memory_free+0x70>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	617b      	str	r3, [r7, #20]
     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	68db      	ldr	r3, [r3, #12]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d1f3      	bne.n	80141be <_ux_utility_memory_free+0x56>
 80141d6:	e000      	b.n	80141da <_ux_utility_memory_free+0x72>

        else

            /* The previous memory block is not free.  */
            break;
 80141d8:	bf00      	nop
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 80141da:	697b      	ldr	r3, [r7, #20]
 80141dc:	689b      	ldr	r3, [r3, #8]
 80141de:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 80141e0:	e01a      	b.n	8014218 <_ux_utility_memory_free+0xb0>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 80141e2:	693b      	ldr	r3, [r7, #16]
 80141e4:	685b      	ldr	r3, [r3, #4]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d006      	beq.n	80141f8 <_ux_utility_memory_free+0x90>
        {

            /* Yes, move to next block.  */
            memory_block -> ux_memory_block_next =  next_block;
 80141ea:	697b      	ldr	r3, [r7, #20]
 80141ec:	693a      	ldr	r2, [r7, #16]
 80141ee:	609a      	str	r2, [r3, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	697a      	ldr	r2, [r7, #20]
 80141f4:	60da      	str	r2, [r3, #12]
            break;
 80141f6:	e012      	b.n	801421e <_ux_utility_memory_free+0xb6>
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 80141f8:	693b      	ldr	r3, [r7, #16]
 80141fa:	689a      	ldr	r2, [r3, #8]
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	681a      	ldr	r2, [r3, #0]
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	4413      	add	r3, r2
 801420a:	f103 0210 	add.w	r2, r3, #16
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	601a      	str	r2, [r3, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 8014212:	693b      	ldr	r3, [r7, #16]
 8014214:	689b      	ldr	r3, [r3, #8]
 8014216:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d1e1      	bne.n	80141e2 <_ux_utility_memory_free+0x7a>
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 801421e:	4b1e      	ldr	r3, [pc, #120]	; (8014298 <_ux_utility_memory_free+0x130>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	68da      	ldr	r2, [r3, #12]
 8014224:	4b1c      	ldr	r3, [pc, #112]	; (8014298 <_ux_utility_memory_free+0x130>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	429a      	cmp	r2, r3
 801422c:	d108      	bne.n	8014240 <_ux_utility_memory_free+0xd8>
    {

        /* There is only one regular memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 801422e:	4b1a      	ldr	r3, [pc, #104]	; (8014298 <_ux_utility_memory_free+0x130>)
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	6899      	ldr	r1, [r3, #8]
 8014234:	4b18      	ldr	r3, [pc, #96]	; (8014298 <_ux_utility_memory_free+0x130>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	68fa      	ldr	r2, [r7, #12]
 801423a:	440a      	add	r2, r1
 801423c:	609a      	str	r2, [r3, #8]
 801423e:	e020      	b.n	8014282 <_ux_utility_memory_free+0x11a>
    }
    else
    {

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
 8014240:	4b15      	ldr	r3, [pc, #84]	; (8014298 <_ux_utility_memory_free+0x130>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	60bb      	str	r3, [r7, #8]
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 8014248:	697a      	ldr	r2, [r7, #20]
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	429a      	cmp	r2, r3
 801424e:	d310      	bcc.n	8014272 <_ux_utility_memory_free+0x10a>
 8014250:	4b11      	ldr	r3, [pc, #68]	; (8014298 <_ux_utility_memory_free+0x130>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	68ba      	ldr	r2, [r7, #8]
 8014258:	4413      	add	r3, r2
 801425a:	697a      	ldr	r2, [r7, #20]
 801425c:	429a      	cmp	r2, r3
 801425e:	d208      	bcs.n	8014272 <_ux_utility_memory_free+0x10a>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 8014260:	4b0d      	ldr	r3, [pc, #52]	; (8014298 <_ux_utility_memory_free+0x130>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	6899      	ldr	r1, [r3, #8]
 8014266:	4b0c      	ldr	r3, [pc, #48]	; (8014298 <_ux_utility_memory_free+0x130>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	68fa      	ldr	r2, [r7, #12]
 801426c:	440a      	add	r2, r1
 801426e:	609a      	str	r2, [r3, #8]
 8014270:	e007      	b.n	8014282 <_ux_utility_memory_free+0x11a>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 8014272:	4b09      	ldr	r3, [pc, #36]	; (8014298 <_ux_utility_memory_free+0x130>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	6959      	ldr	r1, [r3, #20]
 8014278:	4b07      	ldr	r3, [pc, #28]	; (8014298 <_ux_utility_memory_free+0x130>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	68fa      	ldr	r2, [r7, #12]
 801427e:	440a      	add	r2, r1
 8014280:	615a      	str	r2, [r3, #20]
        
    }

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8014282:	4b05      	ldr	r3, [pc, #20]	; (8014298 <_ux_utility_memory_free+0x130>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	331c      	adds	r3, #28
 8014288:	4618      	mov	r0, r3
 801428a:	f000 f88b 	bl	80143a4 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 801428e:	bf00      	nop
}
 8014290:	3718      	adds	r7, #24
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}
 8014296:	bf00      	nop
 8014298:	20003f1c 	.word	0x20003f1c
 801429c:	80000001 	.word	0x80000001

080142a0 <_ux_utility_memory_free_block_best_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, 
                                                        ULONG memory_size_requested)
{
 80142a0:	b480      	push	{r7}
 80142a2:	b085      	sub	sp, #20
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	6039      	str	r1, [r7, #0]
UX_MEMORY_BLOCK     *memory_block;
UX_MEMORY_BLOCK     *best_memory_block;
    

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
 80142aa:	2300      	movs	r3, #0
 80142ac:	60bb      	str	r3, [r7, #8]
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d003      	beq.n	80142bc <_ux_utility_memory_free_block_best_get+0x1c>
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b01      	cmp	r3, #1
 80142b8:	d005      	beq.n	80142c6 <_ux_utility_memory_free_block_best_get+0x26>
 80142ba:	e009      	b.n	80142d0 <_ux_utility_memory_free_block_best_get+0x30>
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 80142bc:	4b18      	ldr	r3, [pc, #96]	; (8014320 <_ux_utility_memory_free_block_best_get+0x80>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	60fb      	str	r3, [r7, #12]
            break;
 80142c4:	e006      	b.n	80142d4 <_ux_utility_memory_free_block_best_get+0x34>
            
        case UX_CACHE_SAFE_MEMORY       :

            /* Start at the beginning of the cache safe memory pool.  */
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 80142c6:	4b16      	ldr	r3, [pc, #88]	; (8014320 <_ux_utility_memory_free_block_best_get+0x80>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	60fb      	str	r3, [r7, #12]
            break;
 80142ce:	e001      	b.n	80142d4 <_ux_utility_memory_free_block_best_get+0x34>
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 80142d0:	2300      	movs	r3, #0
 80142d2:	e01e      	b.n	8014312 <_ux_utility_memory_free_block_best_get+0x72>

    }

    /* Loop on all memory blocks from the beginning.  */
    while (memory_block != UX_NULL)
 80142d4:	e019      	b.n	801430a <_ux_utility_memory_free_block_best_get+0x6a>
    {

        /* Check the memory block status.  */
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	685b      	ldr	r3, [r3, #4]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d112      	bne.n	8014304 <_ux_utility_memory_free_block_best_get+0x64>
        {

            /* Check the size of this free block and see if it will 
               fit the memory requirement.  */
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	683a      	ldr	r2, [r7, #0]
 80142e4:	429a      	cmp	r2, r3
 80142e6:	d20d      	bcs.n	8014304 <_ux_utility_memory_free_block_best_get+0x64>
            {
                
                /* This memory block will do. Now see if it is the best.
                   The best memory block is the one whose memory is closest
                   to the memory requested.  */
                if (best_memory_block == UX_NULL)
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d102      	bne.n	80142f4 <_ux_utility_memory_free_block_best_get+0x54>

                    /* Initialize the best block with the first free one.  */
                    best_memory_block =  memory_block;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	60bb      	str	r3, [r7, #8]
 80142f2:	e007      	b.n	8014304 <_ux_utility_memory_free_block_best_get+0x64>
                else
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	681a      	ldr	r2, [r3, #0]
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d201      	bcs.n	8014304 <_ux_utility_memory_free_block_best_get+0x64>

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	60bb      	str	r3, [r7, #8]
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	689b      	ldr	r3, [r3, #8]
 8014308:	60fb      	str	r3, [r7, #12]
    while (memory_block != UX_NULL)
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d1e2      	bne.n	80142d6 <_ux_utility_memory_free_block_best_get+0x36>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
 8014310:	68bb      	ldr	r3, [r7, #8]
}                                
 8014312:	4618      	mov	r0, r3
 8014314:	3714      	adds	r7, #20
 8014316:	46bd      	mov	sp, r7
 8014318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431c:	4770      	bx	lr
 801431e:	bf00      	nop
 8014320:	20003f1c 	.word	0x20003f1c

08014324 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 8014324:	b480      	push	{r7}
 8014326:	b087      	sub	sp, #28
 8014328:	af00      	add	r7, sp, #0
 801432a:	60f8      	str	r0, [r7, #12]
 801432c:	460b      	mov	r3, r1
 801432e:	607a      	str	r2, [r7, #4]
 8014330:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 8014336:	e004      	b.n	8014342 <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	1c5a      	adds	r2, r3, #1
 801433c:	617a      	str	r2, [r7, #20]
 801433e:	7afa      	ldrb	r2, [r7, #11]
 8014340:	701a      	strb	r2, [r3, #0]
    while(length--)
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	1e5a      	subs	r2, r3, #1
 8014346:	607a      	str	r2, [r7, #4]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d1f5      	bne.n	8014338 <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 801434c:	bf00      	nop
}
 801434e:	371c      	adds	r7, #28
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <_ux_utility_mutex_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b084      	sub	sp, #16
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 8014362:	2334      	movs	r3, #52	; 0x34
 8014364:	2200      	movs	r2, #0
 8014366:	6839      	ldr	r1, [r7, #0]
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f7fd fa81 	bl	8011870 <_txe_mutex_create>
 801436e:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d004      	beq.n	8014380 <_ux_utility_mutex_create+0x28>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8014376:	68fa      	ldr	r2, [r7, #12]
 8014378:	2108      	movs	r1, #8
 801437a:	2002      	movs	r0, #2
 801437c:	f7ff fc3c 	bl	8013bf8 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 8014380:	68fb      	ldr	r3, [r7, #12]
}
 8014382:	4618      	mov	r0, r3
 8014384:	3710      	adds	r7, #16
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}

0801438a <_ux_utility_mutex_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_delete(UX_MUTEX *mutex)
{
 801438a:	b580      	push	{r7, lr}
 801438c:	b084      	sub	sp, #16
 801438e:	af00      	add	r7, sp, #0
 8014390:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to delete the Mutex object.  */
    status =  tx_mutex_delete(mutex);
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f7fd fb0a 	bl	80119ac <_txe_mutex_delete>
 8014398:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 801439a:	68fb      	ldr	r3, [r7, #12]
}
 801439c:	4618      	mov	r0, r3
 801439e:	3710      	adds	r7, #16
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <_ux_utility_mutex_off>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b082      	sub	sp, #8
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f7fd fb95 	bl	8011adc <_txe_mutex_put>

    /* Return to caller.  */
    return;
 80143b2:	bf00      	nop
}
 80143b4:	3708      	adds	r7, #8
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}

080143ba <_ux_utility_mutex_on>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 80143ba:	b580      	push	{r7, lr}
 80143bc:	b084      	sub	sp, #16
 80143be:	af00      	add	r7, sp, #0
 80143c0:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 80143c2:	f04f 31ff 	mov.w	r1, #4294967295
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f7fd fb2e 	bl	8011a28 <_txe_mutex_get>
 80143cc:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d005      	beq.n	80143e0 <_ux_utility_mutex_on+0x26>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80143d4:	68fa      	ldr	r2, [r7, #12]
 80143d6:	2108      	movs	r1, #8
 80143d8:	2002      	movs	r0, #2
 80143da:	f7ff fc0d 	bl	8013bf8 <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 80143de:	bf00      	nop
 80143e0:	bf00      	nop
}
 80143e2:	3710      	adds	r7, #16
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}

080143e8 <_ux_utility_semaphore_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b086      	sub	sp, #24
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	60f8      	str	r0, [r7, #12]
 80143f0:	60b9      	str	r1, [r7, #8]
 80143f2:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 80143f4:	231c      	movs	r3, #28
 80143f6:	687a      	ldr	r2, [r7, #4]
 80143f8:	68b9      	ldr	r1, [r7, #8]
 80143fa:	68f8      	ldr	r0, [r7, #12]
 80143fc:	f7fd fba8 	bl	8011b50 <_txe_semaphore_create>
 8014400:	6178      	str	r0, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d004      	beq.n	8014412 <_ux_utility_semaphore_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8014408:	697a      	ldr	r2, [r7, #20]
 801440a:	2108      	movs	r1, #8
 801440c:	2002      	movs	r0, #2
 801440e:	f7ff fbf3 	bl	8013bf8 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 8014412:	697b      	ldr	r3, [r7, #20]
}
 8014414:	4618      	mov	r0, r3
 8014416:	3718      	adds	r7, #24
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <_ux_utility_semaphore_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b084      	sub	sp, #16
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f7fd fc29 	bl	8011c7c <_txe_semaphore_delete>
 801442a:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 801442c:	68fb      	ldr	r3, [r7, #12]
}
 801442e:	4618      	mov	r0, r3
 8014430:	3710      	adds	r7, #16
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}
	...

08014438 <_ux_utility_semaphore_get>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b092      	sub	sp, #72	; 0x48
 801443c:	af06      	add	r7, sp, #24
 801443e:	6078      	str	r0, [r7, #4]
 8014440:	6039      	str	r1, [r7, #0]
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 8014442:	f7fc f957 	bl	80106f4 <_tx_thread_identify>
 8014446:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 8014448:	f107 001c 	add.w	r0, r7, #28
 801444c:	f107 0220 	add.w	r2, r7, #32
 8014450:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8014454:	f107 0308 	add.w	r3, r7, #8
 8014458:	9304      	str	r3, [sp, #16]
 801445a:	f107 030c 	add.w	r3, r7, #12
 801445e:	9303      	str	r3, [sp, #12]
 8014460:	f107 0310 	add.w	r3, r7, #16
 8014464:	9302      	str	r3, [sp, #8]
 8014466:	f107 0314 	add.w	r3, r7, #20
 801446a:	9301      	str	r3, [sp, #4]
 801446c:	f107 0318 	add.w	r3, r7, #24
 8014470:	9300      	str	r3, [sp, #0]
 8014472:	4603      	mov	r3, r0
 8014474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014476:	f7fd fd91 	bl	8011f9c <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 801447a:	4b0a      	ldr	r3, [pc, #40]	; (80144a4 <_ux_utility_semaphore_get+0x6c>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	699a      	ldr	r2, [r3, #24]
 8014480:	69bb      	ldr	r3, [r7, #24]
 8014482:	429a      	cmp	r2, r3
 8014484:	d203      	bcs.n	801448e <_ux_utility_semaphore_get+0x56>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 8014486:	4b07      	ldr	r3, [pc, #28]	; (80144a4 <_ux_utility_semaphore_get+0x6c>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	69ba      	ldr	r2, [r7, #24]
 801448c:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 801448e:	6839      	ldr	r1, [r7, #0]
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f7fd fc31 	bl	8011cf8 <_txe_semaphore_get>
 8014496:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Return completion status.  */
    return(status);
 8014498:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801449a:	4618      	mov	r0, r3
 801449c:	3730      	adds	r7, #48	; 0x30
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}
 80144a2:	bf00      	nop
 80144a4:	20003f1c 	.word	0x20003f1c

080144a8 <_ux_utility_semaphore_put>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b084      	sub	sp, #16
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f7fd fc63 	bl	8011d7c <_txe_semaphore_put>
 80144b6:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 80144b8:	68fb      	ldr	r3, [r7, #12]
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3710      	adds	r7, #16
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}

080144c2 <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 80144c2:	b480      	push	{r7}
 80144c4:	b085      	sub	sp, #20
 80144c6:	af00      	add	r7, sp, #0
 80144c8:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	1c5a      	adds	r2, r3, #1
 80144ce:	607a      	str	r2, [r7, #4]
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	b29b      	uxth	r3, r3
 80144da:	021b      	lsls	r3, r3, #8
 80144dc:	b29a      	uxth	r2, r3
 80144de:	89fb      	ldrh	r3, [r7, #14]
 80144e0:	4313      	orrs	r3, r2
 80144e2:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 80144e4:	89fb      	ldrh	r3, [r7, #14]
}
 80144e6:	4618      	mov	r0, r3
 80144e8:	3714      	adds	r7, #20
 80144ea:	46bd      	mov	sp, r7
 80144ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f0:	4770      	bx	lr

080144f2 <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 80144f2:	b580      	push	{r7, lr}
 80144f4:	b086      	sub	sp, #24
 80144f6:	af00      	add	r7, sp, #0
 80144f8:	60f8      	str	r0, [r7, #12]
 80144fa:	60b9      	str	r1, [r7, #8]
 80144fc:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d101      	bne.n	8014508 <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 8014504:	23ff      	movs	r3, #255	; 0xff
 8014506:	e01d      	b.n	8014544 <_ux_utility_string_length_check+0x52>

    string_length = 0;
 8014508:	2300      	movs	r3, #0
 801450a:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 801450c:	68fa      	ldr	r2, [r7, #12]
 801450e:	697b      	ldr	r3, [r7, #20]
 8014510:	4413      	add	r3, r2
 8014512:	781b      	ldrb	r3, [r3, #0]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d00d      	beq.n	8014534 <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	3301      	adds	r3, #1
 801451c:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 801451e:	697a      	ldr	r2, [r7, #20]
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	429a      	cmp	r2, r3
 8014524:	d9f2      	bls.n	801450c <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8014526:	22ff      	movs	r2, #255	; 0xff
 8014528:	2108      	movs	r1, #8
 801452a:	2002      	movs	r0, #2
 801452c:	f7ff fb64 	bl	8013bf8 <_ux_system_error_handler>

            return(UX_ERROR);
 8014530:	23ff      	movs	r3, #255	; 0xff
 8014532:	e007      	b.n	8014544 <_ux_utility_string_length_check+0x52>
            break;
 8014534:	bf00      	nop
        }
    }

    if (string_length_ptr)
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d002      	beq.n	8014542 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	697a      	ldr	r2, [r7, #20]
 8014540:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 8014542:	2300      	movs	r3, #0
}
 8014544:	4618      	mov	r0, r3
 8014546:	3718      	adds	r7, #24
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}

0801454c <_ux_device_class_cdc_acm_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b086      	sub	sp, #24
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
UX_SLAVE_INTERFACE                      *interface_ptr;         
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	6a1b      	ldr	r3, [r3, #32]
 8014558:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801455e:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	689b      	ldr	r3, [r3, #8]
 8014564:	60fb      	str	r3, [r7, #12]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	693a      	ldr	r2, [r7, #16]
 801456a:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;
 801456c:	693b      	ldr	r3, [r7, #16]
 801456e:	68fa      	ldr	r2, [r7, #12]
 8014570:	601a      	str	r2, [r3, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	685b      	ldr	r3, [r3, #4]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d003      	beq.n	8014582 <_ux_device_class_cdc_acm_activate+0x36>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 801457a:	693b      	ldr	r3, [r7, #16]
 801457c:	685b      	ldr	r3, [r3, #4]
 801457e:	6938      	ldr	r0, [r7, #16]
 8014580:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 8014582:	2300      	movs	r3, #0
}
 8014584:	4618      	mov	r0, r3
 8014586:	3718      	adds	r7, #24
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}

0801458c <_ux_device_class_cdc_acm_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b08a      	sub	sp, #40	; 0x28
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6a1b      	ldr	r3, [r3, #32]
 8014598:	623b      	str	r3, [r7, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 801459a:	6a3b      	ldr	r3, [r7, #32]
 801459c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801459e:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80145a0:	4b51      	ldr	r3, [pc, #324]	; (80146e8 <_ux_device_class_cdc_acm_control_request+0x15c>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	3320      	adds	r3, #32
 80145a6:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 80145a8:	69bb      	ldr	r3, [r7, #24]
 80145aa:	336c      	adds	r3, #108	; 0x6c
 80145ac:	617b      	str	r3, [r7, #20]

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80145b4:	613b      	str	r3, [r7, #16]

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	3354      	adds	r3, #84	; 0x54
 80145ba:	3302      	adds	r3, #2
 80145bc:	4618      	mov	r0, r3
 80145be:	f7ff ff80 	bl	80144c2 <_ux_utility_short_get>
 80145c2:	60f8      	str	r0, [r7, #12]

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	3354      	adds	r3, #84	; 0x54
 80145c8:	3306      	adds	r3, #6
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7ff ff79 	bl	80144c2 <_ux_utility_short_get>
 80145d0:	60b8      	str	r0, [r7, #8]

    transmit_length = request_length ;
 80145d2:	68bb      	ldr	r3, [r7, #8]
 80145d4:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 80145d6:	693b      	ldr	r3, [r7, #16]
 80145d8:	2b22      	cmp	r3, #34	; 0x22
 80145da:	d009      	beq.n	80145f0 <_ux_device_class_cdc_acm_control_request+0x64>
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	2b22      	cmp	r3, #34	; 0x22
 80145e0:	d877      	bhi.n	80146d2 <_ux_device_class_cdc_acm_control_request+0x146>
 80145e2:	693b      	ldr	r3, [r7, #16]
 80145e4:	2b20      	cmp	r3, #32
 80145e6:	d051      	beq.n	801468c <_ux_device_class_cdc_acm_control_request+0x100>
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	2b21      	cmp	r3, #33	; 0x21
 80145ec:	d023      	beq.n	8014636 <_ux_device_class_cdc_acm_control_request+0xaa>
 80145ee:	e070      	b.n	80146d2 <_ux_device_class_cdc_acm_control_request+0x146>
    {

        case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE:

            /* Reset current line state values. */
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 80145f0:	69fb      	ldr	r3, [r7, #28]
 80145f2:	2200      	movs	r2, #0
 80145f4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 80145f8:	69fb      	ldr	r3, [r7, #28]
 80145fa:	2200      	movs	r2, #0
 80145fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            /* Get the line state parameters from the host.  DTR signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	f003 0301 	and.w	r3, r3, #1
 8014606:	2b00      	cmp	r3, #0
 8014608:	d003      	beq.n	8014612 <_ux_device_class_cdc_acm_control_request+0x86>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 801460a:	69fb      	ldr	r3, [r7, #28]
 801460c:	2201      	movs	r2, #1
 801460e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f

            /* Get the line state parameters from the host.  RTS signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	f003 0302 	and.w	r3, r3, #2
 8014618:	2b00      	cmp	r3, #0
 801461a:	d003      	beq.n	8014624 <_ux_device_class_cdc_acm_control_request+0x98>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 801461c:	69fb      	ldr	r3, [r7, #28]
 801461e:	2201      	movs	r2, #1
 8014620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                
            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 8014624:	69fb      	ldr	r3, [r7, #28]
 8014626:	68db      	ldr	r3, [r3, #12]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d054      	beq.n	80146d6 <_ux_device_class_cdc_acm_control_request+0x14a>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 801462c:	69fb      	ldr	r3, [r7, #28]
 801462e:	68db      	ldr	r3, [r3, #12]
 8014630:	69f8      	ldr	r0, [r7, #28]
 8014632:	4798      	blx	r3
            }

            break ;
 8014634:	e04f      	b.n	80146d6 <_ux_device_class_cdc_acm_control_request+0x14a>

        case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING:

            /* Setup the length appropriately.  */
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	2b07      	cmp	r3, #7
 801463a:	d901      	bls.n	8014640 <_ux_device_class_cdc_acm_control_request+0xb4>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 801463c:	2307      	movs	r3, #7
 801463e:	627b      	str	r3, [r7, #36]	; 0x24
    
            /* Send the line coding default parameters back to the host.  */
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	68da      	ldr	r2, [r3, #12]
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014648:	4619      	mov	r1, r3
 801464a:	4610      	mov	r0, r2
 801464c:	f7ff fc20 	bl	8013e90 <_ux_utility_long_put>
                                    cdc_acm -> ux_slave_class_cdc_acm_baudrate);
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 8014650:	697b      	ldr	r3, [r7, #20]
 8014652:	68db      	ldr	r3, [r3, #12]
 8014654:	3304      	adds	r3, #4
 8014656:	69fa      	ldr	r2, [r7, #28]
 8014658:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 801465c:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 801465e:	697b      	ldr	r3, [r7, #20]
 8014660:	68db      	ldr	r3, [r3, #12]
 8014662:	3305      	adds	r3, #5
 8014664:	69fa      	ldr	r2, [r7, #28]
 8014666:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 801466a:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 801466c:	697b      	ldr	r3, [r7, #20]
 801466e:	68db      	ldr	r3, [r3, #12]
 8014670:	3306      	adds	r3, #6
 8014672:	69fa      	ldr	r2, [r7, #28]
 8014674:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 8014678:	701a      	strb	r2, [r3, #0]

            /* Set the phase of the transfer to data out.  */
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801467a:	697b      	ldr	r3, [r7, #20]
 801467c:	2203      	movs	r2, #3
 801467e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Perform the data transfer.  */
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 8014680:	68ba      	ldr	r2, [r7, #8]
 8014682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014684:	6978      	ldr	r0, [r7, #20]
 8014686:	f7ff fa2d 	bl	8013ae4 <_ux_device_stack_transfer_request>
            break; 
 801468a:	e027      	b.n	80146dc <_ux_device_class_cdc_acm_control_request+0x150>
            
        case UX_SLAVE_CLASS_CDC_ACM_SET_LINE_CODING:

            /* Get the line coding parameters from the host.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 801468c:	697b      	ldr	r3, [r7, #20]
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	4618      	mov	r0, r3
 8014692:	f7ff fbd7 	bl	8013e44 <_ux_utility_long_get>
 8014696:	4602      	mov	r2, r0
 8014698:	69fb      	ldr	r3, [r7, #28]
 801469a:	679a      	str	r2, [r3, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	68db      	ldr	r3, [r3, #12]
 80146a0:	791a      	ldrb	r2, [r3, #4]
 80146a2:	69fb      	ldr	r3, [r7, #28]
 80146a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 80146a8:	697b      	ldr	r3, [r7, #20]
 80146aa:	68db      	ldr	r3, [r3, #12]
 80146ac:	795a      	ldrb	r2, [r3, #5]
 80146ae:	69fb      	ldr	r3, [r7, #28]
 80146b0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	68db      	ldr	r3, [r3, #12]
 80146b8:	799a      	ldrb	r2, [r3, #6]
 80146ba:	69fb      	ldr	r3, [r7, #28]
 80146bc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 80146c0:	69fb      	ldr	r3, [r7, #28]
 80146c2:	68db      	ldr	r3, [r3, #12]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d008      	beq.n	80146da <_ux_device_class_cdc_acm_control_request+0x14e>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 80146c8:	69fb      	ldr	r3, [r7, #28]
 80146ca:	68db      	ldr	r3, [r3, #12]
 80146cc:	69f8      	ldr	r0, [r7, #28]
 80146ce:	4798      	blx	r3
            }

            break ;
 80146d0:	e003      	b.n	80146da <_ux_device_class_cdc_acm_control_request+0x14e>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 80146d2:	23ff      	movs	r3, #255	; 0xff
 80146d4:	e003      	b.n	80146de <_ux_device_class_cdc_acm_control_request+0x152>
            break ;
 80146d6:	bf00      	nop
 80146d8:	e000      	b.n	80146dc <_ux_device_class_cdc_acm_control_request+0x150>
            break ;
 80146da:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 80146dc:	2300      	movs	r3, #0
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3728      	adds	r7, #40	; 0x28
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	20003f18 	.word	0x20003f18

080146ec <_ux_device_class_cdc_acm_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b088      	sub	sp, #32
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6a1b      	ldr	r3, [r3, #32]
 80146f8:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146fe:	613b      	str	r3, [r7, #16]

    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	60fb      	str	r3, [r7, #12]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801470a:	61fb      	str	r3, [r7, #28]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 801470c:	69fb      	ldr	r3, [r7, #28]
 801470e:	695b      	ldr	r3, [r3, #20]
 8014710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014714:	2b00      	cmp	r3, #0
 8014716:	d105      	bne.n	8014724 <_ux_device_class_cdc_acm_deactivate+0x38>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 8014718:	69fb      	ldr	r3, [r7, #28]
 801471a:	61bb      	str	r3, [r7, #24]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 801471c:	69bb      	ldr	r3, [r7, #24]
 801471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014720:	61fb      	str	r3, [r7, #28]
 8014722:	e002      	b.n	801472a <_ux_device_class_cdc_acm_deactivate+0x3e>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 8014724:	69fb      	ldr	r3, [r7, #28]
 8014726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014728:	61bb      	str	r3, [r7, #24]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 801472a:	2126      	movs	r1, #38	; 0x26
 801472c:	69f8      	ldr	r0, [r7, #28]
 801472e:	f7ff f9c7 	bl	8013ac0 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 8014732:	2126      	movs	r1, #38	; 0x26
 8014734:	69b8      	ldr	r0, [r7, #24]
 8014736:	f7ff f9c3 	bl	8013ac0 <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 801473a:	2200      	movs	r2, #0
 801473c:	2107      	movs	r1, #7
 801473e:	6938      	ldr	r0, [r7, #16]
 8014740:	f000 f8bc 	bl	80148bc <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 8014744:	693b      	ldr	r3, [r7, #16]
 8014746:	689b      	ldr	r3, [r3, #8]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d003      	beq.n	8014754 <_ux_device_class_cdc_acm_deactivate+0x68>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 801474c:	693b      	ldr	r3, [r7, #16]
 801474e:	689b      	ldr	r3, [r3, #8]
 8014750:	6938      	ldr	r0, [r7, #16]
 8014752:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	2200      	movs	r2, #0
 8014758:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 801475c:	693b      	ldr	r3, [r7, #16]
 801475e:	2200      	movs	r2, #0
 8014760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
 8014764:	2300      	movs	r3, #0
}
 8014766:	4618      	mov	r0, r3
 8014768:	3720      	adds	r7, #32
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
	...

08014770 <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b084      	sub	sp, #16
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	3b01      	subs	r3, #1
 801477e:	2b06      	cmp	r3, #6
 8014780:	d836      	bhi.n	80147f0 <_ux_device_class_cdc_acm_entry+0x80>
 8014782:	a201      	add	r2, pc, #4	; (adr r2, 8014788 <_ux_device_class_cdc_acm_entry+0x18>)
 8014784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014788:	080147bd 	.word	0x080147bd
 801478c:	080147cd 	.word	0x080147cd
 8014790:	080147d9 	.word	0x080147d9
 8014794:	080147e5 	.word	0x080147e5
 8014798:	080147a5 	.word	0x080147a5
 801479c:	080147f1 	.word	0x080147f1
 80147a0:	080147b1 	.word	0x080147b1
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f000 f829 	bl	80147fc <_ux_device_class_cdc_acm_initialize>
 80147aa:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	e020      	b.n	80147f2 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f000 f9e1 	bl	8014b78 <_ux_device_class_cdc_acm_uninitialize>
 80147b6:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	e01a      	b.n	80147f2 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	695b      	ldr	r3, [r3, #20]
 80147c0:	2b0a      	cmp	r3, #10
 80147c2:	d101      	bne.n	80147c8 <_ux_device_class_cdc_acm_entry+0x58>
            return(UX_SUCCESS);
 80147c4:	2300      	movs	r3, #0
 80147c6:	e014      	b.n	80147f2 <_ux_device_class_cdc_acm_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 80147c8:	2357      	movs	r3, #87	; 0x57
 80147ca:	e012      	b.n	80147f2 <_ux_device_class_cdc_acm_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f7ff febd 	bl	801454c <_ux_device_class_cdc_acm_activate>
 80147d2:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	e00c      	b.n	80147f2 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f7ff ff87 	bl	80146ec <_ux_device_class_cdc_acm_deactivate>
 80147de:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	e006      	b.n	80147f2 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f7ff fed1 	bl	801458c <_ux_device_class_cdc_acm_control_request>
 80147ea:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	e000      	b.n	80147f2 <_ux_device_class_cdc_acm_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 80147f0:	2354      	movs	r3, #84	; 0x54
    }   
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	3710      	adds	r7, #16
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}
 80147fa:	bf00      	nop

080147fc <_ux_device_class_cdc_acm_initialize>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b086      	sub	sp, #24
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6a1b      	ldr	r3, [r3, #32]
 8014808:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 801480a:	2284      	movs	r2, #132	; 0x84
 801480c:	2100      	movs	r1, #0
 801480e:	2000      	movs	r0, #0
 8014810:	f7ff fb62 	bl	8013ed8 <_ux_utility_memory_allocate>
 8014814:	6138      	str	r0, [r7, #16]

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d101      	bne.n	8014820 <_ux_device_class_cdc_acm_initialize+0x24>
        return(UX_MEMORY_INSUFFICIENT);
 801481c:	2312      	movs	r3, #18
 801481e:	e045      	b.n	80148ac <_ux_device_class_cdc_acm_initialize+0xb0>

    /* Save the address of the CDC instance inside the CDC container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;
 8014820:	697b      	ldr	r3, [r7, #20]
 8014822:	693a      	ldr	r2, [r7, #16]
 8014824:	649a      	str	r2, [r3, #72]	; 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801482a:	60fb      	str	r3, [r7, #12]

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	681a      	ldr	r2, [r3, #0]
 8014830:	693b      	ldr	r3, [r7, #16]
 8014832:	605a      	str	r2, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	685a      	ldr	r2, [r3, #4]
 8014838:	693b      	ldr	r3, [r7, #16]
 801483a:	609a      	str	r2, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	689a      	ldr	r2, [r3, #8]
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	60da      	str	r2, [r3, #12]

#if !defined(UX_DEVICE_STANDALONE)

    /* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time.  */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex, "ux_slave_class_cdc_acm_in_mutex");
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	3310      	adds	r3, #16
 8014848:	491a      	ldr	r1, [pc, #104]	; (80148b4 <_ux_device_class_cdc_acm_initialize+0xb8>)
 801484a:	4618      	mov	r0, r3
 801484c:	f7ff fd84 	bl	8014358 <_ux_utility_mutex_create>
 8014850:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d004      	beq.n	8014862 <_ux_device_class_cdc_acm_initialize+0x66>
    {

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8014858:	6938      	ldr	r0, [r7, #16]
 801485a:	f7ff fc85 	bl	8014168 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 801485e:	2317      	movs	r3, #23
 8014860:	e024      	b.n	80148ac <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

    /* Out Mutex. */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex, "ux_slave_class_cdc_acm_out_mutex");
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	3344      	adds	r3, #68	; 0x44
 8014866:	4914      	ldr	r1, [pc, #80]	; (80148b8 <_ux_device_class_cdc_acm_initialize+0xbc>)
 8014868:	4618      	mov	r0, r3
 801486a:	f7ff fd75 	bl	8014358 <_ux_utility_mutex_create>
 801486e:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d009      	beq.n	801488a <_ux_device_class_cdc_acm_initialize+0x8e>
    {

        /* Delete the endpoint IN mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	3310      	adds	r3, #16
 801487a:	4618      	mov	r0, r3
 801487c:	f7ff fd85 	bl	801438a <_ux_utility_mutex_delete>

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8014880:	6938      	ldr	r0, [r7, #16]
 8014882:	f7ff fc71 	bl	8014168 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 8014886:	2317      	movs	r3, #23
 8014888:	e010      	b.n	80148ac <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 801488a:	693b      	ldr	r3, [r7, #16]
 801488c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014890:	679a      	str	r2, [r3, #120]	; 0x78
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	2201      	movs	r2, #1
 8014896:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 801489a:	693b      	ldr	r3, [r7, #16]
 801489c:	2200      	movs	r2, #0
 801489e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 80148a2:	693b      	ldr	r3, [r7, #16]
 80148a4:	2208      	movs	r2, #8
 80148a6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 80148aa:	2300      	movs	r3, #0
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	3718      	adds	r7, #24
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	08016e18 	.word	0x08016e18
 80148b8:	08016e38 	.word	0x08016e38

080148bc <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b08a      	sub	sp, #40	; 0x28
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	60f8      	str	r0, [r7, #12]
 80148c4:	60b9      	str	r1, [r7, #8]
 80148c6:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT                                   *endpoint;
UX_SLAVE_INTERFACE                                  *interface_ptr;
UX_SLAVE_TRANSFER                                   *transfer_request;

    /* Let's be optimist ! */
    status = UX_SUCCESS;
 80148c8:	2300      	movs	r3, #0
 80148ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	3b01      	subs	r3, #1
 80148d0:	2b08      	cmp	r3, #8
 80148d2:	f200 80b0 	bhi.w	8014a36 <_ux_device_class_cdc_acm_ioctl+0x17a>
 80148d6:	a201      	add	r2, pc, #4	; (adr r2, 80148dc <_ux_device_class_cdc_acm_ioctl+0x20>)
 80148d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148dc:	08014901 	.word	0x08014901
 80148e0:	0801492d 	.word	0x0801492d
 80148e4:	08014959 	.word	0x08014959
 80148e8:	0801498d 	.word	0x0801498d
 80148ec:	08014973 	.word	0x08014973
 80148f0:	08014a37 	.word	0x08014a37
 80148f4:	08014a37 	.word	0x08014a37
 80148f8:	080149f1 	.word	0x080149f1
 80148fc:	080149f1 	.word	0x080149f1
    {

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	681a      	ldr	r2, [r3, #0]
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	679a      	str	r2, [r3, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 801490c:	693b      	ldr	r3, [r7, #16]
 801490e:	791a      	ldrb	r2, [r3, #4]
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 8014916:	693b      	ldr	r3, [r7, #16]
 8014918:	795a      	ldrb	r2, [r3, #5]
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	799a      	ldrb	r2, [r3, #6]
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
            
            break;
 801492a:	e08d      	b.n	8014a48 <_ux_device_class_cdc_acm_ioctl+0x18c>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8014934:	693b      	ldr	r3, [r7, #16]
 8014936:	601a      	str	r2, [r3, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	711a      	strb	r2, [r3, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8014948:	693b      	ldr	r3, [r7, #16]
 801494a:	715a      	strb	r2, [r3, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	719a      	strb	r2, [r3, #6]
            
            break;
 8014956:	e077      	b.n	8014a48 <_ux_device_class_cdc_acm_ioctl+0x18c>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	617b      	str	r3, [r7, #20]
    
            /* Return the DTR/RTS signals.  */
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8014962:	697b      	ldr	r3, [r7, #20]
 8014964:	701a      	strb	r2, [r3, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
 801496c:	697b      	ldr	r3, [r7, #20]
 801496e:	705a      	strb	r2, [r3, #1]
            
            break;
 8014970:	e06a      	b.n	8014a48 <_ux_device_class_cdc_acm_ioctl+0x18c>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	617b      	str	r3, [r7, #20]
    
            /* Set the DTR/RTS signals.  */
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 8014976:	697b      	ldr	r3, [r7, #20]
 8014978:	781a      	ldrb	r2, [r3, #0]
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 8014980:	697b      	ldr	r3, [r7, #20]
 8014982:	785a      	ldrb	r2, [r3, #1]
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            
            break;
 801498a:	e05d      	b.n	8014a48 <_ux_device_class_cdc_acm_ioctl+0x18c>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_ABORT_PIPE:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	61fb      	str	r3, [r7, #28]
    
            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8014992:	69fb      	ldr	r3, [r7, #28]
 8014994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014996:	623b      	str	r3, [r7, #32]
            
            /* What direction ?  */
            switch( (ULONG) (ALIGN_TYPE) parameter)
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2b01      	cmp	r3, #1
 801499c:	d002      	beq.n	80149a4 <_ux_device_class_cdc_acm_ioctl+0xe8>
 801499e:	2b02      	cmp	r3, #2
 80149a0:	d00a      	beq.n	80149b8 <_ux_device_class_cdc_acm_ioctl+0xfc>
 80149a2:	e013      	b.n	80149cc <_ux_device_class_cdc_acm_ioctl+0x110>
            {
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT : 
    
                /* Check the endpoint direction, if IN we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 80149a4:	6a3b      	ldr	r3, [r7, #32]
 80149a6:	695b      	ldr	r3, [r3, #20]
 80149a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d110      	bne.n	80149d2 <_ux_device_class_cdc_acm_ioctl+0x116>
                {

                    /* So the next endpoint has to be the XMIT endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80149b0:	6a3b      	ldr	r3, [r7, #32]
 80149b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149b4:	623b      	str	r3, [r7, #32]
                }
                break;
 80149b6:	e00c      	b.n	80149d2 <_ux_device_class_cdc_acm_ioctl+0x116>
                
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_RCV : 
    
                /* Check the endpoint direction, if OUT we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 80149b8:	6a3b      	ldr	r3, [r7, #32]
 80149ba:	695b      	ldr	r3, [r3, #20]
 80149bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d008      	beq.n	80149d6 <_ux_device_class_cdc_acm_ioctl+0x11a>
                {

                    /* So the next endpoint has to be the RCV endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80149c4:	6a3b      	ldr	r3, [r7, #32]
 80149c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149c8:	623b      	str	r3, [r7, #32]
                }
                break;
 80149ca:	e004      	b.n	80149d6 <_ux_device_class_cdc_acm_ioctl+0x11a>


                default :
                
                /* Parameter not supported. Return an error.  */
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 80149cc:	2353      	movs	r3, #83	; 0x53
 80149ce:	627b      	str	r3, [r7, #36]	; 0x24
 80149d0:	e002      	b.n	80149d8 <_ux_device_class_cdc_acm_ioctl+0x11c>
                break;
 80149d2:	bf00      	nop
 80149d4:	e000      	b.n	80149d8 <_ux_device_class_cdc_acm_ioctl+0x11c>
                break;
 80149d6:	bf00      	nop
            }
        
            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80149d8:	6a3b      	ldr	r3, [r7, #32]
 80149da:	3330      	adds	r3, #48	; 0x30
 80149dc:	61bb      	str	r3, [r7, #24]
            else
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
#else

            /* Check the status of the transfer. */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 80149de:	69bb      	ldr	r3, [r7, #24]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	2b01      	cmp	r3, #1
 80149e4:	d12f      	bne.n	8014a46 <_ux_device_class_cdc_acm_ioctl+0x18a>
            {

                /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 80149e6:	21f9      	movs	r1, #249	; 0xf9
 80149e8:	69b8      	ldr	r0, [r7, #24]
 80149ea:	f7ff f82f 	bl	8013a4c <_ux_device_stack_transfer_abort>

            }
#endif
            break;
 80149ee:	e02a      	b.n	8014a46 <_ux_device_class_cdc_acm_ioctl+0x18a>

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT:
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_WRITE_TIMEOUT:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	61fb      	str	r3, [r7, #28]

            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 80149f6:	69fb      	ldr	r3, [r7, #28]
 80149f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149fa:	623b      	str	r3, [r7, #32]

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 80149fc:	6a3b      	ldr	r3, [r7, #32]
 80149fe:	695b      	ldr	r3, [r3, #20]
 8014a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 8014a04:	68ba      	ldr	r2, [r7, #8]
 8014a06:	2a08      	cmp	r2, #8
 8014a08:	d101      	bne.n	8014a0e <_ux_device_class_cdc_acm_ioctl+0x152>
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	e000      	b.n	8014a10 <_ux_device_class_cdc_acm_ioctl+0x154>
 8014a0e:	2280      	movs	r2, #128	; 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 8014a10:	429a      	cmp	r2, r3
 8014a12:	d002      	beq.n	8014a1a <_ux_device_class_cdc_acm_ioctl+0x15e>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 8014a14:	6a3b      	ldr	r3, [r7, #32]
 8014a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a18:	623b      	str	r3, [r7, #32]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014a1a:	6a3b      	ldr	r3, [r7, #32]
 8014a1c:	3330      	adds	r3, #48	; 0x30
 8014a1e:	61bb      	str	r3, [r7, #24]

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 8014a20:	69bb      	ldr	r3, [r7, #24]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	d102      	bne.n	8014a2e <_ux_device_class_cdc_acm_ioctl+0x172>
                status = UX_ERROR;
 8014a28:	23ff      	movs	r3, #255	; 0xff
 8014a2a:	627b      	str	r3, [r7, #36]	; 0x24
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;

            break;
 8014a2c:	e00c      	b.n	8014a48 <_ux_device_class_cdc_acm_ioctl+0x18c>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 8014a2e:	687a      	ldr	r2, [r7, #4]
 8014a30:	69bb      	ldr	r3, [r7, #24]
 8014a32:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8014a34:	e008      	b.n	8014a48 <_ux_device_class_cdc_acm_ioctl+0x18c>
#endif

        default: 

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8014a36:	2254      	movs	r2, #84	; 0x54
 8014a38:	2107      	movs	r1, #7
 8014a3a:	2002      	movs	r0, #2
 8014a3c:	f7ff f8dc 	bl	8013bf8 <_ux_system_error_handler>
    
            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
            /* Function not supported. Return an error.  */
            status =  UX_FUNCTION_NOT_SUPPORTED;
 8014a40:	2354      	movs	r3, #84	; 0x54
 8014a42:	627b      	str	r3, [r7, #36]	; 0x24
 8014a44:	e000      	b.n	8014a48 <_ux_device_class_cdc_acm_ioctl+0x18c>
            break;
 8014a46:	bf00      	nop
    }   

    /* Return status to caller.  */
    return(status);
 8014a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
          
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3728      	adds	r7, #40	; 0x28
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}
 8014a52:	bf00      	nop

08014a54 <_ux_device_class_cdc_acm_read>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_read(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b08a      	sub	sp, #40	; 0x28
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	60f8      	str	r0, [r7, #12]
 8014a5c:	60b9      	str	r1, [r7, #8]
 8014a5e:	607a      	str	r2, [r7, #4]
 8014a60:	603b      	str	r3, [r7, #0]

UX_SLAVE_ENDPOINT           *endpoint;
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface_ptr;
UX_SLAVE_TRANSFER           *transfer_request;
UINT                        status= UX_SUCCESS;
 8014a62:	2300      	movs	r3, #0
 8014a64:	623b      	str	r3, [r7, #32]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014a66:	4b43      	ldr	r3, [pc, #268]	; (8014b74 <_ux_device_class_cdc_acm_read+0x120>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	3320      	adds	r3, #32
 8014a6c:	61bb      	str	r3, [r7, #24]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8014a6e:	69bb      	ldr	r3, [r7, #24]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	2b03      	cmp	r3, #3
 8014a74:	d006      	beq.n	8014a84 <_ux_device_class_cdc_acm_read+0x30>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 8014a76:	2251      	movs	r2, #81	; 0x51
 8014a78:	2107      	movs	r1, #7
 8014a7a:	2002      	movs	r0, #2
 8014a7c:	f7ff f8bc 	bl	8013bf8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 8014a80:	2351      	movs	r3, #81	; 0x51
 8014a82:	e073      	b.n	8014b6c <_ux_device_class_cdc_acm_read+0x118>
    }
    
    /* This is the first time we are activated. We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	617b      	str	r3, [r7, #20]
    
    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a8e:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Check the endpoint direction, if OUT we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 8014a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a92:	695b      	ldr	r3, [r3, #20]
 8014a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d002      	beq.n	8014aa2 <_ux_device_class_cdc_acm_read+0x4e>
    {

        /* So the next endpoint has to be the OUT endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8014a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aa0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Protect this thread.  */
    _ux_device_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	3344      	adds	r3, #68	; 0x44
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7ff fc87 	bl	80143ba <_ux_utility_mutex_on>
        
    /* All CDC reading  are on the endpoint OUT, from the host.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aae:	3330      	adds	r3, #48	; 0x30
 8014ab0:	613b      	str	r3, [r7, #16]
    
    /* Reset the actual length.  */
    *actual_length =  0;
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	601a      	str	r2, [r3, #0]
    
    /* Check if we need more transactions.  */
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8014ab8:	e040      	b.n	8014b3c <_ux_device_class_cdc_acm_read+0xe8>
    { 
        
        /* Check if we have enough in the local buffer.  */
        if (requested_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8014aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014abc:	69db      	ldr	r3, [r3, #28]
 8014abe:	687a      	ldr	r2, [r7, #4]
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	d903      	bls.n	8014acc <_ux_device_class_cdc_acm_read+0x78>
    
            /* We have too much to transfer.  */
            local_requested_length = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8014ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac6:	69db      	ldr	r3, [r3, #28]
 8014ac8:	61fb      	str	r3, [r7, #28]
 8014aca:	e001      	b.n	8014ad0 <_ux_device_class_cdc_acm_read+0x7c>
            
        else
        
            /* We can proceed with the demanded length.  */
            local_requested_length = requested_length;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	61fb      	str	r3, [r7, #28]
        
        /* Send the request to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_requested_length);
 8014ad0:	69fa      	ldr	r2, [r7, #28]
 8014ad2:	69f9      	ldr	r1, [r7, #28]
 8014ad4:	6938      	ldr	r0, [r7, #16]
 8014ad6:	f7ff f805 	bl	8013ae4 <_ux_device_stack_transfer_request>
 8014ada:	6238      	str	r0, [r7, #32]
        
        /* Check the status */    
        if (status == UX_SUCCESS)
 8014adc:	6a3b      	ldr	r3, [r7, #32]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d125      	bne.n	8014b2e <_ux_device_class_cdc_acm_read+0xda>
        {

            /* We need to copy the buffer locally.  */
            _ux_utility_memory_copy(buffer, transfer_request -> ux_slave_transfer_request_data_pointer,
 8014ae2:	693b      	ldr	r3, [r7, #16]
 8014ae4:	68d9      	ldr	r1, [r3, #12]
 8014ae6:	693b      	ldr	r3, [r7, #16]
 8014ae8:	699b      	ldr	r3, [r3, #24]
 8014aea:	461a      	mov	r2, r3
 8014aec:	68b8      	ldr	r0, [r7, #8]
 8014aee:	f7ff fb1c 	bl	801412a <_ux_utility_memory_copy>
                            transfer_request -> ux_slave_transfer_request_actual_length); /* Use case of memcpy is verified. */
    
            /* Next buffer address.  */
            buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 8014af2:	693b      	ldr	r3, [r7, #16]
 8014af4:	699b      	ldr	r3, [r3, #24]
 8014af6:	68ba      	ldr	r2, [r7, #8]
 8014af8:	4413      	add	r3, r2
 8014afa:	60bb      	str	r3, [r7, #8]
    
            /* Set the length actually received. */
            *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	681a      	ldr	r2, [r3, #0]
 8014b00:	693b      	ldr	r3, [r7, #16]
 8014b02:	699b      	ldr	r3, [r3, #24]
 8014b04:	441a      	add	r2, r3
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	601a      	str	r2, [r3, #0]
    
            /* Decrement what left has to be done.  */
            requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 8014b0a:	693b      	ldr	r3, [r7, #16]
 8014b0c:	699b      	ldr	r3, [r3, #24]
 8014b0e:	687a      	ldr	r2, [r7, #4]
 8014b10:	1ad3      	subs	r3, r2, r3
 8014b12:	607b      	str	r3, [r7, #4]


            /* Is this a short packet or a ZLP indicating we are done with this transfer ?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length < endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8014b14:	693b      	ldr	r3, [r7, #16]
 8014b16:	699a      	ldr	r2, [r3, #24]
 8014b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b1a:	69db      	ldr	r3, [r3, #28]
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	d20d      	bcs.n	8014b3c <_ux_device_class_cdc_acm_read+0xe8>
            {            

                /* We are done.  */
                /* Free Mutex resource.  */
                _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	3344      	adds	r3, #68	; 0x44
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7ff fc3d 	bl	80143a4 <_ux_utility_mutex_off>
    
                /* Return with success.  */
                return(UX_SUCCESS);
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	e01e      	b.n	8014b6c <_ux_device_class_cdc_acm_read+0x118>
        }
        else
        {
            
            /* Free Mutex resource.  */
            _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	3344      	adds	r3, #68	; 0x44
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7ff fc36 	bl	80143a4 <_ux_utility_mutex_off>
    
            /* We got an error.  */
            return(status);
 8014b38:	6a3b      	ldr	r3, [r7, #32]
 8014b3a:	e017      	b.n	8014b6c <_ux_device_class_cdc_acm_read+0x118>
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8014b3c:	69bb      	ldr	r3, [r7, #24]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	2b03      	cmp	r3, #3
 8014b42:	d102      	bne.n	8014b4a <_ux_device_class_cdc_acm_read+0xf6>
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d1b7      	bne.n	8014aba <_ux_device_class_cdc_acm_read+0x66>
        }            
    }

    
    /* Free Mutex resource.  */
    _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	3344      	adds	r3, #68	; 0x44
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f7ff fc28 	bl	80143a4 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8014b54:	69bb      	ldr	r3, [r7, #24]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	2b03      	cmp	r3, #3
 8014b5a:	d006      	beq.n	8014b6a <_ux_device_class_cdc_acm_read+0x116>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 8014b5c:	2222      	movs	r2, #34	; 0x22
 8014b5e:	2107      	movs	r1, #7
 8014b60:	2002      	movs	r0, #2
 8014b62:	f7ff f849 	bl	8013bf8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 8014b66:	2322      	movs	r3, #34	; 0x22
 8014b68:	e000      	b.n	8014b6c <_ux_device_class_cdc_acm_read+0x118>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 8014b6a:	6a3b      	ldr	r3, [r7, #32]
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	3728      	adds	r7, #40	; 0x28
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd80      	pop	{r7, pc}
 8014b74:	20003f18 	.word	0x20003f18

08014b78 <_ux_device_class_cdc_acm_uninitialize>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b084      	sub	sp, #16
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6a1b      	ldr	r3, [r3, #32]
 8014b84:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b8a:	60bb      	str	r3, [r7, #8]

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d00c      	beq.n	8014bac <_ux_device_class_cdc_acm_uninitialize+0x34>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete the IN endpoint mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	3310      	adds	r3, #16
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7ff fbf7 	bl	801438a <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	3344      	adds	r3, #68	; 0x44
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7ff fbf2 	bl	801438a <_ux_utility_mutex_delete>
        _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack);
#endif
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8014ba6:	68b8      	ldr	r0, [r7, #8]
 8014ba8:	f7ff fade 	bl	8014168 <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
 8014bac:	2300      	movs	r3, #0
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3710      	adds	r7, #16
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
	...

08014bb8 <_ux_device_class_cdc_acm_write>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_write(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b08c      	sub	sp, #48	; 0x30
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	60f8      	str	r0, [r7, #12]
 8014bc0:	60b9      	str	r1, [r7, #8]
 8014bc2:	607a      	str	r2, [r7, #4]
 8014bc4:	603b      	str	r3, [r7, #0]
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface_ptr;
UX_SLAVE_TRANSFER           *transfer_request;
ULONG                       local_requested_length;
ULONG                       local_host_length;
UINT                        status = 0;
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	623b      	str	r3, [r7, #32]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014bca:	4b49      	ldr	r3, [pc, #292]	; (8014cf0 <_ux_device_class_cdc_acm_write+0x138>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	3320      	adds	r3, #32
 8014bd0:	61fb      	str	r3, [r7, #28]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8014bd2:	69fb      	ldr	r3, [r7, #28]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	2b03      	cmp	r3, #3
 8014bd8:	d006      	beq.n	8014be8 <_ux_device_class_cdc_acm_write+0x30>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 8014bda:	2251      	movs	r2, #81	; 0x51
 8014bdc:	2107      	movs	r1, #7
 8014bde:	2002      	movs	r0, #2
 8014be0:	f7ff f80a 	bl	8013bf8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 8014be4:	2351      	movs	r3, #81	; 0x51
 8014be6:	e07f      	b.n	8014ce8 <_ux_device_class_cdc_acm_write+0x130>
    }
        
    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	61bb      	str	r3, [r7, #24]
    
    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 8014bee:	69bb      	ldr	r3, [r7, #24]
 8014bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8014bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bf6:	695b      	ldr	r3, [r3, #20]
 8014bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d102      	bne.n	8014c06 <_ux_device_class_cdc_acm_write+0x4e>
    {

        /* So the next endpoint has to be the IN endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8014c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Protect this thread.  */
    _ux_device_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	3310      	adds	r3, #16
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7ff fbd5 	bl	80143ba <_ux_utility_mutex_on>
        
    /* We are writing to the IN endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c12:	3330      	adds	r3, #48	; 0x30
 8014c14:	617b      	str	r3, [r7, #20]

    /* Reset the actual length.  */
    *actual_length =  0;
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	2200      	movs	r2, #0
 8014c1a:	601a      	str	r2, [r3, #0]

    /* Check if the application forces a 0 length packet.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 8014c1c:	69fb      	ldr	r3, [r7, #28]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	2b03      	cmp	r3, #3
 8014c22:	d10f      	bne.n	8014c44 <_ux_device_class_cdc_acm_write+0x8c>
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d10c      	bne.n	8014c44 <_ux_device_class_cdc_acm_write+0x8c>
    {
        
        /* Send the request for 0 byte packet to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, 0, 0);
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	2100      	movs	r1, #0
 8014c2e:	6978      	ldr	r0, [r7, #20]
 8014c30:	f7fe ff58 	bl	8013ae4 <_ux_device_stack_transfer_request>
 8014c34:	6238      	str	r0, [r7, #32]

        /* Free Mutex resource.  */
        _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	3310      	adds	r3, #16
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7ff fbb2 	bl	80143a4 <_ux_utility_mutex_off>

        /* Return the status.  */
        return(status);
 8014c40:	6a3b      	ldr	r3, [r7, #32]
 8014c42:	e051      	b.n	8014ce8 <_ux_device_class_cdc_acm_write+0x130>

    }
    else
    {    
        /* Check if we need more transactions.  */
        local_host_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 8014c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c48:	627b      	str	r3, [r7, #36]	; 0x24
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8014c4a:	e035      	b.n	8014cb8 <_ux_device_class_cdc_acm_write+0x100>
        { 
    
            /* Check if we have enough in the local buffer.  */
            if (requested_length > UX_SLAVE_REQUEST_DATA_MAX_LENGTH)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014c52:	d903      	bls.n	8014c5c <_ux_device_class_cdc_acm_write+0xa4>
    
                /* We have too much to transfer.  */
                local_requested_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 8014c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c5a:	e004      	b.n	8014c66 <_ux_device_class_cdc_acm_write+0xae>
                
            else
            {

                /* We can proceed with the demanded length.  */
                local_requested_length = requested_length;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	62bb      	str	r3, [r7, #40]	; 0x28
                /* Assume the length match expectation.  */
                local_host_length = requested_length;
#else

                /* Assume expecting more, so ZLP is appended in stack.  */
                local_host_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH + 1;
 8014c60:	f240 4301 	movw	r3, #1025	; 0x401
 8014c64:	627b      	str	r3, [r7, #36]	; 0x24
#endif
            }
                            
            /* On a out, we copy the buffer to the caller. Not very efficient but it makes the API
               easier.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	68db      	ldr	r3, [r3, #12]
 8014c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c6c:	68b9      	ldr	r1, [r7, #8]
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f7ff fa5b 	bl	801412a <_ux_utility_memory_copy>
                                buffer, local_requested_length); /* Use case of memcpy is verified. */
        
            /* Send the request to the device controller.  */
            status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_host_length);
 8014c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c78:	6978      	ldr	r0, [r7, #20]
 8014c7a:	f7fe ff33 	bl	8013ae4 <_ux_device_stack_transfer_request>
 8014c7e:	6238      	str	r0, [r7, #32]
        
            /* Check the status */    
            if (status == UX_SUCCESS)
 8014c80:	6a3b      	ldr	r3, [r7, #32]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d111      	bne.n	8014caa <_ux_device_class_cdc_acm_write+0xf2>
            {
    
                /* Next buffer address.  */
                buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	699b      	ldr	r3, [r3, #24]
 8014c8a:	68ba      	ldr	r2, [r7, #8]
 8014c8c:	4413      	add	r3, r2
 8014c8e:	60bb      	str	r3, [r7, #8]
    
                /* Set the length actually received. */
                *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	681a      	ldr	r2, [r3, #0]
 8014c94:	697b      	ldr	r3, [r7, #20]
 8014c96:	699b      	ldr	r3, [r3, #24]
 8014c98:	441a      	add	r2, r3
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	601a      	str	r2, [r3, #0]
    
                /* Decrement what left has to be done.  */
                requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	699b      	ldr	r3, [r3, #24]
 8014ca2:	687a      	ldr	r2, [r7, #4]
 8014ca4:	1ad3      	subs	r3, r2, r3
 8014ca6:	607b      	str	r3, [r7, #4]
 8014ca8:	e006      	b.n	8014cb8 <_ux_device_class_cdc_acm_write+0x100>
            
            else
            {
             
                /* Free Mutex resource.  */
                _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	3310      	adds	r3, #16
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7ff fb78 	bl	80143a4 <_ux_utility_mutex_off>
                
                /* We had an error, abort.  */
                return(status);
 8014cb4:	6a3b      	ldr	r3, [r7, #32]
 8014cb6:	e017      	b.n	8014ce8 <_ux_device_class_cdc_acm_write+0x130>
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8014cb8:	69fb      	ldr	r3, [r7, #28]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	2b03      	cmp	r3, #3
 8014cbe:	d102      	bne.n	8014cc6 <_ux_device_class_cdc_acm_write+0x10e>
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d1c2      	bne.n	8014c4c <_ux_device_class_cdc_acm_write+0x94>
        }
    }

    
    /* Free Mutex resource.  */
    _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	3310      	adds	r3, #16
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7ff fb6a 	bl	80143a4 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8014cd0:	69fb      	ldr	r3, [r7, #28]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	2b03      	cmp	r3, #3
 8014cd6:	d006      	beq.n	8014ce6 <_ux_device_class_cdc_acm_write+0x12e>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 8014cd8:	2222      	movs	r2, #34	; 0x22
 8014cda:	2107      	movs	r1, #7
 8014cdc:	2002      	movs	r0, #2
 8014cde:	f7fe ff8b 	bl	8013bf8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 8014ce2:	2322      	movs	r3, #34	; 0x22
 8014ce4:	e000      	b.n	8014ce8 <_ux_device_class_cdc_acm_write+0x130>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 8014ce6:	6a3b      	ldr	r3, [r7, #32]
          
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3730      	adds	r7, #48	; 0x30
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}
 8014cf0:	20003f18 	.word	0x20003f18

08014cf4 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b082      	sub	sp, #8
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
 8014cfc:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2280      	movs	r2, #128	; 0x80
 8014d02:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	2201      	movs	r2, #1
 8014d08:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 8014d0a:	6838      	ldr	r0, [r7, #0]
 8014d0c:	f7fd fe5c 	bl	80129c8 <_ux_device_stack_control_request_process>
}
 8014d10:	bf00      	nop
 8014d12:	3708      	adds	r7, #8
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}

08014d18 <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b084      	sub	sp, #16
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	60f8      	str	r0, [r7, #12]
 8014d20:	60b9      	str	r1, [r7, #8]
 8014d22:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8014d24:	68bb      	ldr	r3, [r7, #8]
 8014d26:	2200      	movs	r2, #0
 8014d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	2280      	movs	r2, #128	; 0x80
 8014d2e:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8014d30:	68b8      	ldr	r0, [r7, #8]
 8014d32:	f7fd fe49 	bl	80129c8 <_ux_device_stack_control_request_process>
 8014d36:	4603      	mov	r3, r0
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d108      	bne.n	8014d4e <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	2203      	movs	r2, #3
 8014d40:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8014d42:	2300      	movs	r3, #0
 8014d44:	2200      	movs	r2, #0
 8014d46:	2100      	movs	r1, #0
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f7f1 f9f8 	bl	800613e <HAL_PCD_EP_Transmit>
    }
}
 8014d4e:	bf00      	nop
 8014d50:	3710      	adds	r7, #16
 8014d52:	46bd      	mov	sp, r7
 8014d54:	bd80      	pop	{r7, pc}

08014d56 <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 8014d56:	b580      	push	{r7, lr}
 8014d58:	b084      	sub	sp, #16
 8014d5a:	af00      	add	r7, sp, #0
 8014d5c:	60f8      	str	r0, [r7, #12]
 8014d5e:	60b9      	str	r1, [r7, #8]
 8014d60:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	2280      	movs	r2, #128	; 0x80
 8014d66:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8014d68:	68b8      	ldr	r0, [r7, #8]
 8014d6a:	f7fd fe2d 	bl	80129c8 <_ux_device_stack_control_request_process>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d108      	bne.n	8014d86 <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	2204      	movs	r2, #4
 8014d78:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	2100      	movs	r1, #0
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f7f1 f9dc 	bl	800613e <HAL_PCD_EP_Transmit>
    }
}
 8014d86:	bf00      	nop
 8014d88:	3710      	adds	r7, #16
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
	...

08014d90 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b088      	sub	sp, #32
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014d98:	4b39      	ldr	r3, [pc, #228]	; (8014e80 <HAL_PCD_SetupStageCallback+0xf0>)
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8014d9e:	69fb      	ldr	r3, [r7, #28]
 8014da0:	69db      	ldr	r3, [r3, #28]
 8014da2:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8014da4:	69bb      	ldr	r3, [r7, #24]
 8014da6:	3304      	adds	r3, #4
 8014da8:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8014daa:	697b      	ldr	r3, [r7, #20]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	3330      	adds	r3, #48	; 0x30
 8014db0:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014dbe:	2208      	movs	r2, #8
 8014dc0:	4619      	mov	r1, r3
 8014dc2:	f7ff f9b2 	bl	801412a <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	2201      	movs	r2, #1
 8014dd0:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8014dd2:	693b      	ldr	r3, [r7, #16]
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8014dd8:	697b      	ldr	r3, [r7, #20]
 8014dda:	685b      	ldr	r3, [r3, #4]
 8014ddc:	f023 020e 	bic.w	r2, r3, #14
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8014dea:	b25b      	sxtb	r3, r3
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	da04      	bge.n	8014dfa <HAL_PCD_SetupStageCallback+0x6a>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 8014df0:	6939      	ldr	r1, [r7, #16]
 8014df2:	6978      	ldr	r0, [r7, #20]
 8014df4:	f7ff ff7e 	bl	8014cf4 <_ux_dcd_stm32_setup_in>
 8014df8:	e03f      	b.n	8014e7a <HAL_PCD_SetupStageCallback+0xea>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8014e00:	693b      	ldr	r3, [r7, #16]
 8014e02:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d10a      	bne.n	8014e20 <HAL_PCD_SetupStageCallback+0x90>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d105      	bne.n	8014e20 <HAL_PCD_SetupStageCallback+0x90>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 8014e14:	687a      	ldr	r2, [r7, #4]
 8014e16:	6939      	ldr	r1, [r7, #16]
 8014e18:	6978      	ldr	r0, [r7, #20]
 8014e1a:	f7ff ff9c 	bl	8014d56 <_ux_dcd_stm32_setup_status>
 8014e1e:	e02c      	b.n	8014e7a <HAL_PCD_SetupStageCallback+0xea>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8014e20:	693b      	ldr	r3, [r7, #16]
 8014e22:	689b      	ldr	r3, [r3, #8]
 8014e24:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8014e26:	693b      	ldr	r3, [r7, #16]
 8014e28:	3354      	adds	r3, #84	; 0x54
 8014e2a:	3306      	adds	r3, #6
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7ff fb48 	bl	80144c2 <_ux_utility_short_get>
 8014e32:	4602      	mov	r2, r0
 8014e34:	693b      	ldr	r3, [r7, #16]
 8014e36:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8014e38:	693b      	ldr	r3, [r7, #16]
 8014e3a:	695b      	ldr	r3, [r3, #20]
 8014e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014e40:	d907      	bls.n	8014e52 <HAL_PCD_SetupStageCallback+0xc2>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8014e42:	68f9      	ldr	r1, [r7, #12]
 8014e44:	69b8      	ldr	r0, [r7, #24]
 8014e46:	f000 fa9d 	bl	8015384 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 8014e50:	e013      	b.n	8014e7a <HAL_PCD_SetupStageCallback+0xea>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8014e52:	693b      	ldr	r3, [r7, #16]
 8014e54:	2200      	movs	r2, #0
 8014e56:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	68da      	ldr	r2, [r3, #12]
 8014e5c:	693b      	ldr	r3, [r7, #16]
 8014e5e:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Receive(hpcd,
 8014e64:	b2d9      	uxtb	r1, r3
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8014e66:	693b      	ldr	r3, [r7, #16]
 8014e68:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 8014e6a:	693b      	ldr	r3, [r7, #16]
 8014e6c:	695b      	ldr	r3, [r3, #20]
 8014e6e:	6878      	ldr	r0, [r7, #4]
 8014e70:	f7f1 f910 	bl	8006094 <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 8014e74:	697b      	ldr	r3, [r7, #20]
 8014e76:	2202      	movs	r2, #2
 8014e78:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 8014e7a:	3720      	adds	r7, #32
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}
 8014e80:	20003f18 	.word	0x20003f18

08014e84 <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b088      	sub	sp, #32
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014e90:	4b57      	ldr	r3, [pc, #348]	; (8014ff0 <HAL_PCD_DataInStageCallback+0x16c>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8014e96:	697b      	ldr	r3, [r7, #20]
 8014e98:	69db      	ldr	r3, [r3, #28]
 8014e9a:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 8014e9c:	78fb      	ldrb	r3, [r7, #3]
 8014e9e:	f003 030f 	and.w	r3, r3, #15
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d00c      	beq.n	8014ec0 <HAL_PCD_DataInStageCallback+0x3c>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8014ea6:	78fb      	ldrb	r3, [r7, #3]
 8014ea8:	f003 020f 	and.w	r2, r3, #15
 8014eac:	4613      	mov	r3, r2
 8014eae:	005b      	lsls	r3, r3, #1
 8014eb0:	4413      	add	r3, r2
 8014eb2:	009b      	lsls	r3, r3, #2
 8014eb4:	3360      	adds	r3, #96	; 0x60
 8014eb6:	693a      	ldr	r2, [r7, #16]
 8014eb8:	4413      	add	r3, r2
 8014eba:	3304      	adds	r3, #4
 8014ebc:	61fb      	str	r3, [r7, #28]
 8014ebe:	e00a      	b.n	8014ed6 <HAL_PCD_DataInStageCallback+0x52>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8014ec0:	78fb      	ldrb	r3, [r7, #3]
 8014ec2:	f003 020f 	and.w	r2, r3, #15
 8014ec6:	4613      	mov	r3, r2
 8014ec8:	005b      	lsls	r3, r3, #1
 8014eca:	4413      	add	r3, r2
 8014ecc:	009b      	lsls	r3, r3, #2
 8014ece:	693a      	ldr	r2, [r7, #16]
 8014ed0:	4413      	add	r3, r2
 8014ed2:	3304      	adds	r3, #4
 8014ed4:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8014ed6:	69fb      	ldr	r3, [r7, #28]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	3330      	adds	r3, #48	; 0x30
 8014edc:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8014ede:	78fb      	ldrb	r3, [r7, #3]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d15d      	bne.n	8014fa0 <HAL_PCD_DataInStageCallback+0x11c>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	689b      	ldr	r3, [r3, #8]
 8014ee8:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8014eea:	69fb      	ldr	r3, [r7, #28]
 8014eec:	7a1b      	ldrb	r3, [r3, #8]
 8014eee:	2b01      	cmp	r3, #1
 8014ef0:	d17a      	bne.n	8014fe8 <HAL_PCD_DataInStageCallback+0x164>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	2100      	movs	r1, #0
 8014ef8:	6878      	ldr	r0, [r7, #4]
 8014efa:	f7f1 f8cb 	bl	8006094 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	69da      	ldr	r2, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8014f02:	68bb      	ldr	r3, [r7, #8]
 8014f04:	69db      	ldr	r3, [r3, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8014f06:	429a      	cmp	r2, r3
 8014f08:	d825      	bhi.n	8014f56 <HAL_PCD_DataInStageCallback+0xd2>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f0e:	2b01      	cmp	r3, #1
 8014f10:	d10b      	bne.n	8014f2a <HAL_PCD_DataInStageCallback+0xa6>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Transmit(hpcd,
 8014f16:	b2d9      	uxtb	r1, r3
 8014f18:	2300      	movs	r3, #0
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	6878      	ldr	r0, [r7, #4]
 8014f1e:	f7f1 f90e 	bl	800613e <HAL_PCD_EP_Transmit>

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	2200      	movs	r2, #0
 8014f26:	651a      	str	r2, [r3, #80]	; 0x50
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 8014f28:	e05e      	b.n	8014fe8 <HAL_PCD_DataInStageCallback+0x164>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	625a      	str	r2, [r3, #36]	; 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	2202      	movs	r2, #2
 8014f34:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d003      	beq.n	8014f4e <HAL_PCD_DataInStageCallback+0xca>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f4a:	68f8      	ldr	r0, [r7, #12]
 8014f4c:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8014f4e:	69fb      	ldr	r3, [r7, #28]
 8014f50:	2204      	movs	r2, #4
 8014f52:	721a      	strb	r2, [r3, #8]
}
 8014f54:	e048      	b.n	8014fe8 <HAL_PCD_DataInStageCallback+0x164>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	69da      	ldr	r2, [r3, #28]
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	69db      	ldr	r3, [r3, #28]
 8014f5e:	1ad3      	subs	r3, r2, r3
 8014f60:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8014f62:	68bb      	ldr	r3, [r7, #8]
 8014f64:	69db      	ldr	r3, [r3, #28]
 8014f66:	69ba      	ldr	r2, [r7, #24]
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d902      	bls.n	8014f72 <HAL_PCD_DataInStageCallback+0xee>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8014f6c:	68bb      	ldr	r3, [r7, #8]
 8014f6e:	69db      	ldr	r3, [r3, #28]
 8014f70:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	691a      	ldr	r2, [r3, #16]
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	69db      	ldr	r3, [r3, #28]
 8014f7a:	441a      	add	r2, r3
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	69da      	ldr	r2, [r3, #28]
 8014f84:	69bb      	ldr	r3, [r7, #24]
 8014f86:	1ad2      	subs	r2, r2, r3
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	61da      	str	r2, [r3, #28]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8014f8c:	68bb      	ldr	r3, [r7, #8]
 8014f8e:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Transmit(hpcd,
 8014f90:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 8014f96:	69bb      	ldr	r3, [r7, #24]
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f7f1 f8d0 	bl	800613e <HAL_PCD_EP_Transmit>
}
 8014f9e:	e023      	b.n	8014fe8 <HAL_PCD_DataInStageCallback+0x164>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d010      	beq.n	8014fca <HAL_PCD_DataInStageCallback+0x146>
            transfer_request -> ux_slave_transfer_request_requested_length)
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d00c      	beq.n	8014fca <HAL_PCD_DataInStageCallback+0x146>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	651a      	str	r2, [r3, #80]	; 0x50
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	2200      	movs	r2, #0
 8014fba:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 8014fbc:	78f9      	ldrb	r1, [r7, #3]
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	6878      	ldr	r0, [r7, #4]
 8014fc4:	f7f1 f8bb 	bl	800613e <HAL_PCD_EP_Transmit>
}
 8014fc8:	e00e      	b.n	8014fe8 <HAL_PCD_DataInStageCallback+0x164>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	625a      	str	r2, [r3, #36]	; 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	2202      	movs	r2, #2
 8014fd4:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	3330      	adds	r3, #48	; 0x30
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7ff fa60 	bl	80144a8 <_ux_utility_semaphore_put>
}
 8014fe8:	bf00      	nop
 8014fea:	3720      	adds	r7, #32
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	20003f18 	.word	0x20003f18

08014ff4 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b088      	sub	sp, #32
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	460b      	mov	r3, r1
 8014ffe:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8015000:	4b3b      	ldr	r3, [pc, #236]	; (80150f0 <HAL_PCD_DataOutStageCallback+0xfc>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015006:	69fb      	ldr	r3, [r7, #28]
 8015008:	69db      	ldr	r3, [r3, #28]
 801500a:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 801500c:	78fb      	ldrb	r3, [r7, #3]
 801500e:	f003 020f 	and.w	r2, r3, #15
 8015012:	4613      	mov	r3, r2
 8015014:	005b      	lsls	r3, r3, #1
 8015016:	4413      	add	r3, r2
 8015018:	009b      	lsls	r3, r3, #2
 801501a:	69ba      	ldr	r2, [r7, #24]
 801501c:	4413      	add	r3, r2
 801501e:	3304      	adds	r3, #4
 8015020:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8015022:	697b      	ldr	r3, [r7, #20]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	3330      	adds	r3, #48	; 0x30
 8015028:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 801502a:	78fb      	ldrb	r3, [r7, #3]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d147      	bne.n	80150c0 <HAL_PCD_DataOutStageCallback+0xcc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	7a1b      	ldrb	r3, [r3, #8]
 8015034:	2b02      	cmp	r3, #2
 8015036:	d156      	bne.n	80150e6 <HAL_PCD_DataOutStageCallback+0xf2>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 8015038:	693b      	ldr	r3, [r7, #16]
 801503a:	689b      	ldr	r3, [r3, #8]
 801503c:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 801503e:	78fb      	ldrb	r3, [r7, #3]
 8015040:	4619      	mov	r1, r3
 8015042:	6878      	ldr	r0, [r7, #4]
 8015044:	f7f1 f863 	bl	800610e <HAL_PCD_EP_GetRxCount>
 8015048:	60b8      	str	r0, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	699a      	ldr	r2, [r3, #24]
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	441a      	add	r2, r3
 8015052:	693b      	ldr	r3, [r7, #16]
 8015054:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 8015056:	693b      	ldr	r3, [r7, #16]
 8015058:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 801505a:	693b      	ldr	r3, [r7, #16]
 801505c:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 801505e:	429a      	cmp	r2, r3
 8015060:	d822      	bhi.n	80150a8 <HAL_PCD_DataOutStageCallback+0xb4>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8015062:	693b      	ldr	r3, [r7, #16]
 8015064:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8015066:	693b      	ldr	r3, [r7, #16]
 8015068:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 801506a:	429a      	cmp	r2, r3
 801506c:	d004      	beq.n	8015078 <HAL_PCD_DataOutStageCallback+0x84>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	69db      	ldr	r3, [r3, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8015072:	68ba      	ldr	r2, [r7, #8]
 8015074:	429a      	cmp	r2, r3
 8015076:	d005      	beq.n	8015084 <HAL_PCD_DataOutStageCallback+0x90>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 8015078:	687a      	ldr	r2, [r7, #4]
 801507a:	6939      	ldr	r1, [r7, #16]
 801507c:	6978      	ldr	r0, [r7, #20]
 801507e:	f7ff fe4b 	bl	8014d18 <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 8015082:	e030      	b.n	80150e6 <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8015084:	693b      	ldr	r3, [r7, #16]
 8015086:	691a      	ldr	r2, [r3, #16]
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	69db      	ldr	r3, [r3, #28]
 801508c:	441a      	add	r2, r3
 801508e:	693b      	ldr	r3, [r7, #16]
 8015090:	611a      	str	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Receive(hpcd,
 8015096:	b2d9      	uxtb	r1, r3
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	691a      	ldr	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	69db      	ldr	r3, [r3, #28]
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	f7f0 fff7 	bl	8006094 <HAL_PCD_EP_Receive>
}
 80150a6:	e01e      	b.n	80150e6 <HAL_PCD_DataOutStageCallback+0xf2>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 80150a8:	693b      	ldr	r3, [r7, #16]
 80150aa:	2227      	movs	r2, #39	; 0x27
 80150ac:	625a      	str	r2, [r3, #36]	; 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d017      	beq.n	80150e6 <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150ba:	6938      	ldr	r0, [r7, #16]
 80150bc:	4798      	blx	r3
}
 80150be:	e012      	b.n	80150e6 <HAL_PCD_DataOutStageCallback+0xf2>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 80150c0:	78fb      	ldrb	r3, [r7, #3]
 80150c2:	4619      	mov	r1, r3
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f7f1 f822 	bl	800610e <HAL_PCD_EP_GetRxCount>
 80150ca:	4602      	mov	r2, r0
 80150cc:	693b      	ldr	r3, [r7, #16]
 80150ce:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80150d0:	693b      	ldr	r3, [r7, #16]
 80150d2:	2200      	movs	r2, #0
 80150d4:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	2202      	movs	r2, #2
 80150da:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 80150dc:	693b      	ldr	r3, [r7, #16]
 80150de:	3330      	adds	r3, #48	; 0x30
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7ff f9e1 	bl	80144a8 <_ux_utility_semaphore_put>
}
 80150e6:	bf00      	nop
 80150e8:	3720      	adds	r7, #32
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}
 80150ee:	bf00      	nop
 80150f0:	20003f18 	.word	0x20003f18

080150f4 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b082      	sub	sp, #8
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 80150fc:	4b10      	ldr	r3, [pc, #64]	; (8015140 <HAL_PCD_ResetCallback+0x4c>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	6a1b      	ldr	r3, [r3, #32]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d001      	beq.n	801510a <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 8015106:	f7fd ffdd 	bl	80130c4 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	689b      	ldr	r3, [r3, #8]
 801510e:	2b02      	cmp	r3, #2
 8015110:	d105      	bne.n	801511e <HAL_PCD_ResetCallback+0x2a>
        break;
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8015112:	4b0b      	ldr	r3, [pc, #44]	; (8015140 <HAL_PCD_ResetCallback+0x4c>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	2201      	movs	r2, #1
 8015118:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
        break;
 801511c:	e005      	b.n	801512a <HAL_PCD_ResetCallback+0x36>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 801511e:	4b08      	ldr	r3, [pc, #32]	; (8015140 <HAL_PCD_ResetCallback+0x4c>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	2201      	movs	r2, #1
 8015124:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
        break;
 8015128:	bf00      	nop
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 801512a:	f000 fa69 	bl	8015600 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801512e:	4b04      	ldr	r3, [pc, #16]	; (8015140 <HAL_PCD_ResetCallback+0x4c>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	2201      	movs	r2, #1
 8015134:	621a      	str	r2, [r3, #32]
}
 8015136:	bf00      	nop
 8015138:	3708      	adds	r7, #8
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	20003f18 	.word	0x20003f18

08015144 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b082      	sub	sp, #8
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801514c:	4b07      	ldr	r3, [pc, #28]	; (801516c <HAL_PCD_SuspendCallback+0x28>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8015154:	2b00      	cmp	r3, #0
 8015156:	d005      	beq.n	8015164 <HAL_PCD_SuspendCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 8015158:	4b04      	ldr	r3, [pc, #16]	; (801516c <HAL_PCD_SuspendCallback+0x28>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8015160:	20f4      	movs	r0, #244	; 0xf4
 8015162:	4798      	blx	r3
    }
}
 8015164:	bf00      	nop
 8015166:	3708      	adds	r7, #8
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}
 801516c:	20003f18 	.word	0x20003f18

08015170 <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b082      	sub	sp, #8
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8015178:	4b07      	ldr	r3, [pc, #28]	; (8015198 <HAL_PCD_ResumeCallback+0x28>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8015180:	2b00      	cmp	r3, #0
 8015182:	d005      	beq.n	8015190 <HAL_PCD_ResumeCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 8015184:	4b04      	ldr	r3, [pc, #16]	; (8015198 <HAL_PCD_ResumeCallback+0x28>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 801518c:	20f3      	movs	r0, #243	; 0xf3
 801518e:	4798      	blx	r3
    }
}
 8015190:	bf00      	nop
 8015192:	3708      	adds	r7, #8
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}
 8015198:	20003f18 	.word	0x20003f18

0801519c <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b082      	sub	sp, #8
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80151a4:	4b07      	ldr	r3, [pc, #28]	; (80151c4 <HAL_PCD_SOFCallback+0x28>)
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d005      	beq.n	80151bc <HAL_PCD_SOFCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 80151b0:	4b04      	ldr	r3, [pc, #16]	; (80151c4 <HAL_PCD_SOFCallback+0x28>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80151b8:	20f0      	movs	r0, #240	; 0xf0
 80151ba:	4798      	blx	r3
    }
}
 80151bc:	bf00      	nop
 80151be:	3708      	adds	r7, #8
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}
 80151c4:	20003f18 	.word	0x20003f18

080151c8 <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 80151c8:	b480      	push	{r7}
 80151ca:	b085      	sub	sp, #20
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
 80151d0:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151d8:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 80151da:	683b      	ldr	r3, [r7, #0]
 80151dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151e0:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	2b07      	cmp	r3, #7
 80151e6:	d806      	bhi.n	80151f6 <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80151ee:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80151f0:	68ba      	ldr	r2, [r7, #8]
 80151f2:	429a      	cmp	r2, r3
 80151f4:	d301      	bcc.n	80151fa <_stm32_ed_get+0x32>
        return(UX_NULL);
 80151f6:	2300      	movs	r3, #0
 80151f8:	e014      	b.n	8015224 <_stm32_ed_get+0x5c>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d009      	beq.n	8015214 <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 8015200:	68ba      	ldr	r2, [r7, #8]
 8015202:	4613      	mov	r3, r2
 8015204:	005b      	lsls	r3, r3, #1
 8015206:	4413      	add	r3, r2
 8015208:	009b      	lsls	r3, r3, #2
 801520a:	3360      	adds	r3, #96	; 0x60
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	4413      	add	r3, r2
 8015210:	3304      	adds	r3, #4
 8015212:	e007      	b.n	8015224 <_stm32_ed_get+0x5c>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8015214:	68ba      	ldr	r2, [r7, #8]
 8015216:	4613      	mov	r3, r2
 8015218:	005b      	lsls	r3, r3, #1
 801521a:	4413      	add	r3, r2
 801521c:	009b      	lsls	r3, r3, #2
 801521e:	687a      	ldr	r2, [r7, #4]
 8015220:	4413      	add	r3, r2
 8015222:	3304      	adds	r3, #4
}
 8015224:	4618      	mov	r0, r3
 8015226:	3714      	adds	r7, #20
 8015228:	46bd      	mov	sp, r7
 801522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522e:	4770      	bx	lr

08015230 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b084      	sub	sp, #16
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
 8015238:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 801523a:	683b      	ldr	r3, [r7, #0]
 801523c:	695b      	ldr	r3, [r3, #20]
 801523e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015242:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	695b      	ldr	r3, [r3, #20]
 8015248:	4619      	mov	r1, r3
 801524a:	6878      	ldr	r0, [r7, #4]
 801524c:	f7ff ffbc 	bl	80151c8 <_stm32_ed_get>
 8015250:	60b8      	str	r0, [r7, #8]

    if (ed == UX_NULL)
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d101      	bne.n	801525c <_ux_dcd_stm32_endpoint_create+0x2c>
        return(UX_NO_ED_AVAILABLE);
 8015258:	2314      	movs	r3, #20
 801525a:	e034      	b.n	80152c6 <_ux_dcd_stm32_endpoint_create+0x96>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	685b      	ldr	r3, [r3, #4]
 8015260:	f003 0301 	and.w	r3, r3, #1
 8015264:	2b00      	cmp	r3, #0
 8015266:	d12d      	bne.n	80152c4 <_ux_dcd_stm32_endpoint_create+0x94>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 8015268:	68bb      	ldr	r3, [r7, #8]
 801526a:	685b      	ldr	r3, [r3, #4]
 801526c:	f043 0201 	orr.w	r2, r3, #1
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	68ba      	ldr	r2, [r7, #8]
 8015278:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	683a      	ldr	r2, [r7, #0]
 801527e:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	b2da      	uxtb	r2, r3
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	695b      	ldr	r3, [r3, #20]
 801528c:	b2db      	uxtb	r3, r3
 801528e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015292:	b2da      	uxtb	r2, r3
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d010      	beq.n	80152c0 <_ux_dcd_stm32_endpoint_create+0x90>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	695b      	ldr	r3, [r3, #20]
 80152a8:	b2d9      	uxtb	r1, r3
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	69db      	ldr	r3, [r3, #28]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80152ae:	b29a      	uxth	r2, r3
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	699b      	ldr	r3, [r3, #24]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80152b4:	b2db      	uxtb	r3, r3
 80152b6:	f003 0303 	and.w	r3, r3, #3
 80152ba:	b2db      	uxtb	r3, r3
 80152bc:	f7f0 fe3c 	bl	8005f38 <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 80152c0:	2300      	movs	r3, #0
 80152c2:	e000      	b.n	80152c6 <_ux_dcd_stm32_endpoint_create+0x96>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 80152c4:	2314      	movs	r3, #20
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	3710      	adds	r7, #16
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}

080152ce <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80152ce:	b580      	push	{r7, lr}
 80152d0:	b084      	sub	sp, #16
 80152d2:	af00      	add	r7, sp, #0
 80152d4:	6078      	str	r0, [r7, #4]
 80152d6:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	689b      	ldr	r3, [r3, #8]
 80152dc:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	2200      	movs	r2, #0
 80152e2:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	695b      	ldr	r3, [r3, #20]
 80152ee:	b2db      	uxtb	r3, r3
 80152f0:	4619      	mov	r1, r3
 80152f2:	4610      	mov	r0, r2
 80152f4:	f7f0 fe86 	bl	8006004 <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 80152f8:	2300      	movs	r3, #0
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3710      	adds	r7, #16
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}

08015302 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8015302:	b580      	push	{r7, lr}
 8015304:	b088      	sub	sp, #32
 8015306:	af00      	add	r7, sp, #0
 8015308:	6078      	str	r0, [r7, #4]
 801530a:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	689b      	ldr	r3, [r3, #8]
 8015310:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015312:	f3ef 8310 	mrs	r3, PRIMASK
 8015316:	617b      	str	r3, [r7, #20]
    return(posture);
 8015318:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801531a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801531c:	b672      	cpsid	i
    return(int_posture);
 801531e:	693b      	ldr	r3, [r7, #16]

    UX_DISABLE
 8015320:	61bb      	str	r3, [r7, #24]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	685b      	ldr	r3, [r3, #4]
 8015326:	f423 7243 	bic.w	r2, r3, #780	; 0x30c
 801532a:	69fb      	ldr	r3, [r7, #28]
 801532c:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801532e:	69fb      	ldr	r3, [r7, #28]
 8015330:	2200      	movs	r2, #0
 8015332:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	695b      	ldr	r3, [r3, #20]
 801533e:	b2db      	uxtb	r3, r3
 8015340:	4619      	mov	r1, r3
 8015342:	4610      	mov	r0, r2
 8015344:	f7f0 ff90 	bl	8006268 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	695b      	ldr	r3, [r3, #20]
 8015352:	b2db      	uxtb	r3, r3
 8015354:	4619      	mov	r1, r3
 8015356:	4610      	mov	r0, r2
 8015358:	f7f0 ffda 	bl	8006310 <HAL_PCD_EP_Flush>

#ifndef UX_DEVICE_STANDALONE

    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015360:	2b00      	cmp	r3, #0
 8015362:	d004      	beq.n	801536e <_ux_dcd_stm32_endpoint_reset+0x6c>
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 8015364:	683b      	ldr	r3, [r7, #0]
 8015366:	3360      	adds	r3, #96	; 0x60
 8015368:	4618      	mov	r0, r3
 801536a:	f7ff f89d 	bl	80144a8 <_ux_utility_semaphore_put>
 801536e:	69bb      	ldr	r3, [r7, #24]
 8015370:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	f383 8810 	msr	PRIMASK, r3
}
 8015378:	bf00      	nop
#endif

    UX_RESTORE

    /* This function never fails.  */
    return(UX_SUCCESS);
 801537a:	2300      	movs	r3, #0
}
 801537c:	4618      	mov	r0, r3
 801537e:	3720      	adds	r7, #32
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}

08015384 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b084      	sub	sp, #16
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	689b      	ldr	r3, [r3, #8]
 8015392:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	685b      	ldr	r3, [r3, #4]
 8015398:	f043 0204 	orr.w	r2, r3, #4
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80153a6:	683b      	ldr	r3, [r7, #0]
 80153a8:	695b      	ldr	r3, [r3, #20]
 80153aa:	b2da      	uxtb	r2, r3
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	7a9b      	ldrb	r3, [r3, #10]
 80153b0:	4313      	orrs	r3, r2
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	4619      	mov	r1, r3
 80153b6:	f7f0 ff05 	bl	80061c4 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 80153ba:	2300      	movs	r3, #0
}
 80153bc:	4618      	mov	r0, r3
 80153be:	3710      	adds	r7, #16
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}

080153c4 <_stm32_ed_get>:
{
 80153c4:	b480      	push	{r7}
 80153c6:	b085      	sub	sp, #20
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
 80153cc:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80153d4:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 80153d6:	683b      	ldr	r3, [r7, #0]
 80153d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153dc:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	2b07      	cmp	r3, #7
 80153e2:	d806      	bhi.n	80153f2 <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80153ea:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80153ec:	68ba      	ldr	r2, [r7, #8]
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d301      	bcc.n	80153f6 <_stm32_ed_get+0x32>
        return(UX_NULL);
 80153f2:	2300      	movs	r3, #0
 80153f4:	e014      	b.n	8015420 <_stm32_ed_get+0x5c>
    if (ep_dir)
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d009      	beq.n	8015410 <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 80153fc:	68ba      	ldr	r2, [r7, #8]
 80153fe:	4613      	mov	r3, r2
 8015400:	005b      	lsls	r3, r3, #1
 8015402:	4413      	add	r3, r2
 8015404:	009b      	lsls	r3, r3, #2
 8015406:	3360      	adds	r3, #96	; 0x60
 8015408:	687a      	ldr	r2, [r7, #4]
 801540a:	4413      	add	r3, r2
 801540c:	3304      	adds	r3, #4
 801540e:	e007      	b.n	8015420 <_stm32_ed_get+0x5c>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8015410:	68ba      	ldr	r2, [r7, #8]
 8015412:	4613      	mov	r3, r2
 8015414:	005b      	lsls	r3, r3, #1
 8015416:	4413      	add	r3, r2
 8015418:	009b      	lsls	r3, r3, #2
 801541a:	687a      	ldr	r2, [r7, #4]
 801541c:	4413      	add	r3, r2
 801541e:	3304      	adds	r3, #4
}
 8015420:	4618      	mov	r0, r3
 8015422:	3714      	adds	r7, #20
 8015424:	46bd      	mov	sp, r7
 8015426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542a:	4770      	bx	lr

0801542c <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b084      	sub	sp, #16
 8015430:	af00      	add	r7, sp, #0
 8015432:	6078      	str	r0, [r7, #4]
 8015434:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 8015436:	6839      	ldr	r1, [r7, #0]
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f7ff ffc3 	bl	80153c4 <_stm32_ed_get>
 801543e:	60f8      	str	r0, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	685b      	ldr	r3, [r3, #4]
 8015444:	f003 0301 	and.w	r3, r3, #1
 8015448:	2b00      	cmp	r3, #0
 801544a:	d101      	bne.n	8015450 <_ux_dcd_stm32_endpoint_status+0x24>
        return(UX_ERROR);
 801544c:	23ff      	movs	r3, #255	; 0xff
 801544e:	e008      	b.n	8015462 <_ux_dcd_stm32_endpoint_status+0x36>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	685b      	ldr	r3, [r3, #4]
 8015454:	f003 0304 	and.w	r3, r3, #4
 8015458:	2b00      	cmp	r3, #0
 801545a:	d101      	bne.n	8015460 <_ux_dcd_stm32_endpoint_status+0x34>
        return(UX_FALSE);
 801545c:	2300      	movs	r3, #0
 801545e:	e000      	b.n	8015462 <_ux_dcd_stm32_endpoint_status+0x36>
    else
        return(UX_TRUE);
 8015460:	2301      	movs	r3, #1
}
 8015462:	4618      	mov	r0, r3
 8015464:	3710      	adds	r7, #16
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}

0801546a <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 801546a:	b480      	push	{r7}
 801546c:	b083      	sub	sp, #12
 801546e:	af00      	add	r7, sp, #0
 8015470:	6078      	str	r0, [r7, #4]
 8015472:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 8015474:	2300      	movs	r3, #0
}
 8015476:	4618      	mov	r0, r3
 8015478:	370c      	adds	r7, #12
 801547a:	46bd      	mov	sp, r7
 801547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015480:	4770      	bx	lr
	...

08015484 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b086      	sub	sp, #24
 8015488:	af00      	add	r7, sp, #0
 801548a:	60f8      	str	r0, [r7, #12]
 801548c:	60b9      	str	r1, [r7, #8]
 801548e:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d106      	bne.n	80154a6 <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 8015498:	2255      	movs	r2, #85	; 0x55
 801549a:	2102      	movs	r1, #2
 801549c:	2002      	movs	r0, #2
 801549e:	f7fe fbab 	bl	8013bf8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 80154a2:	2355      	movs	r3, #85	; 0x55
 80154a4:	e077      	b.n	8015596 <_ux_dcd_stm32_function+0x112>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	69db      	ldr	r3, [r3, #28]
 80154aa:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	3b0a      	subs	r3, #10
 80154b0:	2b0b      	cmp	r3, #11
 80154b2:	d867      	bhi.n	8015584 <_ux_dcd_stm32_function+0x100>
 80154b4:	a201      	add	r2, pc, #4	; (adr r2, 80154bc <_ux_dcd_stm32_function+0x38>)
 80154b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154ba:	bf00      	nop
 80154bc:	080154ed 	.word	0x080154ed
 80154c0:	08015585 	.word	0x08015585
 80154c4:	080154f9 	.word	0x080154f9
 80154c8:	08015505 	.word	0x08015505
 80154cc:	08015511 	.word	0x08015511
 80154d0:	0801551d 	.word	0x0801551d
 80154d4:	08015529 	.word	0x08015529
 80154d8:	08015541 	.word	0x08015541
 80154dc:	08015585 	.word	0x08015585
 80154e0:	08015559 	.word	0x08015559
 80154e4:	08015535 	.word	0x08015535
 80154e8:	08015577 	.word	0x08015577
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 80154ec:	6879      	ldr	r1, [r7, #4]
 80154ee:	6938      	ldr	r0, [r7, #16]
 80154f0:	f7ff ffbb 	bl	801546a <_ux_dcd_stm32_frame_number_get>
 80154f4:	6178      	str	r0, [r7, #20]
        break;
 80154f6:	e04d      	b.n	8015594 <_ux_dcd_stm32_function+0x110>
    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 80154f8:	6879      	ldr	r1, [r7, #4]
 80154fa:	6938      	ldr	r0, [r7, #16]
 80154fc:	f000 f956 	bl	80157ac <_ux_dcd_stm32_transfer_request>
 8015500:	6178      	str	r0, [r7, #20]
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 8015502:	e047      	b.n	8015594 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 8015504:	6879      	ldr	r1, [r7, #4]
 8015506:	6938      	ldr	r0, [r7, #16]
 8015508:	f000 f944 	bl	8015794 <_ux_dcd_stm32_transfer_abort>
 801550c:	6178      	str	r0, [r7, #20]
        break;
 801550e:	e041      	b.n	8015594 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 8015510:	6879      	ldr	r1, [r7, #4]
 8015512:	6938      	ldr	r0, [r7, #16]
 8015514:	f7ff fe8c 	bl	8015230 <_ux_dcd_stm32_endpoint_create>
 8015518:	6178      	str	r0, [r7, #20]
        break;
 801551a:	e03b      	b.n	8015594 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 801551c:	6879      	ldr	r1, [r7, #4]
 801551e:	6938      	ldr	r0, [r7, #16]
 8015520:	f7ff fed5 	bl	80152ce <_ux_dcd_stm32_endpoint_destroy>
 8015524:	6178      	str	r0, [r7, #20]
        break;
 8015526:	e035      	b.n	8015594 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8015528:	6879      	ldr	r1, [r7, #4]
 801552a:	6938      	ldr	r0, [r7, #16]
 801552c:	f7ff fee9 	bl	8015302 <_ux_dcd_stm32_endpoint_reset>
 8015530:	6178      	str	r0, [r7, #20]
        break;
 8015532:	e02f      	b.n	8015594 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 8015534:	6879      	ldr	r1, [r7, #4]
 8015536:	6938      	ldr	r0, [r7, #16]
 8015538:	f7ff ff24 	bl	8015384 <_ux_dcd_stm32_endpoint_stall>
 801553c:	6178      	str	r0, [r7, #20]
        break;
 801553e:	e029      	b.n	8015594 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 8015540:	693b      	ldr	r3, [r7, #16]
 8015542:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8015546:	687a      	ldr	r2, [r7, #4]
 8015548:	b2d2      	uxtb	r2, r2
 801554a:	4611      	mov	r1, r2
 801554c:	4618      	mov	r0, r3
 801554e:	f7f0 fcce 	bl	8005eee <HAL_PCD_SetAddress>
 8015552:	4603      	mov	r3, r0
 8015554:	617b      	str	r3, [r7, #20]
        break;
 8015556:	e01d      	b.n	8015594 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	2b0b      	cmp	r3, #11
 801555c:	d108      	bne.n	8015570 <_ux_dcd_stm32_function+0xec>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8015564:	4618      	mov	r0, r3
 8015566:	f7f0 fb79 	bl	8005c5c <HAL_PCD_Stop>
 801556a:	4603      	mov	r3, r0
 801556c:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 801556e:	e011      	b.n	8015594 <_ux_dcd_stm32_function+0x110>
          status = UX_SUCCESS;
 8015570:	2300      	movs	r3, #0
 8015572:	617b      	str	r3, [r7, #20]
        break;
 8015574:	e00e      	b.n	8015594 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	4619      	mov	r1, r3
 801557a:	6938      	ldr	r0, [r7, #16]
 801557c:	f7ff ff56 	bl	801542c <_ux_dcd_stm32_endpoint_status>
 8015580:	6178      	str	r0, [r7, #20]
        break;
 8015582:	e007      	b.n	8015594 <_ux_dcd_stm32_function+0x110>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 8015584:	2254      	movs	r2, #84	; 0x54
 8015586:	2102      	movs	r1, #2
 8015588:	2002      	movs	r0, #2
 801558a:	f7fe fb35 	bl	8013bf8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 801558e:	2354      	movs	r3, #84	; 0x54
 8015590:	617b      	str	r3, [r7, #20]
        break;
 8015592:	bf00      	nop
    }

    /* Return completion status.  */
    return(status);
 8015594:	697b      	ldr	r3, [r7, #20]
}
 8015596:	4618      	mov	r0, r3
 8015598:	3718      	adds	r7, #24
 801559a:	46bd      	mov	sp, r7
 801559c:	bd80      	pop	{r7, pc}
 801559e:	bf00      	nop

080155a0 <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b084      	sub	sp, #16
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
 80155a8:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80155aa:	4b13      	ldr	r3, [pc, #76]	; (80155f8 <_ux_dcd_stm32_initialize+0x58>)
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	2280      	movs	r2, #128	; 0x80
 80155b4:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 80155b6:	22c8      	movs	r2, #200	; 0xc8
 80155b8:	2100      	movs	r1, #0
 80155ba:	2000      	movs	r0, #0
 80155bc:	f7fe fc8c 	bl	8013ed8 <_ux_utility_memory_allocate>
 80155c0:	60b8      	str	r0, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d101      	bne.n	80155cc <_ux_dcd_stm32_initialize+0x2c>
        return(UX_MEMORY_INSUFFICIENT);
 80155c8:	2312      	movs	r3, #18
 80155ca:	e010      	b.n	80155ee <_ux_dcd_stm32_initialize+0x4e>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	68ba      	ldr	r2, [r7, #8]
 80155d0:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	68fa      	ldr	r2, [r7, #12]
 80155d6:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	4a08      	ldr	r2, [pc, #32]	; (80155fc <_ux_dcd_stm32_initialize+0x5c>)
 80155dc:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 80155de:	683a      	ldr	r2, [r7, #0]
 80155e0:	68bb      	ldr	r3, [r7, #8]
 80155e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	2201      	movs	r2, #1
 80155ea:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 80155ec:	2300      	movs	r3, #0
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3710      	adds	r7, #16
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
 80155f6:	bf00      	nop
 80155f8:	20003f18 	.word	0x20003f18
 80155fc:	08015485 	.word	0x08015485

08015600 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b086      	sub	sp, #24
 8015604:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015606:	4b61      	ldr	r3, [pc, #388]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	69db      	ldr	r3, [r3, #28]
 8015610:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015612:	4b5e      	ldr	r3, [pc, #376]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	3320      	adds	r3, #32
 8015618:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 801561a:	4b5c      	ldr	r3, [pc, #368]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8015622:	2b01      	cmp	r3, #1
 8015624:	d110      	bne.n	8015648 <_ux_dcd_stm32_initialize_complete+0x48>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8015626:	4b59      	ldr	r3, [pc, #356]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	4b58      	ldr	r3, [pc, #352]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
 8015632:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8015636:	4b55      	ldr	r3, [pc, #340]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015638:	681a      	ldr	r2, [r3, #0]
 801563a:	4b54      	ldr	r3, [pc, #336]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
 8015642:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8015646:	e02b      	b.n	80156a0 <_ux_dcd_stm32_initialize_complete+0xa0>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8015648:	4b50      	ldr	r3, [pc, #320]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	2200      	movs	r2, #0
 801564e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 8015652:	4b4e      	ldr	r3, [pc, #312]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 801565a:	2b01      	cmp	r3, #1
 801565c:	d110      	bne.n	8015680 <_ux_dcd_stm32_initialize_complete+0x80>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801565e:	4b4b      	ldr	r3, [pc, #300]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015660:	681a      	ldr	r2, [r3, #0]
 8015662:	4b4a      	ldr	r3, [pc, #296]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 801566a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801566e:	4b47      	ldr	r3, [pc, #284]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015670:	681a      	ldr	r2, [r3, #0]
 8015672:	4b46      	ldr	r3, [pc, #280]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
 801567a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 801567e:	e00f      	b.n	80156a0 <_ux_dcd_stm32_initialize_complete+0xa0>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 8015680:	4b42      	ldr	r3, [pc, #264]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015682:	681a      	ldr	r2, [r3, #0]
 8015684:	4b41      	ldr	r3, [pc, #260]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
 801568c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 8015690:	4b3e      	ldr	r3, [pc, #248]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015692:	681a      	ldr	r2, [r3, #0]
 8015694:	4b3d      	ldr	r3, [pc, #244]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
 801569c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 80156a0:	4b3a      	ldr	r3, [pc, #232]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80156a8:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 80156ae:	220e      	movs	r2, #14
 80156b0:	4937      	ldr	r1, [pc, #220]	; (8015790 <_ux_dcd_stm32_initialize_complete+0x190>)
 80156b2:	68b8      	ldr	r0, [r7, #8]
 80156b4:	f7fe fb8e 	bl	8013dd4 <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	336c      	adds	r3, #108	; 0x6c
 80156bc:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80156c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	689b      	ldr	r3, [r3, #8]
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 80156dc:	68fa      	ldr	r2, [r7, #12]
 80156de:	69d2      	ldr	r2, [r2, #28]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 80156e0:	61da      	str	r2, [r3, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	69da      	ldr	r2, [r3, #28]
    transfer_request -> ux_slave_transfer_request_requested_length =
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 80156f8:	68fa      	ldr	r2, [r7, #12]
 80156fa:	323c      	adds	r2, #60	; 0x3c
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 80156fc:	210e      	movs	r1, #14
 80156fe:	6978      	ldr	r0, [r7, #20]
 8015700:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8015708:	2100      	movs	r1, #0
 801570a:	4618      	mov	r0, r3
 801570c:	f7f0 fe00 	bl	8006310 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8015710:	693b      	ldr	r3, [r7, #16]
 8015712:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	69db      	ldr	r3, [r3, #28]
 801571a:	b29a      	uxth	r2, r3
 801571c:	2300      	movs	r3, #0
 801571e:	2100      	movs	r1, #0
 8015720:	f7f0 fc0a 	bl	8005f38 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 8015724:	693b      	ldr	r3, [r7, #16]
 8015726:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801572a:	2180      	movs	r1, #128	; 0x80
 801572c:	4618      	mov	r0, r3
 801572e:	f7f0 fdef 	bl	8006310 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8015732:	693b      	ldr	r3, [r7, #16]
 8015734:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	69db      	ldr	r3, [r3, #28]
 801573c:	b29a      	uxth	r2, r3
 801573e:	2300      	movs	r3, #0
 8015740:	2180      	movs	r1, #128	; 0x80
 8015742:	f7f0 fbf9 	bl	8005f38 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	2200      	movs	r2, #0
 801574a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2201      	movs	r2, #1
 8015750:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	2201      	movs	r2, #1
 8015756:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	2208      	movs	r2, #8
 801575c:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	2208      	movs	r2, #8
 8015762:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2200      	movs	r2, #0
 8015768:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801576a:	4b08      	ldr	r3, [pc, #32]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8015772:	2b00      	cmp	r3, #0
 8015774:	d005      	beq.n	8015782 <_ux_dcd_stm32_initialize_complete+0x182>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8015776:	4b05      	ldr	r3, [pc, #20]	; (801578c <_ux_dcd_stm32_initialize_complete+0x18c>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 801577e:	2001      	movs	r0, #1
 8015780:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 8015782:	2300      	movs	r3, #0
}
 8015784:	4618      	mov	r0, r3
 8015786:	3718      	adds	r7, #24
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}
 801578c:	20003f18 	.word	0x20003f18
 8015790:	20000030 	.word	0x20000030

08015794 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8015794:	b480      	push	{r7}
 8015796:	b083      	sub	sp, #12
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	6039      	str	r1, [r7, #0]

    /* No semaphore put here since it's already done in stack.  */
#endif /* USBD_HAL_TRANSFER_ABORT_NOT_SUPPORTED */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 801579e:	2300      	movs	r3, #0
}
 80157a0:	4618      	mov	r0, r3
 80157a2:	370c      	adds	r7, #12
 80157a4:	46bd      	mov	sp, r7
 80157a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157aa:	4770      	bx	lr

080157ac <_ux_dcd_stm32_transfer_request>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b084      	sub	sp, #16
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
 80157b4:	6039      	str	r1, [r7, #0]
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	689b      	ldr	r3, [r3, #8]
 80157ba:	60fb      	str	r3, [r7, #12]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157c0:	2b03      	cmp	r3, #3
 80157c2:	d12d      	bne.n	8015820 <_ux_dcd_stm32_transfer_request+0x74>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 80157ce:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 80157d0:	683b      	ldr	r3, [r7, #0]
 80157d2:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	695b      	ldr	r3, [r3, #20]
 80157d8:	f7f0 fcb1 	bl	800613e <HAL_PCD_EP_Transmit>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	695b      	ldr	r3, [r3, #20]
 80157e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d045      	beq.n	8015874 <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 80157e8:	683b      	ldr	r3, [r7, #0]
 80157ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 80157f2:	4619      	mov	r1, r3
 80157f4:	4610      	mov	r0, r2
 80157f6:	f7fe fe1f 	bl	8014438 <_ux_utility_semaphore_get>
 80157fa:	60b8      	str	r0, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d001      	beq.n	8015806 <_ux_dcd_stm32_transfer_request+0x5a>
                return(status);
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	e037      	b.n	8015876 <_ux_dcd_stm32_transfer_request+0xca>

            transfer_request -> ux_slave_transfer_request_actual_length = transfer_request->ux_slave_transfer_request_requested_length;
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	695a      	ldr	r2, [r3, #20]
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	619a      	str	r2, [r3, #24]

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 801580e:	683b      	ldr	r3, [r7, #0]
 8015810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015812:	2b00      	cmp	r3, #0
 8015814:	d002      	beq.n	801581c <_ux_dcd_stm32_transfer_request+0x70>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801581a:	e02c      	b.n	8015876 <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 801581c:	2300      	movs	r3, #0
 801581e:	e02a      	b.n	8015876 <_ux_dcd_stm32_transfer_request+0xca>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801582a:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	695b      	ldr	r3, [r3, #20]
 8015834:	f7f0 fc2e 	bl	8006094 <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	695b      	ldr	r3, [r3, #20]
 801583c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015840:	2b00      	cmp	r3, #0
 8015842:	d017      	beq.n	8015874 <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801584e:	4619      	mov	r1, r3
 8015850:	4610      	mov	r0, r2
 8015852:	f7fe fdf1 	bl	8014438 <_ux_utility_semaphore_get>
 8015856:	60b8      	str	r0, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d001      	beq.n	8015862 <_ux_dcd_stm32_transfer_request+0xb6>
                return(status);
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	e009      	b.n	8015876 <_ux_dcd_stm32_transfer_request+0xca>

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015866:	2b00      	cmp	r3, #0
 8015868:	d002      	beq.n	8015870 <_ux_dcd_stm32_transfer_request+0xc4>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801586e:	e002      	b.n	8015876 <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 8015870:	2300      	movs	r3, #0
 8015872:	e000      	b.n	8015876 <_ux_dcd_stm32_transfer_request+0xca>
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 8015874:	2300      	movs	r3, #0
}
 8015876:	4618      	mov	r0, r3
 8015878:	3710      	adds	r7, #16
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
	...

08015880 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param  memory_ptr: memory pointer
  * @retval status
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 8015880:	b590      	push	{r4, r7, lr}
 8015882:	b097      	sub	sp, #92	; 0x5c
 8015884:	af08      	add	r7, sp, #32
 8015886:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 8015888:	2300      	movs	r3, #0
 801588a:	637b      	str	r3, [r7, #52]	; 0x34
  ULONG string_framework_length;
  ULONG language_id_framework_length;
  UCHAR *string_framework;
  UCHAR *language_id_framework;
  UCHAR *pointer;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	633b      	str	r3, [r7, #48]	; 0x30

  /* USER CODE BEGIN MX_USBX_Device_Init0 */
  /* USER CODE END MX_USBX_Device_Init0 */

  /* Allocate the stack for USBX Memory */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8015890:	f107 010c 	add.w	r1, r7, #12
 8015894:	2300      	movs	r3, #0
 8015896:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 801589a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801589c:	f7fb fdbe 	bl	801141c <_txe_byte_allocate>
 80158a0:	4603      	mov	r3, r0
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d001      	beq.n	80158aa <MX_USBX_Device_Init+0x2a>
                       USBX_DEVICE_MEMORY_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_ALLOCATE_STACK_ERORR */
	return TX_POOL_ERROR;
 80158a6:	2302      	movs	r3, #2
 80158a8:	e0e3      	b.n	8015a72 <MX_USBX_Device_Init+0x1f2>
    /* USER CODE END USBX_ALLOCATE_STACK_ERORR */
  }

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 80158aa:	68f8      	ldr	r0, [r7, #12]
 80158ac:	2300      	movs	r3, #0
 80158ae:	2200      	movs	r2, #0
 80158b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80158b4:	f7fe f9c2 	bl	8013c3c <_ux_system_initialize>
 80158b8:	4603      	mov	r3, r0
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d001      	beq.n	80158c2 <MX_USBX_Device_Init+0x42>
  {
    /* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERORR */
	return UX_ERROR;
 80158be:	23ff      	movs	r3, #255	; 0xff
 80158c0:	e0d7      	b.n	8015a72 <MX_USBX_Device_Init+0x1f2>
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERORR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 80158c2:	f107 031c 	add.w	r3, r7, #28
 80158c6:	4619      	mov	r1, r3
 80158c8:	2001      	movs	r0, #1
 80158ca:	f000 fbe3 	bl	8016094 <USBD_Get_Device_Framework_Speed>
 80158ce:	62f8      	str	r0, [r7, #44]	; 0x2c
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 80158d0:	f107 0318 	add.w	r3, r7, #24
 80158d4:	4619      	mov	r1, r3
 80158d6:	2000      	movs	r0, #0
 80158d8:	f000 fbdc 	bl	8016094 <USBD_Get_Device_Framework_Speed>
 80158dc:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 80158de:	f107 0314 	add.w	r3, r7, #20
 80158e2:	4618      	mov	r0, r3
 80158e4:	f000 fc18 	bl	8016118 <USBD_Get_String_Framework>
 80158e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 80158ea:	f107 0310 	add.w	r3, r7, #16
 80158ee:	4618      	mov	r0, r3
 80158f0:	f000 fc96 	bl	8016220 <USBD_Get_Language_Id_Framework>
 80158f4:	6238      	str	r0, [r7, #32]

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 80158f6:	69f9      	ldr	r1, [r7, #28]
 80158f8:	69b8      	ldr	r0, [r7, #24]
 80158fa:	697b      	ldr	r3, [r7, #20]
 80158fc:	693a      	ldr	r2, [r7, #16]
 80158fe:	2400      	movs	r4, #0
 8015900:	9404      	str	r4, [sp, #16]
 8015902:	9203      	str	r2, [sp, #12]
 8015904:	6a3a      	ldr	r2, [r7, #32]
 8015906:	9202      	str	r2, [sp, #8]
 8015908:	9301      	str	r3, [sp, #4]
 801590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801590c:	9300      	str	r3, [sp, #0]
 801590e:	4603      	mov	r3, r0
 8015910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015914:	f7fd fce4 	bl	80132e0 <_ux_device_stack_initialize>
 8015918:	4603      	mov	r3, r0
 801591a:	2b00      	cmp	r3, #0
 801591c:	d001      	beq.n	8015922 <MX_USBX_Device_Init+0xa2>
                                 language_id_framework,
                                 language_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERORR */
	return UX_ERROR;
 801591e:	23ff      	movs	r3, #255	; 0xff
 8015920:	e0a7      	b.n	8015a72 <MX_USBX_Device_Init+0x1f2>
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERORR */
  }

  /* Initialize the cdc acm class parameters for the device */
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
 8015922:	4b56      	ldr	r3, [pc, #344]	; (8015a7c <MX_USBX_Device_Init+0x1fc>)
 8015924:	4a56      	ldr	r2, [pc, #344]	; (8015a80 <MX_USBX_Device_Init+0x200>)
 8015926:	601a      	str	r2, [r3, #0]
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 8015928:	4b54      	ldr	r3, [pc, #336]	; (8015a7c <MX_USBX_Device_Init+0x1fc>)
 801592a:	4a56      	ldr	r2, [pc, #344]	; (8015a84 <MX_USBX_Device_Init+0x204>)
 801592c:	605a      	str	r2, [r3, #4]
  cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 801592e:	4b53      	ldr	r3, [pc, #332]	; (8015a7c <MX_USBX_Device_Init+0x1fc>)
 8015930:	4a55      	ldr	r2, [pc, #340]	; (8015a88 <MX_USBX_Device_Init+0x208>)
 8015932:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN CDC_ACM_PARAMETER */
  /* USER CODE END CDC_ACM_PARAMETER */

  /* Get cdc acm configuration number */
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 8015934:	2100      	movs	r1, #0
 8015936:	2002      	movs	r0, #2
 8015938:	f000 fcd2 	bl	80162e0 <USBD_Get_Configuration_Number>
 801593c:	4603      	mov	r3, r0
 801593e:	461a      	mov	r2, r3
 8015940:	4b52      	ldr	r3, [pc, #328]	; (8015a8c <MX_USBX_Device_Init+0x20c>)
 8015942:	601a      	str	r2, [r3, #0]

  /* Find cdc acm interface number */
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 8015944:	2100      	movs	r1, #0
 8015946:	2002      	movs	r0, #2
 8015948:	f000 fc8c 	bl	8016264 <USBD_Get_Interface_Number>
 801594c:	4603      	mov	r3, r0
 801594e:	461a      	mov	r2, r3
 8015950:	4b4f      	ldr	r3, [pc, #316]	; (8015a90 <MX_USBX_Device_Init+0x210>)
 8015952:	601a      	str	r2, [r3, #0]

  /* Initialize the device cdc acm class */
  if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 8015954:	4b4d      	ldr	r3, [pc, #308]	; (8015a8c <MX_USBX_Device_Init+0x20c>)
 8015956:	681a      	ldr	r2, [r3, #0]
 8015958:	4b4d      	ldr	r3, [pc, #308]	; (8015a90 <MX_USBX_Device_Init+0x210>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	4947      	ldr	r1, [pc, #284]	; (8015a7c <MX_USBX_Device_Init+0x1fc>)
 801595e:	9100      	str	r1, [sp, #0]
 8015960:	494c      	ldr	r1, [pc, #304]	; (8015a94 <MX_USBX_Device_Init+0x214>)
 8015962:	484d      	ldr	r0, [pc, #308]	; (8015a98 <MX_USBX_Device_Init+0x218>)
 8015964:	f7fc fdb6 	bl	80124d4 <_ux_device_stack_class_register>
 8015968:	4603      	mov	r3, r0
 801596a:	2b00      	cmp	r3, #0
 801596c:	d001      	beq.n	8015972 <MX_USBX_Device_Init+0xf2>
                                     cdc_acm_configuration_number,
                                     cdc_acm_interface_number,
                                     &cdc_acm_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_CDC_ACM_REGISTER_ERORR */
	return UX_ERROR;
 801596e:	23ff      	movs	r3, #255	; 0xff
 8015970:	e07f      	b.n	8015a72 <MX_USBX_Device_Init+0x1f2>
    /* USER CODE END USBX_DEVICE_CDC_ACM_REGISTER_ERORR */
  }

  /* Allocate the stack for device application main thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE,
 8015972:	f107 010c 	add.w	r1, r7, #12
 8015976:	2300      	movs	r3, #0
 8015978:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801597c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801597e:	f7fb fd4d 	bl	801141c <_txe_byte_allocate>
 8015982:	4603      	mov	r3, r0
 8015984:	2b00      	cmp	r3, #0
 8015986:	d001      	beq.n	801598c <MX_USBX_Device_Init+0x10c>
                       TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_ALLOCATE_STACK_ERORR */
	return TX_POOL_ERROR;
 8015988:	2302      	movs	r3, #2
 801598a:	e072      	b.n	8015a72 <MX_USBX_Device_Init+0x1f2>
    /* USER CODE END MAIN_THREAD_ALLOCATE_STACK_ERORR */
  }

  /* Create the device application main thread */
  if (tx_thread_create(&ux_device_app_thread, UX_DEVICE_APP_THREAD_NAME, app_ux_device_thread_entry,
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	22b0      	movs	r2, #176	; 0xb0
 8015990:	9206      	str	r2, [sp, #24]
 8015992:	2201      	movs	r2, #1
 8015994:	9205      	str	r2, [sp, #20]
 8015996:	2200      	movs	r2, #0
 8015998:	9204      	str	r2, [sp, #16]
 801599a:	220a      	movs	r2, #10
 801599c:	9203      	str	r2, [sp, #12]
 801599e:	220a      	movs	r2, #10
 80159a0:	9202      	str	r2, [sp, #8]
 80159a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80159a6:	9201      	str	r2, [sp, #4]
 80159a8:	9300      	str	r3, [sp, #0]
 80159aa:	2300      	movs	r3, #0
 80159ac:	4a3b      	ldr	r2, [pc, #236]	; (8015a9c <MX_USBX_Device_Init+0x21c>)
 80159ae:	493c      	ldr	r1, [pc, #240]	; (8015aa0 <MX_USBX_Device_Init+0x220>)
 80159b0:	483c      	ldr	r0, [pc, #240]	; (8015aa4 <MX_USBX_Device_Init+0x224>)
 80159b2:	f7fc fa01 	bl	8011db8 <_txe_thread_create>
 80159b6:	4603      	mov	r3, r0
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d001      	beq.n	80159c0 <MX_USBX_Device_Init+0x140>
                       0, pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, UX_DEVICE_APP_THREAD_PRIO,
                       UX_DEVICE_APP_THREAD_PREEMPTION_THRESHOLD, UX_DEVICE_APP_THREAD_TIME_SLICE,
                       UX_DEVICE_APP_THREAD_START_OPTION) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_CREATE_ERORR */
	  return TX_THREAD_ERROR;
 80159bc:	230e      	movs	r3, #14
 80159be:	e058      	b.n	8015a72 <MX_USBX_Device_Init+0x1f2>
  }

  /* USER CODE BEGIN MX_USBX_Device_Init1 */

  /* Allocate the stack for usbx cdc acm read thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, 1024, TX_NO_WAIT) != TX_SUCCESS)
 80159c0:	f107 010c 	add.w	r1, r7, #12
 80159c4:	2300      	movs	r3, #0
 80159c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80159ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159cc:	f7fb fd26 	bl	801141c <_txe_byte_allocate>
 80159d0:	4603      	mov	r3, r0
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d001      	beq.n	80159da <MX_USBX_Device_Init+0x15a>
  {
    return TX_POOL_ERROR;
 80159d6:	2302      	movs	r3, #2
 80159d8:	e04b      	b.n	8015a72 <MX_USBX_Device_Init+0x1f2>
  }

  /* Create the usbx cdc acm read thread */
  if (tx_thread_create(&ux_cdc_read_thread, "cdc_acm_read_usbx_app_thread_entry",
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	22b0      	movs	r2, #176	; 0xb0
 80159de:	9206      	str	r2, [sp, #24]
 80159e0:	2201      	movs	r2, #1
 80159e2:	9205      	str	r2, [sp, #20]
 80159e4:	2200      	movs	r2, #0
 80159e6:	9204      	str	r2, [sp, #16]
 80159e8:	2214      	movs	r2, #20
 80159ea:	9203      	str	r2, [sp, #12]
 80159ec:	2214      	movs	r2, #20
 80159ee:	9202      	str	r2, [sp, #8]
 80159f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80159f4:	9201      	str	r2, [sp, #4]
 80159f6:	9300      	str	r3, [sp, #0]
 80159f8:	2301      	movs	r3, #1
 80159fa:	4a2b      	ldr	r2, [pc, #172]	; (8015aa8 <MX_USBX_Device_Init+0x228>)
 80159fc:	492b      	ldr	r1, [pc, #172]	; (8015aac <MX_USBX_Device_Init+0x22c>)
 80159fe:	482c      	ldr	r0, [pc, #176]	; (8015ab0 <MX_USBX_Device_Init+0x230>)
 8015a00:	f7fc f9da 	bl	8011db8 <_txe_thread_create>
 8015a04:	4603      	mov	r3, r0
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d001      	beq.n	8015a0e <MX_USBX_Device_Init+0x18e>
                       usbx_cdc_acm_read_thread_entry, 1, pointer,
                       1024, 20, 20, TX_NO_TIME_SLICE,
                       TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 8015a0a:	230e      	movs	r3, #14
 8015a0c:	e031      	b.n	8015a72 <MX_USBX_Device_Init+0x1f2>
  }

  /* Allocate the stack for usbx cdc acm write thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, 1024, TX_NO_WAIT) != TX_SUCCESS)
 8015a0e:	f107 010c 	add.w	r1, r7, #12
 8015a12:	2300      	movs	r3, #0
 8015a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a1a:	f7fb fcff 	bl	801141c <_txe_byte_allocate>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d001      	beq.n	8015a28 <MX_USBX_Device_Init+0x1a8>
  {
    return TX_POOL_ERROR;
 8015a24:	2302      	movs	r3, #2
 8015a26:	e024      	b.n	8015a72 <MX_USBX_Device_Init+0x1f2>
  }

  /* Create the usbx_cdc_acm_write_thread_entry thread */
  if (tx_thread_create(&ux_cdc_write_thread, "cdc_acm_write_usbx_app_thread_entry",
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	22b0      	movs	r2, #176	; 0xb0
 8015a2c:	9206      	str	r2, [sp, #24]
 8015a2e:	2201      	movs	r2, #1
 8015a30:	9205      	str	r2, [sp, #20]
 8015a32:	2200      	movs	r2, #0
 8015a34:	9204      	str	r2, [sp, #16]
 8015a36:	2214      	movs	r2, #20
 8015a38:	9203      	str	r2, [sp, #12]
 8015a3a:	2214      	movs	r2, #20
 8015a3c:	9202      	str	r2, [sp, #8]
 8015a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015a42:	9201      	str	r2, [sp, #4]
 8015a44:	9300      	str	r3, [sp, #0]
 8015a46:	2301      	movs	r3, #1
 8015a48:	4a1a      	ldr	r2, [pc, #104]	; (8015ab4 <MX_USBX_Device_Init+0x234>)
 8015a4a:	491b      	ldr	r1, [pc, #108]	; (8015ab8 <MX_USBX_Device_Init+0x238>)
 8015a4c:	481b      	ldr	r0, [pc, #108]	; (8015abc <MX_USBX_Device_Init+0x23c>)
 8015a4e:	f7fc f9b3 	bl	8011db8 <_txe_thread_create>
 8015a52:	4603      	mov	r3, r0
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d001      	beq.n	8015a5c <MX_USBX_Device_Init+0x1dc>
                       usbx_cdc_acm_write_thread_entry, 1, pointer,
                       1024, 20, 20, TX_NO_TIME_SLICE,
                       TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 8015a58:	230e      	movs	r3, #14
 8015a5a:	e00a      	b.n	8015a72 <MX_USBX_Device_Init+0x1f2>
  }

  /* Create the event flags group */
  if (tx_event_flags_create(&EventFlag, "Event Flag") != TX_SUCCESS)
 8015a5c:	2224      	movs	r2, #36	; 0x24
 8015a5e:	4918      	ldr	r1, [pc, #96]	; (8015ac0 <MX_USBX_Device_Init+0x240>)
 8015a60:	4818      	ldr	r0, [pc, #96]	; (8015ac4 <MX_USBX_Device_Init+0x244>)
 8015a62:	f7fb fdef 	bl	8011644 <_txe_event_flags_create>
 8015a66:	4603      	mov	r3, r0
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d001      	beq.n	8015a70 <MX_USBX_Device_Init+0x1f0>
  {
    return TX_GROUP_ERROR;
 8015a6c:	2306      	movs	r3, #6
 8015a6e:	e000      	b.n	8015a72 <MX_USBX_Device_Init+0x1f2>
  }

  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 8015a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	373c      	adds	r7, #60	; 0x3c
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd90      	pop	{r4, r7, pc}
 8015a7a:	bf00      	nop
 8015a7c:	20003f28 	.word	0x20003f28
 8015a80:	08015b61 	.word	0x08015b61
 8015a84:	08015c0d 	.word	0x08015c0d
 8015a88:	08015c35 	.word	0x08015c35
 8015a8c:	20003f24 	.word	0x20003f24
 8015a90:	20003f20 	.word	0x20003f20
 8015a94:	08014771 	.word	0x08014771
 8015a98:	20000010 	.word	0x20000010
 8015a9c:	08015ac9 	.word	0x08015ac9
 8015aa0:	08016e5c 	.word	0x08016e5c
 8015aa4:	20003f34 	.word	0x20003f34
 8015aa8:	08015d79 	.word	0x08015d79
 8015aac:	08016e78 	.word	0x08016e78
 8015ab0:	20003fe4 	.word	0x20003fe4
 8015ab4:	08015e15 	.word	0x08015e15
 8015ab8:	08016e9c 	.word	0x08016e9c
 8015abc:	20004094 	.word	0x20004094
 8015ac0:	08016ec0 	.word	0x08016ec0
 8015ac4:	20004144 	.word	0x20004144

08015ac8 <app_ux_device_thread_entry>:
  * @brief  Function implementing app_ux_device_thread_entry.
  * @param  thread_input: User thread input parameter.
  * @retval none
  */
static VOID app_ux_device_thread_entry(ULONG thread_input)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_ux_device_thread_entry */

	  /* Initialisation of USB device */
	  USBX_APP_Device_Init();
 8015ad0:	f000 f804 	bl	8015adc <USBX_APP_Device_Init>

  /* USER CODE END app_ux_device_thread_entry */
}
 8015ad4:	bf00      	nop
 8015ad6:	3708      	adds	r7, #8
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bd80      	pop	{r7, pc}

08015adc <USBX_APP_Device_Init>:
  *         Initialisation of USB device.
  * @param  none
  * @retval none
  */
VOID USBX_APP_Device_Init(VOID)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment_0 */

  /* USER CODE END USB_Device_Init_PreTreatment_0 */

  /* USB_FS init function */
  MX_USB_PCD_Init();
 8015ae0:	f7eb fe2a 	bl	8001738 <MX_USB_PCD_Init>
	 * BTABLE uses the first 20 bytes of the PMA when the USB peripheral is configured
	 * for 3 end points (EP0, EP1, EP2). For more info, see RM0440 p2008.
	 */

  /* USER CODE BEGIN USB_Device_Init_PreTreatment_1 */
  HAL_PCDEx_PMAConfig(&hpcd_USB_FS, 0x00, PCD_SNG_BUF, 0x14);
 8015ae4:	2314      	movs	r3, #20
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	2100      	movs	r1, #0
 8015aea:	4813      	ldr	r0, [pc, #76]	; (8015b38 <USBX_APP_Device_Init+0x5c>)
 8015aec:	f7f1 fca4 	bl	8007438 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_FS, 0x80, PCD_SNG_BUF, 0x54);
 8015af0:	2354      	movs	r3, #84	; 0x54
 8015af2:	2200      	movs	r2, #0
 8015af4:	2180      	movs	r1, #128	; 0x80
 8015af6:	4810      	ldr	r0, [pc, #64]	; (8015b38 <USBX_APP_Device_Init+0x5c>)
 8015af8:	f7f1 fc9e 	bl	8007438 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig(&hpcd_USB_FS, 0x81, PCD_SNG_BUF, 0x94);
 8015afc:	2394      	movs	r3, #148	; 0x94
 8015afe:	2200      	movs	r2, #0
 8015b00:	2181      	movs	r1, #129	; 0x81
 8015b02:	480d      	ldr	r0, [pc, #52]	; (8015b38 <USBX_APP_Device_Init+0x5c>)
 8015b04:	f7f1 fc98 	bl	8007438 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_FS, 0x01, PCD_SNG_BUF, 0xD4);
 8015b08:	23d4      	movs	r3, #212	; 0xd4
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	2101      	movs	r1, #1
 8015b0e:	480a      	ldr	r0, [pc, #40]	; (8015b38 <USBX_APP_Device_Init+0x5c>)
 8015b10:	f7f1 fc92 	bl	8007438 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_FS, 0x82, PCD_SNG_BUF, 0x114);
 8015b14:	f44f 738a 	mov.w	r3, #276	; 0x114
 8015b18:	2200      	movs	r2, #0
 8015b1a:	2182      	movs	r1, #130	; 0x82
 8015b1c:	4806      	ldr	r0, [pc, #24]	; (8015b38 <USBX_APP_Device_Init+0x5c>)
 8015b1e:	f7f1 fc8b 	bl	8007438 <HAL_PCDEx_PMAConfig>
  /* USER CODE END USB_Device_Init_PreTreatment_1 */

  /* Initialise and link controller HAL driver */
  ux_dcd_stm32_initialize((ULONG)USB, (ULONG)&hpcd_USB_FS);
 8015b22:	4b05      	ldr	r3, [pc, #20]	; (8015b38 <USBX_APP_Device_Init+0x5c>)
 8015b24:	4619      	mov	r1, r3
 8015b26:	4805      	ldr	r0, [pc, #20]	; (8015b3c <USBX_APP_Device_Init+0x60>)
 8015b28:	f7ff fd3a 	bl	80155a0 <_ux_dcd_stm32_initialize>

  /* Start the USB device */
  HAL_PCD_Start(&hpcd_USB_FS);
 8015b2c:	4802      	ldr	r0, [pc, #8]	; (8015b38 <USBX_APP_Device_Init+0x5c>)
 8015b2e:	f7f0 f873 	bl	8005c18 <HAL_PCD_Start>

  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8015b32:	bf00      	nop
 8015b34:	bd80      	pop	{r7, pc}
 8015b36:	bf00      	nop
 8015b38:	20003590 	.word	0x20003590
 8015b3c:	40005c00 	.word	0x40005c00

08015b40 <USBX_APP_UART_Init>:
  *         Initialisation of UART.
  * @param  huart: Pointer to UART handler
  * @retval none
  */
VOID USBX_APP_UART_Init(UART_HandleTypeDef **huart)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b082      	sub	sp, #8
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBX_APP_UART_Init */

  MX_USART2_UART_Init();
 8015b48:	f7eb fdaa 	bl	80016a0 <MX_USART2_UART_Init>

  *huart = &huart2;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	4a03      	ldr	r2, [pc, #12]	; (8015b5c <USBX_APP_UART_Init+0x1c>)
 8015b50:	601a      	str	r2, [r3, #0]

  /* USER CODE END USBX_APP_UART_Init */
}
 8015b52:	bf00      	nop
 8015b54:	3708      	adds	r7, #8
 8015b56:	46bd      	mov	sp, r7
 8015b58:	bd80      	pop	{r7, pc}
 8015b5a:	bf00      	nop
 8015b5c:	200034a0 	.word	0x200034a0

08015b60 <USBD_CDC_ACM_Activate>:
 *         This function is called when insertion of a CDC ACM device.
 * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
 * @retval none
 */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b082      	sub	sp, #8
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_CDC_ACM_Activate */


	/* Save the CDC instance */
	cdc_acm = (UX_SLAVE_CLASS_CDC_ACM*) cdc_acm_instance;
 8015b68:	4a24      	ldr	r2, [pc, #144]	; (8015bfc <USBD_CDC_ACM_Activate+0x9c>)
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	6013      	str	r3, [r2, #0]

	/* Configure the UART peripheral */
	USBX_APP_UART_Init(&uart_handler);
 8015b6e:	4824      	ldr	r0, [pc, #144]	; (8015c00 <USBD_CDC_ACM_Activate+0xa0>)
 8015b70:	f7ff ffe6 	bl	8015b40 <USBX_APP_UART_Init>

	/* Get default UART parameters */
	CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate = uart_handler->Init.BaudRate;
 8015b74:	4b22      	ldr	r3, [pc, #136]	; (8015c00 <USBD_CDC_ACM_Activate+0xa0>)
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	685b      	ldr	r3, [r3, #4]
 8015b7a:	4a22      	ldr	r2, [pc, #136]	; (8015c04 <USBD_CDC_ACM_Activate+0xa4>)
 8015b7c:	6013      	str	r3, [r2, #0]

	/* Set the UART data type : only 8bits and 9bits are supported */
	switch (uart_handler->Init.WordLength)
 8015b7e:	4b20      	ldr	r3, [pc, #128]	; (8015c00 <USBD_CDC_ACM_Activate+0xa0>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	689b      	ldr	r3, [r3, #8]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d003      	beq.n	8015b90 <USBD_CDC_ACM_Activate+0x30>
 8015b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b8c:	d004      	beq.n	8015b98 <USBD_CDC_ACM_Activate+0x38>
 8015b8e:	e007      	b.n	8015ba0 <USBD_CDC_ACM_Activate+0x40>
	{
	case UART_WORDLENGTH_8B:
	{
		/* Set UART data bit to 8 */
		CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_data_bit = VCP_WORDLENGTH8;
 8015b90:	4b1c      	ldr	r3, [pc, #112]	; (8015c04 <USBD_CDC_ACM_Activate+0xa4>)
 8015b92:	2208      	movs	r2, #8
 8015b94:	719a      	strb	r2, [r3, #6]
		break;
 8015b96:	e007      	b.n	8015ba8 <USBD_CDC_ACM_Activate+0x48>
	}

	case UART_WORDLENGTH_9B:
	{
		/* Set UART data bit to 9 */
		CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_data_bit = VCP_WORDLENGTH9;
 8015b98:	4b1a      	ldr	r3, [pc, #104]	; (8015c04 <USBD_CDC_ACM_Activate+0xa4>)
 8015b9a:	2209      	movs	r2, #9
 8015b9c:	719a      	strb	r2, [r3, #6]
		break;
 8015b9e:	e003      	b.n	8015ba8 <USBD_CDC_ACM_Activate+0x48>
	}

	default :
	{
		/* By default set UART data bit to 8 */
		CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_data_bit = VCP_WORDLENGTH8;
 8015ba0:	4b18      	ldr	r3, [pc, #96]	; (8015c04 <USBD_CDC_ACM_Activate+0xa4>)
 8015ba2:	2208      	movs	r2, #8
 8015ba4:	719a      	strb	r2, [r3, #6]
		break;
 8015ba6:	bf00      	nop
	}
	}

	/* Get UART Parity */
	CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_parity = uart_handler->Init.Parity;
 8015ba8:	4b15      	ldr	r3, [pc, #84]	; (8015c00 <USBD_CDC_ACM_Activate+0xa0>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	691b      	ldr	r3, [r3, #16]
 8015bae:	b2da      	uxtb	r2, r3
 8015bb0:	4b14      	ldr	r3, [pc, #80]	; (8015c04 <USBD_CDC_ACM_Activate+0xa4>)
 8015bb2:	715a      	strb	r2, [r3, #5]

	/* Get UART StopBits */
	CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_stop_bit = uart_handler->Init.StopBits;
 8015bb4:	4b12      	ldr	r3, [pc, #72]	; (8015c00 <USBD_CDC_ACM_Activate+0xa0>)
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	68db      	ldr	r3, [r3, #12]
 8015bba:	b2da      	uxtb	r2, r3
 8015bbc:	4b11      	ldr	r3, [pc, #68]	; (8015c04 <USBD_CDC_ACM_Activate+0xa4>)
 8015bbe:	711a      	strb	r2, [r3, #4]

	/* Set device class_cdc_acm with default parameters */
	if (ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING,
 8015bc0:	4b0e      	ldr	r3, [pc, #56]	; (8015bfc <USBD_CDC_ACM_Activate+0x9c>)
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	4a0f      	ldr	r2, [pc, #60]	; (8015c04 <USBD_CDC_ACM_Activate+0xa4>)
 8015bc6:	2101      	movs	r1, #1
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f7fe fe77 	bl	80148bc <_ux_device_class_cdc_acm_ioctl>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d001      	beq.n	8015bd8 <USBD_CDC_ACM_Activate+0x78>
			&CDC_VCP_LineCoding) != UX_SUCCESS)
	{
		Error_Handler();
 8015bd4:	f7eb ff4a 	bl	8001a6c <Error_Handler>
	}

	/* Receive an amount of data in interrupt mode */
	if (HAL_UART_Receive_IT(uart_handler, (uint8_t *)UserTxBufferFS, 1) != HAL_OK)
 8015bd8:	4b09      	ldr	r3, [pc, #36]	; (8015c00 <USBD_CDC_ACM_Activate+0xa0>)
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	2201      	movs	r2, #1
 8015bde:	490a      	ldr	r1, [pc, #40]	; (8015c08 <USBD_CDC_ACM_Activate+0xa8>)
 8015be0:	4618      	mov	r0, r3
 8015be2:	f7f4 f919 	bl	8009e18 <HAL_UART_Receive_IT>
 8015be6:	4603      	mov	r3, r0
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d002      	beq.n	8015bf2 <USBD_CDC_ACM_Activate+0x92>
	{
		/* Transfer error in reception process */
		Error_Handler();
 8015bec:	f7eb ff3e 	bl	8001a6c <Error_Handler>
	}

	/* USER CODE END USBD_CDC_ACM_Activate */

	return;
 8015bf0:	bf00      	nop
 8015bf2:	bf00      	nop
}
 8015bf4:	3708      	adds	r7, #8
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	20004168 	.word	0x20004168
 8015c00:	20005174 	.word	0x20005174
 8015c04:	20000058 	.word	0x20000058
 8015c08:	2000496c 	.word	0x2000496c

08015c0c <USBD_CDC_ACM_Deactivate>:
 *         This function is called when extraction of a CDC ACM device.
 * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
 * @retval none
 */
VOID USBD_CDC_ACM_Deactivate(VOID *cdc_acm_instance)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b082      	sub	sp, #8
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_CDC_ACM_Deactivate */

	UX_PARAMETER_NOT_USED(cdc_acm_instance);

	/* Reset the cdc acm instance */
	cdc_acm = UX_NULL;
 8015c14:	4b05      	ldr	r3, [pc, #20]	; (8015c2c <USBD_CDC_ACM_Deactivate+0x20>)
 8015c16:	2200      	movs	r2, #0
 8015c18:	601a      	str	r2, [r3, #0]

	/* DeInitialize the UART peripheral */
	HAL_UART_DeInit(uart_handler);
 8015c1a:	4b05      	ldr	r3, [pc, #20]	; (8015c30 <USBD_CDC_ACM_Deactivate+0x24>)
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f7f4 f8be 	bl	8009da0 <HAL_UART_DeInit>

	/* USER CODE END USBD_CDC_ACM_Deactivate */

	return;
 8015c24:	bf00      	nop
}
 8015c26:	3708      	adds	r7, #8
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	bd80      	pop	{r7, pc}
 8015c2c:	20004168 	.word	0x20004168
 8015c30:	20005174 	.word	0x20005174

08015c34 <USBD_CDC_ACM_ParameterChange>:
 *         This function is invoked to manage the CDC ACM class requests.
 * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
 * @retval none
 */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance)
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b086      	sub	sp, #24
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
	ULONG request;
	UX_SLAVE_TRANSFER *transfer_request;
	UX_SLAVE_DEVICE *device;

	/* Get the pointer to the device */
	device = &_ux_system_slave -> ux_system_slave_device;
 8015c3c:	4b4a      	ldr	r3, [pc, #296]	; (8015d68 <USBD_CDC_ACM_ParameterChange+0x134>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	3320      	adds	r3, #32
 8015c42:	617b      	str	r3, [r7, #20]

	/* Get the pointer to the transfer request associated with the control endpoint */
	transfer_request = &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8015c44:	697b      	ldr	r3, [r7, #20]
 8015c46:	336c      	adds	r3, #108	; 0x6c
 8015c48:	613b      	str	r3, [r7, #16]

	request = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8015c50:	60fb      	str	r3, [r7, #12]

	switch (request)
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	2b22      	cmp	r3, #34	; 0x22
 8015c56:	d033      	beq.n	8015cc0 <USBD_CDC_ACM_ParameterChange+0x8c>
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	2b22      	cmp	r3, #34	; 0x22
 8015c5c:	d87d      	bhi.n	8015d5a <USBD_CDC_ACM_ParameterChange+0x126>
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	2b20      	cmp	r3, #32
 8015c62:	d003      	beq.n	8015c6c <USBD_CDC_ACM_ParameterChange+0x38>
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	2b21      	cmp	r3, #33	; 0x21
 8015c68:	d01d      	beq.n	8015ca6 <USBD_CDC_ACM_ParameterChange+0x72>
		}

		break;

	default :
		break;
 8015c6a:	e076      	b.n	8015d5a <USBD_CDC_ACM_ParameterChange+0x126>
		if (ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING,
 8015c6c:	4b3f      	ldr	r3, [pc, #252]	; (8015d6c <USBD_CDC_ACM_ParameterChange+0x138>)
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	4a3f      	ldr	r2, [pc, #252]	; (8015d70 <USBD_CDC_ACM_ParameterChange+0x13c>)
 8015c72:	2102      	movs	r1, #2
 8015c74:	4618      	mov	r0, r3
 8015c76:	f7fe fe21 	bl	80148bc <_ux_device_class_cdc_acm_ioctl>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d001      	beq.n	8015c84 <USBD_CDC_ACM_ParameterChange+0x50>
			Error_Handler();
 8015c80:	f7eb fef4 	bl	8001a6c <Error_Handler>
		if (CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate < MIN_BAUDRATE)
 8015c84:	4b3a      	ldr	r3, [pc, #232]	; (8015d70 <USBD_CDC_ACM_ParameterChange+0x13c>)
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8015c8c:	d207      	bcs.n	8015c9e <USBD_CDC_ACM_ParameterChange+0x6a>
			CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate = MIN_BAUDRATE;
 8015c8e:	4b38      	ldr	r3, [pc, #224]	; (8015d70 <USBD_CDC_ACM_ParameterChange+0x13c>)
 8015c90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8015c94:	601a      	str	r2, [r3, #0]
			USBD_CDC_VCP_Config(&CDC_VCP_LineCoding);
 8015c96:	4836      	ldr	r0, [pc, #216]	; (8015d70 <USBD_CDC_ACM_ParameterChange+0x13c>)
 8015c98:	f000 f966 	bl	8015f68 <USBD_CDC_VCP_Config>
		break;
 8015c9c:	e060      	b.n	8015d60 <USBD_CDC_ACM_ParameterChange+0x12c>
			USBD_CDC_VCP_Config(&CDC_VCP_LineCoding);
 8015c9e:	4834      	ldr	r0, [pc, #208]	; (8015d70 <USBD_CDC_ACM_ParameterChange+0x13c>)
 8015ca0:	f000 f962 	bl	8015f68 <USBD_CDC_VCP_Config>
		break;
 8015ca4:	e05c      	b.n	8015d60 <USBD_CDC_ACM_ParameterChange+0x12c>
		if (ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING,
 8015ca6:	4b31      	ldr	r3, [pc, #196]	; (8015d6c <USBD_CDC_ACM_ParameterChange+0x138>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	4a31      	ldr	r2, [pc, #196]	; (8015d70 <USBD_CDC_ACM_ParameterChange+0x13c>)
 8015cac:	2101      	movs	r1, #1
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7fe fe04 	bl	80148bc <_ux_device_class_cdc_acm_ioctl>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d051      	beq.n	8015d5e <USBD_CDC_ACM_ParameterChange+0x12a>
			Error_Handler();
 8015cba:	f7eb fed7 	bl	8001a6c <Error_Handler>
		break;
 8015cbe:	e04e      	b.n	8015d5e <USBD_CDC_ACM_ParameterChange+0x12a>
		if ((cdc_acm->ux_slave_class_cdc_acm_data_rts_state == UX_TRUE) && (cdc_acm->ux_slave_class_cdc_acm_data_dtr_state == UX_TRUE)){
 8015cc0:	4b2a      	ldr	r3, [pc, #168]	; (8015d6c <USBD_CDC_ACM_ParameterChange+0x138>)
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015cc8:	2b01      	cmp	r3, #1
 8015cca:	d116      	bne.n	8015cfa <USBD_CDC_ACM_ParameterChange+0xc6>
 8015ccc:	4b27      	ldr	r3, [pc, #156]	; (8015d6c <USBD_CDC_ACM_ParameterChange+0x138>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8015cd4:	2b01      	cmp	r3, #1
 8015cd6:	d110      	bne.n	8015cfa <USBD_CDC_ACM_ParameterChange+0xc6>
			HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8015cd8:	2201      	movs	r2, #1
 8015cda:	2110      	movs	r1, #16
 8015cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8015ce0:	f7ee fbb6 	bl	8004450 <HAL_GPIO_WritePin>
			ESP32_EN_switch(ESP32_EN_INT);
 8015ce4:	2003      	movs	r0, #3
 8015ce6:	f7eb fe0d 	bl	8001904 <ESP32_EN_switch>
			__HAL_TIM_SET_COUNTER(&htim7, 0);
 8015cea:	4b22      	ldr	r3, [pc, #136]	; (8015d74 <USBD_CDC_ACM_ParameterChange+0x140>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim7);
 8015cf2:	4820      	ldr	r0, [pc, #128]	; (8015d74 <USBD_CDC_ACM_ParameterChange+0x140>)
 8015cf4:	f7f2 fcae 	bl	8008654 <HAL_TIM_Base_Start_IT>
		break;
 8015cf8:	e032      	b.n	8015d60 <USBD_CDC_ACM_ParameterChange+0x12c>
			if (cdc_acm->ux_slave_class_cdc_acm_data_dtr_state == UX_TRUE){
 8015cfa:	4b1c      	ldr	r3, [pc, #112]	; (8015d6c <USBD_CDC_ACM_ParameterChange+0x138>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8015d02:	2b01      	cmp	r3, #1
 8015d04:	d108      	bne.n	8015d18 <USBD_CDC_ACM_ParameterChange+0xe4>
				HAL_GPIO_WritePin(ESP32_IO0_GPIO_Port, ESP32_IO0_Pin, GPIO_PIN_RESET);
 8015d06:	2200      	movs	r2, #0
 8015d08:	2120      	movs	r1, #32
 8015d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8015d0e:	f7ee fb9f 	bl	8004450 <HAL_GPIO_WritePin>
				reset_extra_functions();
 8015d12:	f7ea fed7 	bl	8000ac4 <reset_extra_functions>
 8015d16:	e006      	b.n	8015d26 <USBD_CDC_ACM_ParameterChange+0xf2>
				__HAL_TIM_SET_COUNTER(&htim7, 0);
 8015d18:	4b16      	ldr	r3, [pc, #88]	; (8015d74 <USBD_CDC_ACM_ParameterChange+0x140>)
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start_IT(&htim7);
 8015d20:	4814      	ldr	r0, [pc, #80]	; (8015d74 <USBD_CDC_ACM_ParameterChange+0x140>)
 8015d22:	f7f2 fc97 	bl	8008654 <HAL_TIM_Base_Start_IT>
			if (cdc_acm->ux_slave_class_cdc_acm_data_rts_state == UX_TRUE){
 8015d26:	4b11      	ldr	r3, [pc, #68]	; (8015d6c <USBD_CDC_ACM_ParameterChange+0x138>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015d2e:	2b01      	cmp	r3, #1
 8015d30:	d109      	bne.n	8015d46 <USBD_CDC_ACM_ParameterChange+0x112>
				ESP32_EN_switch(ESP32_EN_OUTPUT);
 8015d32:	2002      	movs	r0, #2
 8015d34:	f7eb fde6 	bl	8001904 <ESP32_EN_switch>
				HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8015d38:	2200      	movs	r2, #0
 8015d3a:	2110      	movs	r1, #16
 8015d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8015d40:	f7ee fb86 	bl	8004450 <HAL_GPIO_WritePin>
		break;
 8015d44:	e00c      	b.n	8015d60 <USBD_CDC_ACM_ParameterChange+0x12c>
				HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8015d46:	2201      	movs	r2, #1
 8015d48:	2110      	movs	r1, #16
 8015d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8015d4e:	f7ee fb7f 	bl	8004450 <HAL_GPIO_WritePin>
				ESP32_EN_switch(ESP32_EN_INT);
 8015d52:	2003      	movs	r0, #3
 8015d54:	f7eb fdd6 	bl	8001904 <ESP32_EN_switch>
		break;
 8015d58:	e002      	b.n	8015d60 <USBD_CDC_ACM_ParameterChange+0x12c>
		break;
 8015d5a:	bf00      	nop
 8015d5c:	e000      	b.n	8015d60 <USBD_CDC_ACM_ParameterChange+0x12c>
		break;
 8015d5e:	bf00      	nop
	}
	/* USER CODE END USBD_CDC_ACM_ParameterChange */

	return;
 8015d60:	bf00      	nop
}
 8015d62:	3718      	adds	r7, #24
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}
 8015d68:	20003f18 	.word	0x20003f18
 8015d6c:	20004168 	.word	0x20004168
 8015d70:	20000058 	.word	0x20000058
 8015d74:	20003370 	.word	0x20003370

08015d78 <usbx_cdc_acm_read_thread_entry>:
 * @brief  Function implementing usbx_cdc_acm_thread_entry.
 * @param  thread_input: Not used
 * @retval none
 */
VOID usbx_cdc_acm_read_thread_entry(ULONG thread_input)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b088      	sub	sp, #32
 8015d7c:	af02      	add	r7, sp, #8
 8015d7e:	6078      	str	r0, [r7, #4]
	ULONG actual_length;
	ULONG senddataflag = 0;
 8015d80:	2300      	movs	r3, #0
 8015d82:	60fb      	str	r3, [r7, #12]
	UX_SLAVE_DEVICE *device;

	UX_PARAMETER_NOT_USED(thread_input);

	device = &_ux_system_slave->ux_system_slave_device;
 8015d84:	4b1e      	ldr	r3, [pc, #120]	; (8015e00 <usbx_cdc_acm_read_thread_entry+0x88>)
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	3320      	adds	r3, #32
 8015d8a:	617b      	str	r3, [r7, #20]

	while (1)
	{

		/* Check if device is configured */
		if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (cdc_acm != UX_NULL))
 8015d8c:	697b      	ldr	r3, [r7, #20]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	2b03      	cmp	r3, #3
 8015d92:	d12f      	bne.n	8015df4 <usbx_cdc_acm_read_thread_entry+0x7c>
 8015d94:	4b1b      	ldr	r3, [pc, #108]	; (8015e04 <usbx_cdc_acm_read_thread_entry+0x8c>)
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d02b      	beq.n	8015df4 <usbx_cdc_acm_read_thread_entry+0x7c>
			cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_FALSE;

#endif /* UX_DEVICE_CLASS_CDC_ACM_TRANSMISSION_DISABLE */

			/* Read the received data in blocking mode */
			ux_device_class_cdc_acm_read(cdc_acm, (UCHAR *)UserRxBufferFS, 64,
 8015d9c:	4b19      	ldr	r3, [pc, #100]	; (8015e04 <usbx_cdc_acm_read_thread_entry+0x8c>)
 8015d9e:	6818      	ldr	r0, [r3, #0]
 8015da0:	f107 0310 	add.w	r3, r7, #16
 8015da4:	2240      	movs	r2, #64	; 0x40
 8015da6:	4918      	ldr	r1, [pc, #96]	; (8015e08 <usbx_cdc_acm_read_thread_entry+0x90>)
 8015da8:	f7fe fe54 	bl	8014a54 <_ux_device_class_cdc_acm_read>
					&actual_length);
			if (actual_length != 0)
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d01c      	beq.n	8015dec <usbx_cdc_acm_read_thread_entry+0x74>
				/* Send the data via UART */
				//    	for (uint8_t i = 0; i < actual_length; i++){
				//    		printf("Sent: %d \n", UserRxBufferFS[i]);
				//    	}

				if (HAL_UART_Transmit_DMA(uart_handler, (uint8_t *)UserRxBufferFS, actual_length) != HAL_OK)
 8015db2:	4b16      	ldr	r3, [pc, #88]	; (8015e0c <usbx_cdc_acm_read_thread_entry+0x94>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	693a      	ldr	r2, [r7, #16]
 8015db8:	b292      	uxth	r2, r2
 8015dba:	4913      	ldr	r1, [pc, #76]	; (8015e08 <usbx_cdc_acm_read_thread_entry+0x90>)
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	f7f4 f881 	bl	8009ec4 <HAL_UART_Transmit_DMA>
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d001      	beq.n	8015dcc <usbx_cdc_acm_read_thread_entry+0x54>
				{
					Error_Handler();
 8015dc8:	f7eb fe50 	bl	8001a6c <Error_Handler>
				}

				/* Wait until the requested flag TX_NEW_TRANSMITTED_DATA is received */
				if (tx_event_flags_get(&EventFlag, TX_NEW_TRANSMITTED_DATA, TX_OR_CLEAR,
 8015dcc:	f107 030c 	add.w	r3, r7, #12
 8015dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8015dd4:	9200      	str	r2, [sp, #0]
 8015dd6:	2201      	movs	r2, #1
 8015dd8:	2102      	movs	r1, #2
 8015dda:	480d      	ldr	r0, [pc, #52]	; (8015e10 <usbx_cdc_acm_read_thread_entry+0x98>)
 8015ddc:	f7fb fcc4 	bl	8011768 <_txe_event_flags_get>
 8015de0:	4603      	mov	r3, r0
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d00a      	beq.n	8015dfc <usbx_cdc_acm_read_thread_entry+0x84>
						&senddataflag, TX_WAIT_FOREVER) != TX_SUCCESS)
				{
					Error_Handler();
 8015de6:	f7eb fe41 	bl	8001a6c <Error_Handler>
			if (actual_length != 0)
 8015dea:	e007      	b.n	8015dfc <usbx_cdc_acm_read_thread_entry+0x84>
				}
			}
			else
			{
				/* Sleep thread for 10ms if no data received */
				tx_thread_sleep(MS_TO_TICK(10));
 8015dec:	2001      	movs	r0, #1
 8015dee:	f7fa fd7f 	bl	80108f0 <_tx_thread_sleep>
			if (actual_length != 0)
 8015df2:	e003      	b.n	8015dfc <usbx_cdc_acm_read_thread_entry+0x84>
			}
		}
		else
		{
			/* Sleep thread for 10ms */
			tx_thread_sleep(MS_TO_TICK(10));
 8015df4:	2001      	movs	r0, #1
 8015df6:	f7fa fd7b 	bl	80108f0 <_tx_thread_sleep>
 8015dfa:	e7c7      	b.n	8015d8c <usbx_cdc_acm_read_thread_entry+0x14>
			if (actual_length != 0)
 8015dfc:	bf00      	nop
		if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (cdc_acm != UX_NULL))
 8015dfe:	e7c5      	b.n	8015d8c <usbx_cdc_acm_read_thread_entry+0x14>
 8015e00:	20003f18 	.word	0x20003f18
 8015e04:	20004168 	.word	0x20004168
 8015e08:	2000416c 	.word	0x2000416c
 8015e0c:	20005174 	.word	0x20005174
 8015e10:	20004144 	.word	0x20004144

08015e14 <usbx_cdc_acm_write_thread_entry>:
 * @brief  Function implementing usbx_cdc_acm_write_thread_entry.
 * @param  thread_input: Not used
 * @retval none
 */
VOID usbx_cdc_acm_write_thread_entry(ULONG thread_input)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b088      	sub	sp, #32
 8015e18:	af02      	add	r7, sp, #8
 8015e1a:	6078      	str	r0, [r7, #4]
	ULONG receivedataflag = 0;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	60fb      	str	r3, [r7, #12]

	while (1)
	{

		/* Wait until the requested flag RX_NEW_RECEIVED_DATA is received */
		if (tx_event_flags_get(&EventFlag, RX_NEW_RECEIVED_DATA, TX_OR_CLEAR,
 8015e20:	f107 030c 	add.w	r3, r7, #12
 8015e24:	f04f 32ff 	mov.w	r2, #4294967295
 8015e28:	9200      	str	r2, [sp, #0]
 8015e2a:	2201      	movs	r2, #1
 8015e2c:	2101      	movs	r1, #1
 8015e2e:	481f      	ldr	r0, [pc, #124]	; (8015eac <usbx_cdc_acm_write_thread_entry+0x98>)
 8015e30:	f7fb fc9a 	bl	8011768 <_txe_event_flags_get>
 8015e34:	4603      	mov	r3, r0
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d001      	beq.n	8015e3e <usbx_cdc_acm_write_thread_entry+0x2a>
				&receivedataflag, TX_WAIT_FOREVER) != TX_SUCCESS)
		{
			Error_Handler();
 8015e3a:	f7eb fe17 	bl	8001a6c <Error_Handler>
		cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_FALSE;

#endif

		/* Check if there is a new data to send */
		if (UserTxBufPtrOut != UserTxBufPtrIn)
 8015e3e:	4b1c      	ldr	r3, [pc, #112]	; (8015eb0 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8015e40:	681a      	ldr	r2, [r3, #0]
 8015e42:	4b1c      	ldr	r3, [pc, #112]	; (8015eb4 <usbx_cdc_acm_write_thread_entry+0xa0>)
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d0ea      	beq.n	8015e20 <usbx_cdc_acm_write_thread_entry+0xc>
		{
			/* Check buffer overflow and Rollback */
			if (UserTxBufPtrOut > UserTxBufPtrIn)
 8015e4a:	4b19      	ldr	r3, [pc, #100]	; (8015eb0 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8015e4c:	681a      	ldr	r2, [r3, #0]
 8015e4e:	4b19      	ldr	r3, [pc, #100]	; (8015eb4 <usbx_cdc_acm_write_thread_entry+0xa0>)
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	429a      	cmp	r2, r3
 8015e54:	d905      	bls.n	8015e62 <usbx_cdc_acm_write_thread_entry+0x4e>
			{
				buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8015e56:	4b16      	ldr	r3, [pc, #88]	; (8015eb0 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8015e5e:	617b      	str	r3, [r7, #20]
 8015e60:	e005      	b.n	8015e6e <usbx_cdc_acm_write_thread_entry+0x5a>
			}
			else
			{
				/* Calculate data size */
				buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8015e62:	4b14      	ldr	r3, [pc, #80]	; (8015eb4 <usbx_cdc_acm_write_thread_entry+0xa0>)
 8015e64:	681a      	ldr	r2, [r3, #0]
 8015e66:	4b12      	ldr	r3, [pc, #72]	; (8015eb0 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	1ad3      	subs	r3, r2, r3
 8015e6c:	617b      	str	r3, [r7, #20]
			}

			/* Copy UserTxBufPtrOut in buffptr */
			buffptr = UserTxBufPtrOut;
 8015e6e:	4b10      	ldr	r3, [pc, #64]	; (8015eb0 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	613b      	str	r3, [r7, #16]
			//    		  if (UserTxBufferFS[buffptr + i] == 0x07){
			//    			  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port,	LED_BUILTIN_Pin);
			//    		  }
			//    	  }

			if (ux_device_class_cdc_acm_write(cdc_acm, (UCHAR *)(&UserTxBufferFS[buffptr]),
 8015e74:	4b10      	ldr	r3, [pc, #64]	; (8015eb8 <usbx_cdc_acm_write_thread_entry+0xa4>)
 8015e76:	6818      	ldr	r0, [r3, #0]
 8015e78:	693b      	ldr	r3, [r7, #16]
 8015e7a:	4a10      	ldr	r2, [pc, #64]	; (8015ebc <usbx_cdc_acm_write_thread_entry+0xa8>)
 8015e7c:	1899      	adds	r1, r3, r2
 8015e7e:	f107 0308 	add.w	r3, r7, #8
 8015e82:	697a      	ldr	r2, [r7, #20]
 8015e84:	f7fe fe98 	bl	8014bb8 <_ux_device_class_cdc_acm_write>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d1c8      	bne.n	8015e20 <usbx_cdc_acm_write_thread_entry+0xc>
					buffsize, &actual_length) == UX_SUCCESS)
			{
				/* Increment the UserTxBufPtrOut pointer */
				UserTxBufPtrOut += buffsize;
 8015e8e:	4b08      	ldr	r3, [pc, #32]	; (8015eb0 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8015e90:	681a      	ldr	r2, [r3, #0]
 8015e92:	697b      	ldr	r3, [r7, #20]
 8015e94:	4413      	add	r3, r2
 8015e96:	4a06      	ldr	r2, [pc, #24]	; (8015eb0 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8015e98:	6013      	str	r3, [r2, #0]

				/* Rollback UserTxBufPtrOut if it equal to APP_TX_DATA_SIZE */
				if (UserTxBufPtrOut == APP_TX_DATA_SIZE)
 8015e9a:	4b05      	ldr	r3, [pc, #20]	; (8015eb0 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015ea2:	d1bd      	bne.n	8015e20 <usbx_cdc_acm_write_thread_entry+0xc>
				{
					UserTxBufPtrOut = 0;
 8015ea4:	4b02      	ldr	r3, [pc, #8]	; (8015eb0 <usbx_cdc_acm_write_thread_entry+0x9c>)
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	601a      	str	r2, [r3, #0]
		if (tx_event_flags_get(&EventFlag, RX_NEW_RECEIVED_DATA, TX_OR_CLEAR,
 8015eaa:	e7b9      	b.n	8015e20 <usbx_cdc_acm_write_thread_entry+0xc>
 8015eac:	20004144 	.word	0x20004144
 8015eb0:	20005170 	.word	0x20005170
 8015eb4:	2000516c 	.word	0x2000516c
 8015eb8:	20004168 	.word	0x20004168
 8015ebc:	2000496c 	.word	0x2000496c

08015ec0 <HAL_UART_TxCpltCallback>:
 * @brief  Tx Transfer completed callback.
 * @param  huart UART handle.
 * @retval none
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b082      	sub	sp, #8
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
	/* Set TX_NEW_TRANSMITTED_DATA flag */
	if (tx_event_flags_set(&EventFlag, TX_NEW_TRANSMITTED_DATA, TX_OR) != TX_SUCCESS)
 8015ec8:	2200      	movs	r2, #0
 8015eca:	2102      	movs	r1, #2
 8015ecc:	4805      	ldr	r0, [pc, #20]	; (8015ee4 <HAL_UART_TxCpltCallback+0x24>)
 8015ece:	f7fb fca1 	bl	8011814 <_txe_event_flags_set>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d001      	beq.n	8015edc <HAL_UART_TxCpltCallback+0x1c>
	{
		Error_Handler();
 8015ed8:	f7eb fdc8 	bl	8001a6c <Error_Handler>
	}
}
 8015edc:	bf00      	nop
 8015ede:	3708      	adds	r7, #8
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}
 8015ee4:	20004144 	.word	0x20004144

08015ee8 <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callback
 * @param  huart: UART handle
 * @retval none
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b082      	sub	sp, #8
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
	/* Increment the UserTxBufPtrIn pointer */
	UserTxBufPtrIn++;
 8015ef0:	4b14      	ldr	r3, [pc, #80]	; (8015f44 <HAL_UART_RxCpltCallback+0x5c>)
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	3301      	adds	r3, #1
 8015ef6:	4a13      	ldr	r2, [pc, #76]	; (8015f44 <HAL_UART_RxCpltCallback+0x5c>)
 8015ef8:	6013      	str	r3, [r2, #0]

	/* Rollback the UserTxBufPtrIn if it equal to APP_TX_DATA_SIZE */
	if (UserTxBufPtrIn == APP_TX_DATA_SIZE)
 8015efa:	4b12      	ldr	r3, [pc, #72]	; (8015f44 <HAL_UART_RxCpltCallback+0x5c>)
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015f02:	d102      	bne.n	8015f0a <HAL_UART_RxCpltCallback+0x22>
	{
		UserTxBufPtrIn = 0;
 8015f04:	4b0f      	ldr	r3, [pc, #60]	; (8015f44 <HAL_UART_RxCpltCallback+0x5c>)
 8015f06:	2200      	movs	r2, #0
 8015f08:	601a      	str	r2, [r3, #0]
	}

	/* Set RX_NEW_RECEIVED_DATA flag */
	if (tx_event_flags_set(&EventFlag, RX_NEW_RECEIVED_DATA, TX_OR) != TX_SUCCESS)
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	2101      	movs	r1, #1
 8015f0e:	480e      	ldr	r0, [pc, #56]	; (8015f48 <HAL_UART_RxCpltCallback+0x60>)
 8015f10:	f7fb fc80 	bl	8011814 <_txe_event_flags_set>
 8015f14:	4603      	mov	r3, r0
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d001      	beq.n	8015f1e <HAL_UART_RxCpltCallback+0x36>
	{
		Error_Handler();
 8015f1a:	f7eb fda7 	bl	8001a6c <Error_Handler>
	}

	/* Start another reception: provide the buffer pointer with offset and the buffer size */
	if (HAL_UART_Receive_IT(uart_handler, (uint8_t *)UserTxBufferFS + UserTxBufPtrIn, 1) != HAL_OK)
 8015f1e:	4b0b      	ldr	r3, [pc, #44]	; (8015f4c <HAL_UART_RxCpltCallback+0x64>)
 8015f20:	6818      	ldr	r0, [r3, #0]
 8015f22:	4b08      	ldr	r3, [pc, #32]	; (8015f44 <HAL_UART_RxCpltCallback+0x5c>)
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	4a0a      	ldr	r2, [pc, #40]	; (8015f50 <HAL_UART_RxCpltCallback+0x68>)
 8015f28:	4413      	add	r3, r2
 8015f2a:	2201      	movs	r2, #1
 8015f2c:	4619      	mov	r1, r3
 8015f2e:	f7f3 ff73 	bl	8009e18 <HAL_UART_Receive_IT>
 8015f32:	4603      	mov	r3, r0
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d001      	beq.n	8015f3c <HAL_UART_RxCpltCallback+0x54>
	{
		/* Transfer error in reception process */
		Error_Handler();
 8015f38:	f7eb fd98 	bl	8001a6c <Error_Handler>
	}
}
 8015f3c:	bf00      	nop
 8015f3e:	3708      	adds	r7, #8
 8015f40:	46bd      	mov	sp, r7
 8015f42:	bd80      	pop	{r7, pc}
 8015f44:	2000516c 	.word	0x2000516c
 8015f48:	20004144 	.word	0x20004144
 8015f4c:	20005174 	.word	0x20005174
 8015f50:	2000496c 	.word	0x2000496c

08015f54 <HAL_UART_ErrorCallback>:
            Transfer error occurred in reception and/or transmission process.
 * @param  UartHandle: UART handle
 * @retval none
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8015f54:	b480      	push	{r7}
 8015f56:	b083      	sub	sp, #12
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
	//			UserTxBufPtrIn = 0;
	//		}
	//	}

	//	}
}
 8015f5c:	bf00      	nop
 8015f5e:	370c      	adds	r7, #12
 8015f60:	46bd      	mov	sp, r7
 8015f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f66:	4770      	bx	lr

08015f68 <USBD_CDC_VCP_Config>:
 * @param  CDC_VCP_LineCoding: CDC VCP line coding.
 * @retval none
 */
static VOID USBD_CDC_VCP_Config(UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER
		*CDC_VCP_LineCoding)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b082      	sub	sp, #8
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
	/* Deinitialization UART */
	if (HAL_UART_DeInit(uart_handler) != HAL_OK)
 8015f70:	4b45      	ldr	r3, [pc, #276]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	4618      	mov	r0, r3
 8015f76:	f7f3 ff13 	bl	8009da0 <HAL_UART_DeInit>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d001      	beq.n	8015f84 <USBD_CDC_VCP_Config+0x1c>
	{
		/* Deinitialization Error */
		Error_Handler();
 8015f80:	f7eb fd74 	bl	8001a6c <Error_Handler>
	}

	/* Check stop bit parameter */
	switch (CDC_VCP_LineCoding->ux_slave_class_cdc_acm_parameter_stop_bit)
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	791b      	ldrb	r3, [r3, #4]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d002      	beq.n	8015f92 <USBD_CDC_VCP_Config+0x2a>
 8015f8c:	2b02      	cmp	r3, #2
 8015f8e:	d005      	beq.n	8015f9c <USBD_CDC_VCP_Config+0x34>
 8015f90:	e00a      	b.n	8015fa8 <USBD_CDC_VCP_Config+0x40>
	{
	case 0:

		/* Set the UART Stop bit to 1 */
		uart_handler->Init.StopBits = UART_STOPBITS_1;
 8015f92:	4b3d      	ldr	r3, [pc, #244]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	2200      	movs	r2, #0
 8015f98:	60da      	str	r2, [r3, #12]

		break;
 8015f9a:	e00a      	b.n	8015fb2 <USBD_CDC_VCP_Config+0x4a>

	case 2:

		/* Set the UART Stop bit to 2 */
		uart_handler->Init.StopBits = UART_STOPBITS_2;
 8015f9c:	4b3a      	ldr	r3, [pc, #232]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015fa4:	60da      	str	r2, [r3, #12]

		break;
 8015fa6:	e004      	b.n	8015fb2 <USBD_CDC_VCP_Config+0x4a>

	default :

		/* By default set the UART Stop bit to 1 */
		uart_handler->Init.StopBits = UART_STOPBITS_1;
 8015fa8:	4b37      	ldr	r3, [pc, #220]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	2200      	movs	r2, #0
 8015fae:	60da      	str	r2, [r3, #12]

		break;
 8015fb0:	bf00      	nop
	}

	/* Check parity parameter */
	switch (CDC_VCP_LineCoding->ux_slave_class_cdc_acm_parameter_parity)
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	795b      	ldrb	r3, [r3, #5]
 8015fb6:	2b02      	cmp	r3, #2
 8015fb8:	d011      	beq.n	8015fde <USBD_CDC_VCP_Config+0x76>
 8015fba:	2b02      	cmp	r3, #2
 8015fbc:	dc15      	bgt.n	8015fea <USBD_CDC_VCP_Config+0x82>
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d002      	beq.n	8015fc8 <USBD_CDC_VCP_Config+0x60>
 8015fc2:	2b01      	cmp	r3, #1
 8015fc4:	d005      	beq.n	8015fd2 <USBD_CDC_VCP_Config+0x6a>
 8015fc6:	e010      	b.n	8015fea <USBD_CDC_VCP_Config+0x82>
	{
	case 0:

		/* Set the UART parity bit to none */
		uart_handler->Init.Parity = UART_PARITY_NONE;
 8015fc8:	4b2f      	ldr	r3, [pc, #188]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	2200      	movs	r2, #0
 8015fce:	611a      	str	r2, [r3, #16]

		break;
 8015fd0:	e010      	b.n	8015ff4 <USBD_CDC_VCP_Config+0x8c>

	case 1:

		/* Set the UART parity bit to ODD */
		uart_handler->Init.Parity = UART_PARITY_ODD;
 8015fd2:	4b2d      	ldr	r3, [pc, #180]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8015fda:	611a      	str	r2, [r3, #16]

		break;
 8015fdc:	e00a      	b.n	8015ff4 <USBD_CDC_VCP_Config+0x8c>

	case 2:

		/* Set the UART parity bit to even */
		uart_handler->Init.Parity = UART_PARITY_EVEN;
 8015fde:	4b2a      	ldr	r3, [pc, #168]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015fe6:	611a      	str	r2, [r3, #16]

		break;
 8015fe8:	e004      	b.n	8015ff4 <USBD_CDC_VCP_Config+0x8c>

	default :

		/* By default set the UART parity bit to none */
		uart_handler->Init.Parity = UART_PARITY_NONE;
 8015fea:	4b27      	ldr	r3, [pc, #156]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	2200      	movs	r2, #0
 8015ff0:	611a      	str	r2, [r3, #16]

		break;
 8015ff2:	bf00      	nop
	}

	/* Set the UART data type : only 8bits and 9bits is supported */
	switch (CDC_VCP_LineCoding->ux_slave_class_cdc_acm_parameter_data_bit)
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	799b      	ldrb	r3, [r3, #6]
 8015ff8:	2b07      	cmp	r3, #7
 8015ffa:	d002      	beq.n	8016002 <USBD_CDC_VCP_Config+0x9a>
 8015ffc:	2b08      	cmp	r3, #8
 8015ffe:	d005      	beq.n	801600c <USBD_CDC_VCP_Config+0xa4>
 8016000:	e014      	b.n	801602c <USBD_CDC_VCP_Config+0xc4>
	{
	case 0x07:

		/* With this configuration a parity (Even or Odd) must be set */
		uart_handler->Init.WordLength = UART_WORDLENGTH_8B;
 8016002:	4b21      	ldr	r3, [pc, #132]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	2200      	movs	r2, #0
 8016008:	609a      	str	r2, [r3, #8]

		break;
 801600a:	e014      	b.n	8016036 <USBD_CDC_VCP_Config+0xce>

	case 0x08:

		if (uart_handler->Init.Parity == UART_PARITY_NONE)
 801600c:	4b1e      	ldr	r3, [pc, #120]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	691b      	ldr	r3, [r3, #16]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d104      	bne.n	8016020 <USBD_CDC_VCP_Config+0xb8>
		{
			uart_handler->Init.WordLength = UART_WORDLENGTH_8B;
 8016016:	4b1c      	ldr	r3, [pc, #112]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	2200      	movs	r2, #0
 801601c:	609a      	str	r2, [r3, #8]
		else
		{
			uart_handler->Init.WordLength = UART_WORDLENGTH_9B;
		}

		break;
 801601e:	e00a      	b.n	8016036 <USBD_CDC_VCP_Config+0xce>
			uart_handler->Init.WordLength = UART_WORDLENGTH_9B;
 8016020:	4b19      	ldr	r3, [pc, #100]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016028:	609a      	str	r2, [r3, #8]
		break;
 801602a:	e004      	b.n	8016036 <USBD_CDC_VCP_Config+0xce>

	default :

		uart_handler->Init.WordLength = UART_WORDLENGTH_8B;
 801602c:	4b16      	ldr	r3, [pc, #88]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	2200      	movs	r2, #0
 8016032:	609a      	str	r2, [r3, #8]

		break;
 8016034:	bf00      	nop
	}

	/* Get the UART baudrate from VCP */
	uart_handler->Init.BaudRate = CDC_VCP_LineCoding->ux_slave_class_cdc_acm_parameter_baudrate;
 8016036:	4b14      	ldr	r3, [pc, #80]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	687a      	ldr	r2, [r7, #4]
 801603c:	6812      	ldr	r2, [r2, #0]
 801603e:	605a      	str	r2, [r3, #4]

	/* Set the UART Hw flow control to none */
	uart_handler->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8016040:	4b11      	ldr	r3, [pc, #68]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	2200      	movs	r2, #0
 8016046:	619a      	str	r2, [r3, #24]

	/* Set the UART mode */
	uart_handler->Init.Mode = UART_MODE_TX_RX;
 8016048:	4b0f      	ldr	r3, [pc, #60]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	220c      	movs	r2, #12
 801604e:	615a      	str	r2, [r3, #20]

	/* Set the UART sampling */
	uart_handler->Init.OverSampling = UART_OVERSAMPLING_16;
 8016050:	4b0d      	ldr	r3, [pc, #52]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	2200      	movs	r2, #0
 8016056:	61da      	str	r2, [r3, #28]

	/* Initialization UART */
	if (HAL_UART_Init(uart_handler) != HAL_OK)
 8016058:	4b0b      	ldr	r3, [pc, #44]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	4618      	mov	r0, r3
 801605e:	f7f3 fe4f 	bl	8009d00 <HAL_UART_Init>
 8016062:	4603      	mov	r3, r0
 8016064:	2b00      	cmp	r3, #0
 8016066:	d001      	beq.n	801606c <USBD_CDC_VCP_Config+0x104>
	{
		/* Initialization Error */
		Error_Handler();
 8016068:	f7eb fd00 	bl	8001a6c <Error_Handler>
	}

	/* Start reception: provide the buffer pointer with offset and the buffer size */
	HAL_UART_Receive_IT(uart_handler, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 801606c:	4b06      	ldr	r3, [pc, #24]	; (8016088 <USBD_CDC_VCP_Config+0x120>)
 801606e:	6818      	ldr	r0, [r3, #0]
 8016070:	4b06      	ldr	r3, [pc, #24]	; (801608c <USBD_CDC_VCP_Config+0x124>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	4a06      	ldr	r2, [pc, #24]	; (8016090 <USBD_CDC_VCP_Config+0x128>)
 8016076:	4413      	add	r3, r2
 8016078:	2201      	movs	r2, #1
 801607a:	4619      	mov	r1, r3
 801607c:	f7f3 fecc 	bl	8009e18 <HAL_UART_Receive_IT>
}
 8016080:	bf00      	nop
 8016082:	3708      	adds	r7, #8
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}
 8016088:	20005174 	.word	0x20005174
 801608c:	2000516c 	.word	0x2000516c
 8016090:	2000496c 	.word	0x2000496c

08016094 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b084      	sub	sp, #16
 8016098:	af00      	add	r7, sp, #0
 801609a:	4603      	mov	r3, r0
 801609c:	6039      	str	r1, [r7, #0]
 801609e:	71fb      	strb	r3, [r7, #7]
  uint8_t *pFrameWork = NULL;
 80160a0:	2300      	movs	r3, #0
 80160a2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER TAG BEGIN Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 80160a4:	79fb      	ldrb	r3, [r7, #7]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d113      	bne.n	80160d2 <USBD_Get_Device_Framework_Speed+0x3e>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 80160aa:	4b16      	ldr	r3, [pc, #88]	; (8016104 <USBD_Get_Device_Framework_Speed+0x70>)
 80160ac:	6819      	ldr	r1, [r3, #0]
 80160ae:	79fb      	ldrb	r3, [r7, #7]
 80160b0:	4a15      	ldr	r2, [pc, #84]	; (8016108 <USBD_Get_Device_Framework_Speed+0x74>)
 80160b2:	4816      	ldr	r0, [pc, #88]	; (801610c <USBD_Get_Device_Framework_Speed+0x78>)
 80160b4:	f000 f974 	bl	80163a0 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 80160b8:	4b14      	ldr	r3, [pc, #80]	; (801610c <USBD_Get_Device_Framework_Speed+0x78>)
 80160ba:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80160be:	4b13      	ldr	r3, [pc, #76]	; (801610c <USBD_Get_Device_Framework_Speed+0x78>)
 80160c0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80160c4:	441a      	add	r2, r3
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 80160ca:	4b0e      	ldr	r3, [pc, #56]	; (8016104 <USBD_Get_Device_Framework_Speed+0x70>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	60fb      	str	r3, [r7, #12]
 80160d0:	e012      	b.n	80160f8 <USBD_Get_Device_Framework_Speed+0x64>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 80160d2:	4b0f      	ldr	r3, [pc, #60]	; (8016110 <USBD_Get_Device_Framework_Speed+0x7c>)
 80160d4:	6819      	ldr	r1, [r3, #0]
 80160d6:	79fb      	ldrb	r3, [r7, #7]
 80160d8:	4a0b      	ldr	r2, [pc, #44]	; (8016108 <USBD_Get_Device_Framework_Speed+0x74>)
 80160da:	480e      	ldr	r0, [pc, #56]	; (8016114 <USBD_Get_Device_Framework_Speed+0x80>)
 80160dc:	f000 f960 	bl	80163a0 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 80160e0:	4b0c      	ldr	r3, [pc, #48]	; (8016114 <USBD_Get_Device_Framework_Speed+0x80>)
 80160e2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80160e6:	4b0b      	ldr	r3, [pc, #44]	; (8016114 <USBD_Get_Device_Framework_Speed+0x80>)
 80160e8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80160ec:	441a      	add	r2, r3
 80160ee:	683b      	ldr	r3, [r7, #0]
 80160f0:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 80160f2:	4b07      	ldr	r3, [pc, #28]	; (8016110 <USBD_Get_Device_Framework_Speed+0x7c>)
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE Device_Framework1 */

  /* USER CODE Device_Framework1 */
  return pFrameWork;
 80160f8:	68fb      	ldr	r3, [r7, #12]
}
 80160fa:	4618      	mov	r0, r3
 80160fc:	3710      	adds	r7, #16
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}
 8016102:	bf00      	nop
 8016104:	2000006c 	.word	0x2000006c
 8016108:	20000060 	.word	0x20000060
 801610c:	20005178 	.word	0x20005178
 8016110:	20000070 	.word	0x20000070
 8016114:	200052a0 	.word	0x200052a0

08016118 <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b084      	sub	sp, #16
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 8016120:	2300      	movs	r3, #0
 8016122:	81bb      	strh	r3, [r7, #12]
  uint8_t count = 0U;
 8016124:	2300      	movs	r3, #0
 8016126:	73fb      	strb	r3, [r7, #15]
  /* USER CODE String_Framework0 */

  /* USER CODE String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8016128:	7bfb      	ldrb	r3, [r7, #15]
 801612a:	1c5a      	adds	r2, r3, #1
 801612c:	73fa      	strb	r2, [r7, #15]
 801612e:	461a      	mov	r2, r3
 8016130:	4b37      	ldr	r3, [pc, #220]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 8016132:	2109      	movs	r1, #9
 8016134:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8016136:	7bfb      	ldrb	r3, [r7, #15]
 8016138:	1c5a      	adds	r2, r3, #1
 801613a:	73fa      	strb	r2, [r7, #15]
 801613c:	461a      	mov	r2, r3
 801613e:	4b34      	ldr	r3, [pc, #208]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 8016140:	2104      	movs	r1, #4
 8016142:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8016144:	7bfb      	ldrb	r3, [r7, #15]
 8016146:	1c5a      	adds	r2, r3, #1
 8016148:	73fa      	strb	r2, [r7, #15]
 801614a:	461a      	mov	r2, r3
 801614c:	4b30      	ldr	r3, [pc, #192]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 801614e:	2101      	movs	r1, #1
 8016150:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 8016152:	7bfb      	ldrb	r3, [r7, #15]
 8016154:	4a2e      	ldr	r2, [pc, #184]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 8016156:	4413      	add	r3, r2
 8016158:	f107 020c 	add.w	r2, r7, #12
 801615c:	4619      	mov	r1, r3
 801615e:	482d      	ldr	r0, [pc, #180]	; (8016214 <USBD_Get_String_Framework+0xfc>)
 8016160:	f000 f8d0 	bl	8016304 <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 8016164:	89bb      	ldrh	r3, [r7, #12]
 8016166:	b2da      	uxtb	r2, r3
 8016168:	7bfb      	ldrb	r3, [r7, #15]
 801616a:	4413      	add	r3, r2
 801616c:	b2db      	uxtb	r3, r3
 801616e:	3301      	adds	r3, #1
 8016170:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8016172:	7bfb      	ldrb	r3, [r7, #15]
 8016174:	1c5a      	adds	r2, r3, #1
 8016176:	73fa      	strb	r2, [r7, #15]
 8016178:	461a      	mov	r2, r3
 801617a:	4b25      	ldr	r3, [pc, #148]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 801617c:	2109      	movs	r1, #9
 801617e:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8016180:	7bfb      	ldrb	r3, [r7, #15]
 8016182:	1c5a      	adds	r2, r3, #1
 8016184:	73fa      	strb	r2, [r7, #15]
 8016186:	461a      	mov	r2, r3
 8016188:	4b21      	ldr	r3, [pc, #132]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 801618a:	2104      	movs	r1, #4
 801618c:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 801618e:	7bfb      	ldrb	r3, [r7, #15]
 8016190:	1c5a      	adds	r2, r3, #1
 8016192:	73fa      	strb	r2, [r7, #15]
 8016194:	461a      	mov	r2, r3
 8016196:	4b1e      	ldr	r3, [pc, #120]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 8016198:	2102      	movs	r1, #2
 801619a:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 801619c:	7bfb      	ldrb	r3, [r7, #15]
 801619e:	4a1c      	ldr	r2, [pc, #112]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 80161a0:	4413      	add	r3, r2
 80161a2:	f107 020c 	add.w	r2, r7, #12
 80161a6:	4619      	mov	r1, r3
 80161a8:	481b      	ldr	r0, [pc, #108]	; (8016218 <USBD_Get_String_Framework+0x100>)
 80161aa:	f000 f8ab 	bl	8016304 <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 80161ae:	89bb      	ldrh	r3, [r7, #12]
 80161b0:	b2da      	uxtb	r2, r3
 80161b2:	7bfb      	ldrb	r3, [r7, #15]
 80161b4:	4413      	add	r3, r2
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	3301      	adds	r3, #1
 80161ba:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80161bc:	7bfb      	ldrb	r3, [r7, #15]
 80161be:	1c5a      	adds	r2, r3, #1
 80161c0:	73fa      	strb	r2, [r7, #15]
 80161c2:	461a      	mov	r2, r3
 80161c4:	4b12      	ldr	r3, [pc, #72]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 80161c6:	2109      	movs	r1, #9
 80161c8:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80161ca:	7bfb      	ldrb	r3, [r7, #15]
 80161cc:	1c5a      	adds	r2, r3, #1
 80161ce:	73fa      	strb	r2, [r7, #15]
 80161d0:	461a      	mov	r2, r3
 80161d2:	4b0f      	ldr	r3, [pc, #60]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 80161d4:	2104      	movs	r1, #4
 80161d6:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 80161d8:	7bfb      	ldrb	r3, [r7, #15]
 80161da:	1c5a      	adds	r2, r3, #1
 80161dc:	73fa      	strb	r2, [r7, #15]
 80161de:	461a      	mov	r2, r3
 80161e0:	4b0b      	ldr	r3, [pc, #44]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 80161e2:	2103      	movs	r1, #3
 80161e4:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 80161e6:	7bfb      	ldrb	r3, [r7, #15]
 80161e8:	4a09      	ldr	r2, [pc, #36]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 80161ea:	4413      	add	r3, r2
 80161ec:	f107 020c 	add.w	r2, r7, #12
 80161f0:	4619      	mov	r1, r3
 80161f2:	480a      	ldr	r0, [pc, #40]	; (801621c <USBD_Get_String_Framework+0x104>)
 80161f4:	f000 f886 	bl	8016304 <USBD_Desc_GetString>
  /* USER CODE String_Framework1 */

  /* USER CODE String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 80161f8:	4805      	ldr	r0, [pc, #20]	; (8016210 <USBD_Get_String_Framework+0xf8>)
 80161fa:	f7ea f92d 	bl	8000458 <strlen>
 80161fe:	4602      	mov	r2, r0
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 8016204:	4b02      	ldr	r3, [pc, #8]	; (8016210 <USBD_Get_String_Framework+0xf8>)
}
 8016206:	4618      	mov	r0, r3
 8016208:	3710      	adds	r7, #16
 801620a:	46bd      	mov	sp, r7
 801620c:	bd80      	pop	{r7, pc}
 801620e:	bf00      	nop
 8016210:	20005558 	.word	0x20005558
 8016214:	08016ecc 	.word	0x08016ecc
 8016218:	08016ed4 	.word	0x08016ed4
 801621c:	08016ee8 	.word	0x08016ee8

08016220 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b084      	sub	sp, #16
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 8016228:	2300      	movs	r3, #0
 801622a:	73fb      	strb	r3, [r7, #15]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801622c:	7bfb      	ldrb	r3, [r7, #15]
 801622e:	1c5a      	adds	r2, r3, #1
 8016230:	73fa      	strb	r2, [r7, #15]
 8016232:	461a      	mov	r2, r3
 8016234:	4b0a      	ldr	r3, [pc, #40]	; (8016260 <USBD_Get_Language_Id_Framework+0x40>)
 8016236:	2109      	movs	r1, #9
 8016238:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 801623a:	7bfb      	ldrb	r3, [r7, #15]
 801623c:	1c5a      	adds	r2, r3, #1
 801623e:	73fa      	strb	r2, [r7, #15]
 8016240:	461a      	mov	r2, r3
 8016242:	4b07      	ldr	r3, [pc, #28]	; (8016260 <USBD_Get_Language_Id_Framework+0x40>)
 8016244:	2104      	movs	r1, #4
 8016246:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 8016248:	4805      	ldr	r0, [pc, #20]	; (8016260 <USBD_Get_Language_Id_Framework+0x40>)
 801624a:	f7ea f905 	bl	8000458 <strlen>
 801624e:	4602      	mov	r2, r0
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 8016254:	4b02      	ldr	r3, [pc, #8]	; (8016260 <USBD_Get_Language_Id_Framework+0x40>)
}
 8016256:	4618      	mov	r0, r3
 8016258:	3710      	adds	r7, #16
 801625a:	46bd      	mov	sp, r7
 801625c:	bd80      	pop	{r7, pc}
 801625e:	bf00      	nop
 8016260:	20005658 	.word	0x20005658

08016264 <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 8016264:	b480      	push	{r7}
 8016266:	b085      	sub	sp, #20
 8016268:	af00      	add	r7, sp, #0
 801626a:	4603      	mov	r3, r0
 801626c:	460a      	mov	r2, r1
 801626e:	71fb      	strb	r3, [r7, #7]
 8016270:	4613      	mov	r3, r2
 8016272:	71bb      	strb	r3, [r7, #6]
  uint8_t itf_num = 0U;
 8016274:	2300      	movs	r3, #0
 8016276:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0U;
 8016278:	2300      	movs	r3, #0
 801627a:	73bb      	strb	r3, [r7, #14]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 801627c:	2300      	movs	r3, #0
 801627e:	73bb      	strb	r3, [r7, #14]
 8016280:	e021      	b.n	80162c6 <USBD_Get_Interface_Number+0x62>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 8016282:	7bbb      	ldrb	r3, [r7, #14]
 8016284:	4a15      	ldr	r2, [pc, #84]	; (80162dc <USBD_Get_Interface_Number+0x78>)
 8016286:	215c      	movs	r1, #92	; 0x5c
 8016288:	fb01 f303 	mul.w	r3, r1, r3
 801628c:	4413      	add	r3, r2
 801628e:	330c      	adds	r3, #12
 8016290:	781b      	ldrb	r3, [r3, #0]
 8016292:	79fa      	ldrb	r2, [r7, #7]
 8016294:	429a      	cmp	r2, r3
 8016296:	d113      	bne.n	80162c0 <USBD_Get_Interface_Number+0x5c>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 8016298:	7bbb      	ldrb	r3, [r7, #14]
 801629a:	4a10      	ldr	r2, [pc, #64]	; (80162dc <USBD_Get_Interface_Number+0x78>)
 801629c:	215c      	movs	r1, #92	; 0x5c
 801629e:	fb01 f303 	mul.w	r3, r1, r3
 80162a2:	4413      	add	r3, r2
 80162a4:	3314      	adds	r3, #20
 80162a6:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 80162a8:	79ba      	ldrb	r2, [r7, #6]
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d108      	bne.n	80162c0 <USBD_Get_Interface_Number+0x5c>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 80162ae:	7bbb      	ldrb	r3, [r7, #14]
 80162b0:	4a0a      	ldr	r2, [pc, #40]	; (80162dc <USBD_Get_Interface_Number+0x78>)
 80162b2:	215c      	movs	r1, #92	; 0x5c
 80162b4:	fb01 f303 	mul.w	r3, r1, r3
 80162b8:	4413      	add	r3, r2
 80162ba:	335a      	adds	r3, #90	; 0x5a
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	73fb      	strb	r3, [r7, #15]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 80162c0:	7bbb      	ldrb	r3, [r7, #14]
 80162c2:	3301      	adds	r3, #1
 80162c4:	73bb      	strb	r3, [r7, #14]
 80162c6:	7bbb      	ldrb	r3, [r7, #14]
 80162c8:	2b02      	cmp	r3, #2
 80162ca:	d9da      	bls.n	8016282 <USBD_Get_Interface_Number+0x1e>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  return itf_num;
 80162cc:	7bfb      	ldrb	r3, [r7, #15]
 80162ce:	b29b      	uxth	r3, r3
}
 80162d0:	4618      	mov	r0, r3
 80162d2:	3714      	adds	r7, #20
 80162d4:	46bd      	mov	sp, r7
 80162d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162da:	4770      	bx	lr
 80162dc:	20005178 	.word	0x20005178

080162e0 <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 80162e0:	b480      	push	{r7}
 80162e2:	b085      	sub	sp, #20
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	4603      	mov	r3, r0
 80162e8:	460a      	mov	r2, r1
 80162ea:	71fb      	strb	r3, [r7, #7]
 80162ec:	4613      	mov	r3, r2
 80162ee:	71bb      	strb	r3, [r7, #6]
  uint8_t cfg_num = 1U;
 80162f0:	2301      	movs	r3, #1
 80162f2:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 80162f4:	7bfb      	ldrb	r3, [r7, #15]
 80162f6:	b29b      	uxth	r3, r3
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3714      	adds	r7, #20
 80162fc:	46bd      	mov	sp, r7
 80162fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016302:	4770      	bx	lr

08016304 <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b086      	sub	sp, #24
 8016308:	af00      	add	r7, sp, #0
 801630a:	60f8      	str	r0, [r7, #12]
 801630c:	60b9      	str	r1, [r7, #8]
 801630e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016310:	2300      	movs	r3, #0
 8016312:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d023      	beq.n	8016362 <USBD_Desc_GetString+0x5e>
  {
    return;
  }

  pdesc = desc;
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 801631e:	6938      	ldr	r0, [r7, #16]
 8016320:	f000 f823 	bl	801636a <USBD_Desc_GetLen>
 8016324:	4603      	mov	r3, r0
 8016326:	b29a      	uxth	r2, r3
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 801632c:	7dfb      	ldrb	r3, [r7, #23]
 801632e:	1c5a      	adds	r2, r3, #1
 8016330:	75fa      	strb	r2, [r7, #23]
 8016332:	461a      	mov	r2, r3
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	4413      	add	r3, r2
 8016338:	687a      	ldr	r2, [r7, #4]
 801633a:	7812      	ldrb	r2, [r2, #0]
 801633c:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 801633e:	e00b      	b.n	8016358 <USBD_Desc_GetString+0x54>
  {
    unicode[idx++] = *pdesc;
 8016340:	7dfb      	ldrb	r3, [r7, #23]
 8016342:	1c5a      	adds	r2, r3, #1
 8016344:	75fa      	strb	r2, [r7, #23]
 8016346:	461a      	mov	r2, r3
 8016348:	68bb      	ldr	r3, [r7, #8]
 801634a:	4413      	add	r3, r2
 801634c:	693a      	ldr	r2, [r7, #16]
 801634e:	7812      	ldrb	r2, [r2, #0]
 8016350:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016352:	693b      	ldr	r3, [r7, #16]
 8016354:	3301      	adds	r3, #1
 8016356:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 8016358:	693b      	ldr	r3, [r7, #16]
 801635a:	781b      	ldrb	r3, [r3, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d1ef      	bne.n	8016340 <USBD_Desc_GetString+0x3c>
 8016360:	e000      	b.n	8016364 <USBD_Desc_GetString+0x60>
    return;
 8016362:	bf00      	nop
  }
}
 8016364:	3718      	adds	r7, #24
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}

0801636a <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 801636a:	b480      	push	{r7}
 801636c:	b085      	sub	sp, #20
 801636e:	af00      	add	r7, sp, #0
 8016370:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016372:	2300      	movs	r3, #0
 8016374:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801637a:	e005      	b.n	8016388 <USBD_Desc_GetLen+0x1e>
  {
    len++;
 801637c:	7bfb      	ldrb	r3, [r7, #15]
 801637e:	3301      	adds	r3, #1
 8016380:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016382:	68bb      	ldr	r3, [r7, #8]
 8016384:	3301      	adds	r3, #1
 8016386:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	781b      	ldrb	r3, [r3, #0]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d1f5      	bne.n	801637c <USBD_Desc_GetLen+0x12>
  }

  return len;
 8016390:	7bfb      	ldrb	r3, [r7, #15]
}
 8016392:	4618      	mov	r0, r3
 8016394:	3714      	adds	r7, #20
 8016396:	46bd      	mov	sp, r7
 8016398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639c:	4770      	bx	lr
	...

080163a0 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b088      	sub	sp, #32
 80163a4:	af02      	add	r7, sp, #8
 80163a6:	60f8      	str	r0, [r7, #12]
 80163a8:	60b9      	str	r1, [r7, #8]
 80163aa:	607a      	str	r2, [r7, #4]
 80163ac:	70fb      	strb	r3, [r7, #3]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 80163ae:	2300      	movs	r3, #0
 80163b0:	75fb      	strb	r3, [r7, #23]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	2200      	movs	r2, #0
 80163b6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  pdev->CurrDevDescSz = 0U;
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	2200      	movs	r2, #0
 80163be:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 80163c2:	4a73      	ldr	r2, [pc, #460]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 80163c4:	68bb      	ldr	r3, [r7, #8]
 80163c6:	6013      	str	r3, [r2, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 80163c8:	4b71      	ldr	r3, [pc, #452]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	2212      	movs	r2, #18
 80163ce:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 80163d0:	4b6f      	ldr	r3, [pc, #444]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	2201      	movs	r2, #1
 80163d6:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 80163d8:	4b6d      	ldr	r3, [pc, #436]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	2200      	movs	r2, #0
 80163de:	709a      	strb	r2, [r3, #2]
 80163e0:	2200      	movs	r2, #0
 80163e2:	f042 0202 	orr.w	r2, r2, #2
 80163e6:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 80163e8:	4b69      	ldr	r3, [pc, #420]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	2200      	movs	r2, #0
 80163ee:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 80163f0:	4b67      	ldr	r3, [pc, #412]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	2200      	movs	r2, #0
 80163f6:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 80163f8:	4b65      	ldr	r3, [pc, #404]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	2200      	movs	r2, #0
 80163fe:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 8016400:	4b63      	ldr	r3, [pc, #396]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	2240      	movs	r2, #64	; 0x40
 8016406:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 8016408:	4b61      	ldr	r3, [pc, #388]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	2200      	movs	r2, #0
 801640e:	f062 027c 	orn	r2, r2, #124	; 0x7c
 8016412:	721a      	strb	r2, [r3, #8]
 8016414:	2200      	movs	r2, #0
 8016416:	f042 0204 	orr.w	r2, r2, #4
 801641a:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 801641c:	4b5c      	ldr	r3, [pc, #368]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	2200      	movs	r2, #0
 8016422:	f042 0210 	orr.w	r2, r2, #16
 8016426:	729a      	strb	r2, [r3, #10]
 8016428:	2200      	movs	r2, #0
 801642a:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 801642e:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 8016430:	4b57      	ldr	r3, [pc, #348]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	2200      	movs	r2, #0
 8016436:	731a      	strb	r2, [r3, #12]
 8016438:	2200      	movs	r2, #0
 801643a:	f042 0202 	orr.w	r2, r2, #2
 801643e:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 8016440:	4b53      	ldr	r3, [pc, #332]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	2201      	movs	r2, #1
 8016446:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 8016448:	4b51      	ldr	r3, [pc, #324]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2202      	movs	r2, #2
 801644e:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8016450:	4b4f      	ldr	r3, [pc, #316]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	2203      	movs	r2, #3
 8016456:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 8016458:	4b4d      	ldr	r3, [pc, #308]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	2201      	movs	r2, #1
 801645e:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8016466:	f103 0212 	add.w	r2, r3, #18
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 8016470:	78fb      	ldrb	r3, [r7, #3]
 8016472:	2b01      	cmp	r3, #1
 8016474:	d162      	bne.n	801653c <USBD_Device_Framework_Builder+0x19c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801647c:	68ba      	ldr	r2, [r7, #8]
 801647e:	4413      	add	r3, r2
 8016480:	4a44      	ldr	r2, [pc, #272]	; (8016594 <USBD_Device_Framework_Builder+0x1f4>)
 8016482:	6013      	str	r3, [r2, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 8016484:	4b43      	ldr	r3, [pc, #268]	; (8016594 <USBD_Device_Framework_Builder+0x1f4>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	220a      	movs	r2, #10
 801648a:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 801648c:	4b41      	ldr	r3, [pc, #260]	; (8016594 <USBD_Device_Framework_Builder+0x1f4>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	2206      	movs	r2, #6
 8016492:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 8016494:	4b3f      	ldr	r3, [pc, #252]	; (8016594 <USBD_Device_Framework_Builder+0x1f4>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	2200      	movs	r2, #0
 801649a:	709a      	strb	r2, [r3, #2]
 801649c:	2200      	movs	r2, #0
 801649e:	f042 0202 	orr.w	r2, r2, #2
 80164a2:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 80164a4:	4b3b      	ldr	r3, [pc, #236]	; (8016594 <USBD_Device_Framework_Builder+0x1f4>)
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	2200      	movs	r2, #0
 80164aa:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 80164ac:	4b39      	ldr	r3, [pc, #228]	; (8016594 <USBD_Device_Framework_Builder+0x1f4>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	2200      	movs	r2, #0
 80164b2:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 80164b4:	4b37      	ldr	r3, [pc, #220]	; (8016594 <USBD_Device_Framework_Builder+0x1f4>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	2200      	movs	r2, #0
 80164ba:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 80164bc:	4b35      	ldr	r3, [pc, #212]	; (8016594 <USBD_Device_Framework_Builder+0x1f4>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	2240      	movs	r2, #64	; 0x40
 80164c2:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 80164c4:	4b33      	ldr	r3, [pc, #204]	; (8016594 <USBD_Device_Framework_Builder+0x1f4>)
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	2201      	movs	r2, #1
 80164ca:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 80164cc:	4b31      	ldr	r3, [pc, #196]	; (8016594 <USBD_Device_Framework_Builder+0x1f4>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	2200      	movs	r2, #0
 80164d2:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80164da:	f103 020a 	add.w	r2, r3, #10
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 80164e4:	e02a      	b.n	801653c <USBD_Device_Framework_Builder+0x19c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	685b      	ldr	r3, [r3, #4]
 80164ea:	2b02      	cmp	r3, #2
 80164ec:	d823      	bhi.n	8016536 <USBD_Device_Framework_Builder+0x196>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80164f2:	2b02      	cmp	r3, #2
 80164f4:	d81f      	bhi.n	8016536 <USBD_Device_Framework_Builder+0x196>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 80164f6:	7dfb      	ldrb	r3, [r7, #23]
 80164f8:	687a      	ldr	r2, [r7, #4]
 80164fa:	4413      	add	r3, r2
 80164fc:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d019      	beq.n	8016536 <USBD_Device_Framework_Builder+0x196>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 8016502:	7dfb      	ldrb	r3, [r7, #23]
 8016504:	687a      	ldr	r2, [r7, #4]
 8016506:	4413      	add	r3, r2
      (void)USBD_FrameWork_AddClass(pdev,
 8016508:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
      (void)USBD_FrameWork_AddClass(pdev,
 8016510:	68ba      	ldr	r2, [r7, #8]
 8016512:	4413      	add	r3, r2
 8016514:	78fa      	ldrb	r2, [r7, #3]
 8016516:	9300      	str	r3, [sp, #0]
 8016518:	4613      	mov	r3, r2
 801651a:	2200      	movs	r2, #0
 801651c:	68f8      	ldr	r0, [r7, #12]
 801651e:	f000 f83b 	bl	8016598 <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	685b      	ldr	r3, [r3, #4]
 8016526:	1c5a      	adds	r2, r3, #1
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	689b      	ldr	r3, [r3, #8]
 8016530:	1c5a      	adds	r2, r3, #1
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 8016536:	7dfb      	ldrb	r3, [r7, #23]
 8016538:	3301      	adds	r3, #1
 801653a:	75fb      	strb	r3, [r7, #23]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 801653c:	7dfb      	ldrb	r3, [r7, #23]
 801653e:	2b02      	cmp	r3, #2
 8016540:	d9d1      	bls.n	80164e6 <USBD_Device_Framework_Builder+0x146>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	689b      	ldr	r3, [r3, #8]
 8016546:	2b01      	cmp	r3, #1
 8016548:	d90c      	bls.n	8016564 <USBD_Device_Framework_Builder+0x1c4>
  {
    pDevDesc->bDeviceClass = 0xEF;
 801654a:	4b11      	ldr	r3, [pc, #68]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	22ef      	movs	r2, #239	; 0xef
 8016550:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 8016552:	4b0f      	ldr	r3, [pc, #60]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	2202      	movs	r2, #2
 8016558:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 801655a:	4b0d      	ldr	r3, [pc, #52]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	2201      	movs	r2, #1
 8016560:	719a      	strb	r2, [r3, #6]
 8016562:	e00f      	b.n	8016584 <USBD_Device_Framework_Builder+0x1e4>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	781b      	ldrb	r3, [r3, #0]
 8016568:	2b02      	cmp	r3, #2
 801656a:	d10b      	bne.n	8016584 <USBD_Device_Framework_Builder+0x1e4>
    {
      pDevDesc->bDeviceClass = 0x02;
 801656c:	4b08      	ldr	r3, [pc, #32]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	2202      	movs	r2, #2
 8016572:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 8016574:	4b06      	ldr	r3, [pc, #24]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	2202      	movs	r2, #2
 801657a:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 801657c:	4b04      	ldr	r3, [pc, #16]	; (8016590 <USBD_Device_Framework_Builder+0x1f0>)
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	2200      	movs	r2, #0
 8016582:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 8016584:	68bb      	ldr	r3, [r7, #8]
}
 8016586:	4618      	mov	r0, r3
 8016588:	3718      	adds	r7, #24
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}
 801658e:	bf00      	nop
 8016590:	2000565c 	.word	0x2000565c
 8016594:	20005660 	.word	0x20005660

08016598 <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b082      	sub	sp, #8
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
 80165a0:	4608      	mov	r0, r1
 80165a2:	4611      	mov	r1, r2
 80165a4:	461a      	mov	r2, r3
 80165a6:	4603      	mov	r3, r0
 80165a8:	70fb      	strb	r3, [r7, #3]
 80165aa:	460b      	mov	r3, r1
 80165ac:	70bb      	strb	r3, [r7, #2]
 80165ae:	4613      	mov	r3, r2
 80165b0:	707b      	strb	r3, [r7, #1]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	685b      	ldr	r3, [r3, #4]
 80165b6:	2b02      	cmp	r3, #2
 80165b8:	d834      	bhi.n	8016624 <USBD_FrameWork_AddClass+0x8c>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	687a      	ldr	r2, [r7, #4]
 80165c0:	215c      	movs	r1, #92	; 0x5c
 80165c2:	fb01 f303 	mul.w	r3, r1, r3
 80165c6:	4413      	add	r3, r2
 80165c8:	3318      	adds	r3, #24
 80165ca:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d129      	bne.n	8016624 <USBD_FrameWork_AddClass+0x8c>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	685b      	ldr	r3, [r3, #4]
 80165d4:	687a      	ldr	r2, [r7, #4]
 80165d6:	6852      	ldr	r2, [r2, #4]
 80165d8:	6879      	ldr	r1, [r7, #4]
 80165da:	205c      	movs	r0, #92	; 0x5c
 80165dc:	fb00 f303 	mul.w	r3, r0, r3
 80165e0:	440b      	add	r3, r1
 80165e2:	3310      	adds	r3, #16
 80165e4:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	685b      	ldr	r3, [r3, #4]
 80165ea:	687a      	ldr	r2, [r7, #4]
 80165ec:	215c      	movs	r1, #92	; 0x5c
 80165ee:	fb01 f303 	mul.w	r3, r1, r3
 80165f2:	4413      	add	r3, r2
 80165f4:	3318      	adds	r3, #24
 80165f6:	2201      	movs	r2, #1
 80165f8:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	685b      	ldr	r3, [r3, #4]
 80165fe:	687a      	ldr	r2, [r7, #4]
 8016600:	215c      	movs	r1, #92	; 0x5c
 8016602:	fb01 f303 	mul.w	r3, r1, r3
 8016606:	4413      	add	r3, r2
 8016608:	330c      	adds	r3, #12
 801660a:	78fa      	ldrb	r2, [r7, #3]
 801660c:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 801660e:	787b      	ldrb	r3, [r7, #1]
 8016610:	693a      	ldr	r2, [r7, #16]
 8016612:	4619      	mov	r1, r3
 8016614:	6878      	ldr	r0, [r7, #4]
 8016616:	f000 f80a 	bl	801662e <USBD_FrameWork_AddToConfDesc>
 801661a:	4603      	mov	r3, r0
 801661c:	2b00      	cmp	r3, #0
 801661e:	d001      	beq.n	8016624 <USBD_FrameWork_AddClass+0x8c>
    {
      return UX_ERROR;
 8016620:	23ff      	movs	r3, #255	; 0xff
 8016622:	e000      	b.n	8016626 <USBD_FrameWork_AddClass+0x8e>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 8016624:	2300      	movs	r3, #0
}
 8016626:	4618      	mov	r0, r3
 8016628:	3708      	adds	r7, #8
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}

0801662e <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 801662e:	b580      	push	{r7, lr}
 8016630:	b086      	sub	sp, #24
 8016632:	af00      	add	r7, sp, #0
 8016634:	60f8      	str	r0, [r7, #12]
 8016636:	460b      	mov	r3, r1
 8016638:	607a      	str	r2, [r7, #4]
 801663a:	72fb      	strb	r3, [r7, #11]
  uint8_t interface = 0U;
 801663c:	2300      	movs	r3, #0
 801663e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	7afa      	ldrb	r2, [r7, #11]
 8016644:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	685b      	ldr	r3, [r3, #4]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d107      	bne.n	801665e <USBD_FrameWork_AddToConfDesc+0x30>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 801664e:	687a      	ldr	r2, [r7, #4]
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8016656:	4619      	mov	r1, r3
 8016658:	4610      	mov	r0, r2
 801665a:	f000 f8a1 	bl	80167a0 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	685b      	ldr	r3, [r3, #4]
 8016662:	68fa      	ldr	r2, [r7, #12]
 8016664:	215c      	movs	r1, #92	; 0x5c
 8016666:	fb01 f303 	mul.w	r3, r1, r3
 801666a:	4413      	add	r3, r2
 801666c:	330c      	adds	r3, #12
 801666e:	781b      	ldrb	r3, [r3, #0]
 8016670:	2b02      	cmp	r3, #2
 8016672:	d162      	bne.n	801673a <USBD_FrameWork_AddToConfDesc+0x10c>
#if USBD_CDC_ACM_CLASS_ACTIVATED == 1

    case CLASS_TYPE_CDC_ACM:

      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 8016674:	68f8      	ldr	r0, [r7, #12]
 8016676:	f000 f866 	bl	8016746 <USBD_FrameWork_FindFreeIFNbr>
 801667a:	4603      	mov	r3, r0
 801667c:	75fb      	strb	r3, [r7, #23]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	685b      	ldr	r3, [r3, #4]
 8016682:	68fa      	ldr	r2, [r7, #12]
 8016684:	215c      	movs	r1, #92	; 0x5c
 8016686:	fb01 f303 	mul.w	r3, r1, r3
 801668a:	4413      	add	r3, r2
 801668c:	3320      	adds	r3, #32
 801668e:	2202      	movs	r2, #2
 8016690:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	685b      	ldr	r3, [r3, #4]
 8016696:	68fa      	ldr	r2, [r7, #12]
 8016698:	215c      	movs	r1, #92	; 0x5c
 801669a:	fb01 f303 	mul.w	r3, r1, r3
 801669e:	4413      	add	r3, r2
 80166a0:	335a      	adds	r3, #90	; 0x5a
 80166a2:	7dfa      	ldrb	r2, [r7, #23]
 80166a4:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	685b      	ldr	r3, [r3, #4]
 80166aa:	7dfa      	ldrb	r2, [r7, #23]
 80166ac:	3201      	adds	r2, #1
 80166ae:	b2d0      	uxtb	r0, r2
 80166b0:	68fa      	ldr	r2, [r7, #12]
 80166b2:	215c      	movs	r1, #92	; 0x5c
 80166b4:	fb01 f303 	mul.w	r3, r1, r3
 80166b8:	4413      	add	r3, r2
 80166ba:	335b      	adds	r3, #91	; 0x5b
 80166bc:	4602      	mov	r2, r0
 80166be:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	68fa      	ldr	r2, [r7, #12]
 80166c6:	215c      	movs	r1, #92	; 0x5c
 80166c8:	fb01 f303 	mul.w	r3, r1, r3
 80166cc:	4413      	add	r3, r2
 80166ce:	331c      	adds	r3, #28
 80166d0:	2203      	movs	r2, #3
 80166d2:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoints */
      if (Speed == USBD_HIGH_SPEED)
 80166d4:	7afb      	ldrb	r3, [r7, #11]
 80166d6:	2b01      	cmp	r3, #1
 80166d8:	d114      	bne.n	8016704 <USBD_FrameWork_AddToConfDesc+0xd6>
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 80166da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80166de:	2202      	movs	r2, #2
 80166e0:	2101      	movs	r1, #1
 80166e2:	68f8      	ldr	r0, [r7, #12]
 80166e4:	f000 f889 	bl	80167fa <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_HS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 80166e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80166ec:	2202      	movs	r2, #2
 80166ee:	2181      	movs	r1, #129	; 0x81
 80166f0:	68f8      	ldr	r0, [r7, #12]
 80166f2:	f000 f882 	bl	80167fa <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_HS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 80166f6:	2308      	movs	r3, #8
 80166f8:	2203      	movs	r2, #3
 80166fa:	2182      	movs	r1, #130	; 0x82
 80166fc:	68f8      	ldr	r0, [r7, #12]
 80166fe:	f000 f87c 	bl	80167fa <USBD_FrameWork_AssignEp>
 8016702:	e011      	b.n	8016728 <USBD_FrameWork_AddToConfDesc+0xfa>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_HS_MPS);
      }
      else
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 8016704:	2340      	movs	r3, #64	; 0x40
 8016706:	2202      	movs	r2, #2
 8016708:	2101      	movs	r1, #1
 801670a:	68f8      	ldr	r0, [r7, #12]
 801670c:	f000 f875 	bl	80167fa <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_FS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 8016710:	2340      	movs	r3, #64	; 0x40
 8016712:	2202      	movs	r2, #2
 8016714:	2181      	movs	r1, #129	; 0x81
 8016716:	68f8      	ldr	r0, [r7, #12]
 8016718:	f000 f86f 	bl	80167fa <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_FS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 801671c:	2308      	movs	r3, #8
 801671e:	2203      	movs	r2, #3
 8016720:	2182      	movs	r1, #130	; 0x82
 8016722:	68f8      	ldr	r0, [r7, #12]
 8016724:	f000 f869 	bl	80167fa <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8016728:	6879      	ldr	r1, [r7, #4]
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8016730:	461a      	mov	r2, r3
 8016732:	68f8      	ldr	r0, [r7, #12]
 8016734:	f000 f8d4 	bl	80168e0 <USBD_FrameWork_CDCDesc>

      break;
 8016738:	e000      	b.n	801673c <USBD_FrameWork_AddToConfDesc+0x10e>

    default:
      /* USER CODE FrameWork_AddToConfDesc_2 */

      /* USER CODE FrameWork_AddToConfDesc_2 */
      break;
 801673a:	bf00      	nop
  }

  return UX_SUCCESS;
 801673c:	2300      	movs	r3, #0
}
 801673e:	4618      	mov	r0, r3
 8016740:	3718      	adds	r7, #24
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}

08016746 <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 8016746:	b480      	push	{r7}
 8016748:	b087      	sub	sp, #28
 801674a:	af00      	add	r7, sp, #0
 801674c:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 801674e:	2300      	movs	r3, #0
 8016750:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8016752:	2300      	movs	r3, #0
 8016754:	613b      	str	r3, [r7, #16]
 8016756:	e016      	b.n	8016786 <USBD_FrameWork_FindFreeIFNbr+0x40>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8016758:	2300      	movs	r3, #0
 801675a:	60fb      	str	r3, [r7, #12]
 801675c:	e005      	b.n	801676a <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	3301      	adds	r3, #1
 8016762:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	3301      	adds	r3, #1
 8016768:	60fb      	str	r3, [r7, #12]
 801676a:	687a      	ldr	r2, [r7, #4]
 801676c:	693b      	ldr	r3, [r7, #16]
 801676e:	215c      	movs	r1, #92	; 0x5c
 8016770:	fb01 f303 	mul.w	r3, r1, r3
 8016774:	4413      	add	r3, r2
 8016776:	3320      	adds	r3, #32
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	68fa      	ldr	r2, [r7, #12]
 801677c:	429a      	cmp	r2, r3
 801677e:	d3ee      	bcc.n	801675e <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8016780:	693b      	ldr	r3, [r7, #16]
 8016782:	3301      	adds	r3, #1
 8016784:	613b      	str	r3, [r7, #16]
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	689b      	ldr	r3, [r3, #8]
 801678a:	693a      	ldr	r2, [r7, #16]
 801678c:	429a      	cmp	r2, r3
 801678e:	d3e3      	bcc.n	8016758 <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 8016790:	697b      	ldr	r3, [r7, #20]
 8016792:	b2db      	uxtb	r3, r3
}
 8016794:	4618      	mov	r0, r3
 8016796:	371c      	adds	r7, #28
 8016798:	46bd      	mov	sp, r7
 801679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679e:	4770      	bx	lr

080167a0 <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 80167a0:	b480      	push	{r7}
 80167a2:	b085      	sub	sp, #20
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
 80167a8:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	2209      	movs	r2, #9
 80167b2:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	2202      	movs	r2, #2
 80167b8:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	2200      	movs	r2, #0
 80167be:	709a      	strb	r2, [r3, #2]
 80167c0:	2200      	movs	r2, #0
 80167c2:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	2200      	movs	r2, #0
 80167c8:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	2201      	movs	r2, #1
 80167ce:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	2200      	movs	r2, #0
 80167d4:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	22c0      	movs	r2, #192	; 0xc0
 80167da:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	2219      	movs	r2, #25
 80167e0:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 80167e2:	683b      	ldr	r3, [r7, #0]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f103 0209 	add.w	r2, r3, #9
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	601a      	str	r2, [r3, #0]
}
 80167ee:	bf00      	nop
 80167f0:	3714      	adds	r7, #20
 80167f2:	46bd      	mov	sp, r7
 80167f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f8:	4770      	bx	lr

080167fa <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 80167fa:	b490      	push	{r4, r7}
 80167fc:	b086      	sub	sp, #24
 80167fe:	af00      	add	r7, sp, #0
 8016800:	60f8      	str	r0, [r7, #12]
 8016802:	607b      	str	r3, [r7, #4]
 8016804:	460b      	mov	r3, r1
 8016806:	72fb      	strb	r3, [r7, #11]
 8016808:	4613      	mov	r3, r2
 801680a:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 801680c:	2300      	movs	r3, #0
 801680e:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8016810:	e002      	b.n	8016818 <USBD_FrameWork_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8016812:	697b      	ldr	r3, [r7, #20]
 8016814:	3301      	adds	r3, #1
 8016816:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	685b      	ldr	r3, [r3, #4]
 801681c:	68fa      	ldr	r2, [r7, #12]
 801681e:	215c      	movs	r1, #92	; 0x5c
 8016820:	fb01 f303 	mul.w	r3, r1, r3
 8016824:	4413      	add	r3, r2
 8016826:	331c      	adds	r3, #28
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	697a      	ldr	r2, [r7, #20]
 801682c:	429a      	cmp	r2, r3
 801682e:	d210      	bcs.n	8016852 <USBD_FrameWork_AssignEp+0x58>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	6858      	ldr	r0, [r3, #4]
 8016834:	68f9      	ldr	r1, [r7, #12]
 8016836:	697a      	ldr	r2, [r7, #20]
 8016838:	4613      	mov	r3, r2
 801683a:	005b      	lsls	r3, r3, #1
 801683c:	4413      	add	r3, r2
 801683e:	005b      	lsls	r3, r3, #1
 8016840:	225c      	movs	r2, #92	; 0x5c
 8016842:	fb00 f202 	mul.w	r2, r0, r2
 8016846:	4413      	add	r3, r2
 8016848:	440b      	add	r3, r1
 801684a:	3328      	adds	r3, #40	; 0x28
 801684c:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801684e:	2b00      	cmp	r3, #0
 8016850:	d1df      	bne.n	8016812 <USBD_FrameWork_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	6858      	ldr	r0, [r3, #4]
 8016856:	68f9      	ldr	r1, [r7, #12]
 8016858:	697a      	ldr	r2, [r7, #20]
 801685a:	4613      	mov	r3, r2
 801685c:	005b      	lsls	r3, r3, #1
 801685e:	4413      	add	r3, r2
 8016860:	005b      	lsls	r3, r3, #1
 8016862:	225c      	movs	r2, #92	; 0x5c
 8016864:	fb00 f202 	mul.w	r2, r0, r2
 8016868:	4413      	add	r3, r2
 801686a:	440b      	add	r3, r1
 801686c:	3324      	adds	r3, #36	; 0x24
 801686e:	7afa      	ldrb	r2, [r7, #11]
 8016870:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	6858      	ldr	r0, [r3, #4]
 8016876:	68f9      	ldr	r1, [r7, #12]
 8016878:	697a      	ldr	r2, [r7, #20]
 801687a:	4613      	mov	r3, r2
 801687c:	005b      	lsls	r3, r3, #1
 801687e:	4413      	add	r3, r2
 8016880:	005b      	lsls	r3, r3, #1
 8016882:	225c      	movs	r2, #92	; 0x5c
 8016884:	fb00 f202 	mul.w	r2, r0, r2
 8016888:	4413      	add	r3, r2
 801688a:	440b      	add	r3, r1
 801688c:	3325      	adds	r3, #37	; 0x25
 801688e:	7aba      	ldrb	r2, [r7, #10]
 8016890:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	6858      	ldr	r0, [r3, #4]
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	b29c      	uxth	r4, r3
 801689a:	68f9      	ldr	r1, [r7, #12]
 801689c:	697a      	ldr	r2, [r7, #20]
 801689e:	4613      	mov	r3, r2
 80168a0:	005b      	lsls	r3, r3, #1
 80168a2:	4413      	add	r3, r2
 80168a4:	005b      	lsls	r3, r3, #1
 80168a6:	225c      	movs	r2, #92	; 0x5c
 80168a8:	fb00 f202 	mul.w	r2, r0, r2
 80168ac:	4413      	add	r3, r2
 80168ae:	440b      	add	r3, r1
 80168b0:	3326      	adds	r3, #38	; 0x26
 80168b2:	4622      	mov	r2, r4
 80168b4:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	6858      	ldr	r0, [r3, #4]
 80168ba:	68f9      	ldr	r1, [r7, #12]
 80168bc:	697a      	ldr	r2, [r7, #20]
 80168be:	4613      	mov	r3, r2
 80168c0:	005b      	lsls	r3, r3, #1
 80168c2:	4413      	add	r3, r2
 80168c4:	005b      	lsls	r3, r3, #1
 80168c6:	225c      	movs	r2, #92	; 0x5c
 80168c8:	fb00 f202 	mul.w	r2, r0, r2
 80168cc:	4413      	add	r3, r2
 80168ce:	440b      	add	r3, r1
 80168d0:	3328      	adds	r3, #40	; 0x28
 80168d2:	2201      	movs	r2, #1
 80168d4:	701a      	strb	r2, [r3, #0]
}
 80168d6:	bf00      	nop
 80168d8:	3718      	adds	r7, #24
 80168da:	46bd      	mov	sp, r7
 80168dc:	bc90      	pop	{r4, r7}
 80168de:	4770      	bx	lr

080168e0 <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 80168e0:	b480      	push	{r7}
 80168e2:	b085      	sub	sp, #20
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	60f8      	str	r0, [r7, #12]
 80168e8:	60b9      	str	r1, [r7, #8]
 80168ea:	607a      	str	r2, [r7, #4]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	681a      	ldr	r2, [r3, #0]
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	4413      	add	r3, r2
 80168f4:	461a      	mov	r2, r3
 80168f6:	4b99      	ldr	r3, [pc, #612]	; (8016b5c <USBD_FrameWork_CDCDesc+0x27c>)
 80168f8:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 80168fa:	4b98      	ldr	r3, [pc, #608]	; (8016b5c <USBD_FrameWork_CDCDesc+0x27c>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	2208      	movs	r2, #8
 8016900:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 8016902:	4b96      	ldr	r3, [pc, #600]	; (8016b5c <USBD_FrameWork_CDCDesc+0x27c>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	220b      	movs	r2, #11
 8016908:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	685a      	ldr	r2, [r3, #4]
 801690e:	4b93      	ldr	r3, [pc, #588]	; (8016b5c <USBD_FrameWork_CDCDesc+0x27c>)
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	68f9      	ldr	r1, [r7, #12]
 8016914:	205c      	movs	r0, #92	; 0x5c
 8016916:	fb00 f202 	mul.w	r2, r0, r2
 801691a:	440a      	add	r2, r1
 801691c:	325a      	adds	r2, #90	; 0x5a
 801691e:	7812      	ldrb	r2, [r2, #0]
 8016920:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
 8016922:	4b8e      	ldr	r3, [pc, #568]	; (8016b5c <USBD_FrameWork_CDCDesc+0x27c>)
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	2202      	movs	r2, #2
 8016928:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass = 0x02U;
 801692a:	4b8c      	ldr	r3, [pc, #560]	; (8016b5c <USBD_FrameWork_CDCDesc+0x27c>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	2202      	movs	r2, #2
 8016930:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass = 0x02U;
 8016932:	4b8a      	ldr	r3, [pc, #552]	; (8016b5c <USBD_FrameWork_CDCDesc+0x27c>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	2202      	movs	r2, #2
 8016938:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol = 0x01U;
 801693a:	4b88      	ldr	r3, [pc, #544]	; (8016b5c <USBD_FrameWork_CDCDesc+0x27c>)
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	2201      	movs	r2, #1
 8016940:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction = 0; /* String Index */
 8016942:	4b86      	ldr	r3, [pc, #536]	; (8016b5c <USBD_FrameWork_CDCDesc+0x27c>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	2200      	movs	r2, #0
 8016948:	71da      	strb	r2, [r3, #7]
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	f103 0208 	add.w	r2, r3, #8
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	681a      	ldr	r2, [r3, #0]
 801695a:	68bb      	ldr	r3, [r7, #8]
 801695c:	4413      	add	r3, r2
 801695e:	461a      	mov	r2, r3
 8016960:	4b7f      	ldr	r3, [pc, #508]	; (8016b60 <USBD_FrameWork_CDCDesc+0x280>)
 8016962:	601a      	str	r2, [r3, #0]
 8016964:	4b7e      	ldr	r3, [pc, #504]	; (8016b60 <USBD_FrameWork_CDCDesc+0x280>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	2209      	movs	r2, #9
 801696a:	701a      	strb	r2, [r3, #0]
 801696c:	4b7c      	ldr	r3, [pc, #496]	; (8016b60 <USBD_FrameWork_CDCDesc+0x280>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	2204      	movs	r2, #4
 8016972:	705a      	strb	r2, [r3, #1]
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	685a      	ldr	r2, [r3, #4]
 8016978:	4b79      	ldr	r3, [pc, #484]	; (8016b60 <USBD_FrameWork_CDCDesc+0x280>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	68f9      	ldr	r1, [r7, #12]
 801697e:	205c      	movs	r0, #92	; 0x5c
 8016980:	fb00 f202 	mul.w	r2, r0, r2
 8016984:	440a      	add	r2, r1
 8016986:	325a      	adds	r2, #90	; 0x5a
 8016988:	7812      	ldrb	r2, [r2, #0]
 801698a:	709a      	strb	r2, [r3, #2]
 801698c:	4b74      	ldr	r3, [pc, #464]	; (8016b60 <USBD_FrameWork_CDCDesc+0x280>)
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	2200      	movs	r2, #0
 8016992:	70da      	strb	r2, [r3, #3]
 8016994:	4b72      	ldr	r3, [pc, #456]	; (8016b60 <USBD_FrameWork_CDCDesc+0x280>)
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	2201      	movs	r2, #1
 801699a:	711a      	strb	r2, [r3, #4]
 801699c:	4b70      	ldr	r3, [pc, #448]	; (8016b60 <USBD_FrameWork_CDCDesc+0x280>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	2202      	movs	r2, #2
 80169a2:	715a      	strb	r2, [r3, #5]
 80169a4:	4b6e      	ldr	r3, [pc, #440]	; (8016b60 <USBD_FrameWork_CDCDesc+0x280>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	2202      	movs	r2, #2
 80169aa:	719a      	strb	r2, [r3, #6]
 80169ac:	4b6c      	ldr	r3, [pc, #432]	; (8016b60 <USBD_FrameWork_CDCDesc+0x280>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	2201      	movs	r2, #1
 80169b2:	71da      	strb	r2, [r3, #7]
 80169b4:	4b6a      	ldr	r3, [pc, #424]	; (8016b60 <USBD_FrameWork_CDCDesc+0x280>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	2200      	movs	r2, #0
 80169ba:	721a      	strb	r2, [r3, #8]
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	f103 0209 	add.w	r2, r3, #9
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	601a      	str	r2, [r3, #0]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	681a      	ldr	r2, [r3, #0]
 80169cc:	68bb      	ldr	r3, [r7, #8]
 80169ce:	4413      	add	r3, r2
 80169d0:	461a      	mov	r2, r3
 80169d2:	4b64      	ldr	r3, [pc, #400]	; (8016b64 <USBD_FrameWork_CDCDesc+0x284>)
 80169d4:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 80169d6:	4b63      	ldr	r3, [pc, #396]	; (8016b64 <USBD_FrameWork_CDCDesc+0x284>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	2205      	movs	r2, #5
 80169dc:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 80169de:	4b61      	ldr	r3, [pc, #388]	; (8016b64 <USBD_FrameWork_CDCDesc+0x284>)
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	2224      	movs	r2, #36	; 0x24
 80169e4:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 80169e6:	4b5f      	ldr	r3, [pc, #380]	; (8016b64 <USBD_FrameWork_CDCDesc+0x284>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	2200      	movs	r2, #0
 80169ec:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 80169ee:	4b5d      	ldr	r3, [pc, #372]	; (8016b64 <USBD_FrameWork_CDCDesc+0x284>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	2200      	movs	r2, #0
 80169f4:	f042 0210 	orr.w	r2, r2, #16
 80169f8:	70da      	strb	r2, [r3, #3]
 80169fa:	2200      	movs	r2, #0
 80169fc:	f042 0201 	orr.w	r2, r2, #1
 8016a00:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	1d5a      	adds	r2, r3, #5
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	681a      	ldr	r2, [r3, #0]
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	4413      	add	r3, r2
 8016a14:	461a      	mov	r2, r3
 8016a16:	4b54      	ldr	r3, [pc, #336]	; (8016b68 <USBD_FrameWork_CDCDesc+0x288>)
 8016a18:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 8016a1a:	4b53      	ldr	r3, [pc, #332]	; (8016b68 <USBD_FrameWork_CDCDesc+0x288>)
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	2205      	movs	r2, #5
 8016a20:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 8016a22:	4b51      	ldr	r3, [pc, #324]	; (8016b68 <USBD_FrameWork_CDCDesc+0x288>)
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	2224      	movs	r2, #36	; 0x24
 8016a28:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 8016a2a:	4b4f      	ldr	r3, [pc, #316]	; (8016b68 <USBD_FrameWork_CDCDesc+0x288>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	2201      	movs	r2, #1
 8016a30:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 8016a32:	4b4d      	ldr	r3, [pc, #308]	; (8016b68 <USBD_FrameWork_CDCDesc+0x288>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	2200      	movs	r2, #0
 8016a38:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	685a      	ldr	r2, [r3, #4]
 8016a3e:	4b4a      	ldr	r3, [pc, #296]	; (8016b68 <USBD_FrameWork_CDCDesc+0x288>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	68f9      	ldr	r1, [r7, #12]
 8016a44:	205c      	movs	r0, #92	; 0x5c
 8016a46:	fb00 f202 	mul.w	r2, r0, r2
 8016a4a:	440a      	add	r2, r1
 8016a4c:	325b      	adds	r2, #91	; 0x5b
 8016a4e:	7812      	ldrb	r2, [r2, #0]
 8016a50:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	1d5a      	adds	r2, r3, #5
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	681a      	ldr	r2, [r3, #0]
 8016a60:	68bb      	ldr	r3, [r7, #8]
 8016a62:	4413      	add	r3, r2
 8016a64:	461a      	mov	r2, r3
 8016a66:	4b41      	ldr	r3, [pc, #260]	; (8016b6c <USBD_FrameWork_CDCDesc+0x28c>)
 8016a68:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 8016a6a:	4b40      	ldr	r3, [pc, #256]	; (8016b6c <USBD_FrameWork_CDCDesc+0x28c>)
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	2204      	movs	r2, #4
 8016a70:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 8016a72:	4b3e      	ldr	r3, [pc, #248]	; (8016b6c <USBD_FrameWork_CDCDesc+0x28c>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	2224      	movs	r2, #36	; 0x24
 8016a78:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 8016a7a:	4b3c      	ldr	r3, [pc, #240]	; (8016b6c <USBD_FrameWork_CDCDesc+0x28c>)
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	2202      	movs	r2, #2
 8016a80:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02;
 8016a82:	4b3a      	ldr	r3, [pc, #232]	; (8016b6c <USBD_FrameWork_CDCDesc+0x28c>)
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	2202      	movs	r2, #2
 8016a88:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	1d1a      	adds	r2, r3, #4
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	681a      	ldr	r2, [r3, #0]
 8016a98:	68bb      	ldr	r3, [r7, #8]
 8016a9a:	4413      	add	r3, r2
 8016a9c:	461a      	mov	r2, r3
 8016a9e:	4b34      	ldr	r3, [pc, #208]	; (8016b70 <USBD_FrameWork_CDCDesc+0x290>)
 8016aa0:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 8016aa2:	4b33      	ldr	r3, [pc, #204]	; (8016b70 <USBD_FrameWork_CDCDesc+0x290>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	2205      	movs	r2, #5
 8016aa8:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 8016aaa:	4b31      	ldr	r3, [pc, #196]	; (8016b70 <USBD_FrameWork_CDCDesc+0x290>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	2224      	movs	r2, #36	; 0x24
 8016ab0:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 8016ab2:	4b2f      	ldr	r3, [pc, #188]	; (8016b70 <USBD_FrameWork_CDCDesc+0x290>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	2206      	movs	r2, #6
 8016ab8:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	685a      	ldr	r2, [r3, #4]
 8016abe:	4b2c      	ldr	r3, [pc, #176]	; (8016b70 <USBD_FrameWork_CDCDesc+0x290>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	68f9      	ldr	r1, [r7, #12]
 8016ac4:	205c      	movs	r0, #92	; 0x5c
 8016ac6:	fb00 f202 	mul.w	r2, r0, r2
 8016aca:	440a      	add	r2, r1
 8016acc:	325a      	adds	r2, #90	; 0x5a
 8016ace:	7812      	ldrb	r2, [r2, #0]
 8016ad0:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	685a      	ldr	r2, [r3, #4]
 8016ad6:	4b26      	ldr	r3, [pc, #152]	; (8016b70 <USBD_FrameWork_CDCDesc+0x290>)
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	68f9      	ldr	r1, [r7, #12]
 8016adc:	205c      	movs	r0, #92	; 0x5c
 8016ade:	fb00 f202 	mul.w	r2, r0, r2
 8016ae2:	440a      	add	r2, r1
 8016ae4:	325b      	adds	r2, #91	; 0x5b
 8016ae6:	7812      	ldrb	r2, [r2, #0]
 8016ae8:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	1d5a      	adds	r2, r3, #5
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681a      	ldr	r2, [r3, #0]
 8016af8:	68bb      	ldr	r3, [r7, #8]
 8016afa:	4413      	add	r3, r2
 8016afc:	461a      	mov	r2, r3
 8016afe:	4b1d      	ldr	r3, [pc, #116]	; (8016b74 <USBD_FrameWork_CDCDesc+0x294>)
 8016b00:	601a      	str	r2, [r3, #0]
 8016b02:	4b1c      	ldr	r3, [pc, #112]	; (8016b74 <USBD_FrameWork_CDCDesc+0x294>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	2207      	movs	r2, #7
 8016b08:	701a      	strb	r2, [r3, #0]
 8016b0a:	4b1a      	ldr	r3, [pc, #104]	; (8016b74 <USBD_FrameWork_CDCDesc+0x294>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	2205      	movs	r2, #5
 8016b10:	705a      	strb	r2, [r3, #1]
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	685a      	ldr	r2, [r3, #4]
 8016b16:	4b17      	ldr	r3, [pc, #92]	; (8016b74 <USBD_FrameWork_CDCDesc+0x294>)
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	68f9      	ldr	r1, [r7, #12]
 8016b1c:	205c      	movs	r0, #92	; 0x5c
 8016b1e:	fb00 f202 	mul.w	r2, r0, r2
 8016b22:	440a      	add	r2, r1
 8016b24:	3230      	adds	r2, #48	; 0x30
 8016b26:	7812      	ldrb	r2, [r2, #0]
 8016b28:	709a      	strb	r2, [r3, #2]
 8016b2a:	4b12      	ldr	r3, [pc, #72]	; (8016b74 <USBD_FrameWork_CDCDesc+0x294>)
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	2203      	movs	r2, #3
 8016b30:	70da      	strb	r2, [r3, #3]
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	685a      	ldr	r2, [r3, #4]
 8016b36:	4b0f      	ldr	r3, [pc, #60]	; (8016b74 <USBD_FrameWork_CDCDesc+0x294>)
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	68f9      	ldr	r1, [r7, #12]
 8016b3c:	205c      	movs	r0, #92	; 0x5c
 8016b3e:	fb00 f202 	mul.w	r2, r0, r2
 8016b42:	440a      	add	r2, r1
 8016b44:	3232      	adds	r2, #50	; 0x32
 8016b46:	8812      	ldrh	r2, [r2, #0]
 8016b48:	809a      	strh	r2, [r3, #4]
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	781b      	ldrb	r3, [r3, #0]
 8016b4e:	2b01      	cmp	r3, #1
 8016b50:	d112      	bne.n	8016b78 <USBD_FrameWork_CDCDesc+0x298>
 8016b52:	4b08      	ldr	r3, [pc, #32]	; (8016b74 <USBD_FrameWork_CDCDesc+0x294>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	2205      	movs	r2, #5
 8016b58:	719a      	strb	r2, [r3, #6]
 8016b5a:	e011      	b.n	8016b80 <USBD_FrameWork_CDCDesc+0x2a0>
 8016b5c:	20005664 	.word	0x20005664
 8016b60:	20005668 	.word	0x20005668
 8016b64:	2000566c 	.word	0x2000566c
 8016b68:	20005670 	.word	0x20005670
 8016b6c:	20005674 	.word	0x20005674
 8016b70:	20005678 	.word	0x20005678
 8016b74:	2000567c 	.word	0x2000567c
 8016b78:	4b66      	ldr	r3, [pc, #408]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	2205      	movs	r2, #5
 8016b7e:	719a      	strb	r2, [r3, #6]
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	1dda      	adds	r2, r3, #7
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	601a      	str	r2, [r3, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	681a      	ldr	r2, [r3, #0]
 8016b8e:	68bb      	ldr	r3, [r7, #8]
 8016b90:	4413      	add	r3, r2
 8016b92:	461a      	mov	r2, r3
 8016b94:	4b60      	ldr	r3, [pc, #384]	; (8016d18 <USBD_FrameWork_CDCDesc+0x438>)
 8016b96:	601a      	str	r2, [r3, #0]
 8016b98:	4b5f      	ldr	r3, [pc, #380]	; (8016d18 <USBD_FrameWork_CDCDesc+0x438>)
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	2209      	movs	r2, #9
 8016b9e:	701a      	strb	r2, [r3, #0]
 8016ba0:	4b5d      	ldr	r3, [pc, #372]	; (8016d18 <USBD_FrameWork_CDCDesc+0x438>)
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	2204      	movs	r2, #4
 8016ba6:	705a      	strb	r2, [r3, #1]
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	685a      	ldr	r2, [r3, #4]
 8016bac:	4b5a      	ldr	r3, [pc, #360]	; (8016d18 <USBD_FrameWork_CDCDesc+0x438>)
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	68f9      	ldr	r1, [r7, #12]
 8016bb2:	205c      	movs	r0, #92	; 0x5c
 8016bb4:	fb00 f202 	mul.w	r2, r0, r2
 8016bb8:	440a      	add	r2, r1
 8016bba:	325b      	adds	r2, #91	; 0x5b
 8016bbc:	7812      	ldrb	r2, [r2, #0]
 8016bbe:	709a      	strb	r2, [r3, #2]
 8016bc0:	4b55      	ldr	r3, [pc, #340]	; (8016d18 <USBD_FrameWork_CDCDesc+0x438>)
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	70da      	strb	r2, [r3, #3]
 8016bc8:	4b53      	ldr	r3, [pc, #332]	; (8016d18 <USBD_FrameWork_CDCDesc+0x438>)
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	2202      	movs	r2, #2
 8016bce:	711a      	strb	r2, [r3, #4]
 8016bd0:	4b51      	ldr	r3, [pc, #324]	; (8016d18 <USBD_FrameWork_CDCDesc+0x438>)
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	220a      	movs	r2, #10
 8016bd6:	715a      	strb	r2, [r3, #5]
 8016bd8:	4b4f      	ldr	r3, [pc, #316]	; (8016d18 <USBD_FrameWork_CDCDesc+0x438>)
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	2200      	movs	r2, #0
 8016bde:	719a      	strb	r2, [r3, #6]
 8016be0:	4b4d      	ldr	r3, [pc, #308]	; (8016d18 <USBD_FrameWork_CDCDesc+0x438>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	2200      	movs	r2, #0
 8016be6:	71da      	strb	r2, [r3, #7]
 8016be8:	4b4b      	ldr	r3, [pc, #300]	; (8016d18 <USBD_FrameWork_CDCDesc+0x438>)
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	2200      	movs	r2, #0
 8016bee:	721a      	strb	r2, [r3, #8]
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	f103 0209 	add.w	r2, r3, #9
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	601a      	str	r2, [r3, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	681a      	ldr	r2, [r3, #0]
 8016c00:	68bb      	ldr	r3, [r7, #8]
 8016c02:	4413      	add	r3, r2
 8016c04:	461a      	mov	r2, r3
 8016c06:	4b43      	ldr	r3, [pc, #268]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016c08:	601a      	str	r2, [r3, #0]
 8016c0a:	4b42      	ldr	r3, [pc, #264]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	2207      	movs	r2, #7
 8016c10:	701a      	strb	r2, [r3, #0]
 8016c12:	4b40      	ldr	r3, [pc, #256]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	2205      	movs	r2, #5
 8016c18:	705a      	strb	r2, [r3, #1]
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	685a      	ldr	r2, [r3, #4]
 8016c1e:	4b3d      	ldr	r3, [pc, #244]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	68f9      	ldr	r1, [r7, #12]
 8016c24:	205c      	movs	r0, #92	; 0x5c
 8016c26:	fb00 f202 	mul.w	r2, r0, r2
 8016c2a:	440a      	add	r2, r1
 8016c2c:	3224      	adds	r2, #36	; 0x24
 8016c2e:	7812      	ldrb	r2, [r2, #0]
 8016c30:	709a      	strb	r2, [r3, #2]
 8016c32:	4b38      	ldr	r3, [pc, #224]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	2202      	movs	r2, #2
 8016c38:	70da      	strb	r2, [r3, #3]
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	685a      	ldr	r2, [r3, #4]
 8016c3e:	4b35      	ldr	r3, [pc, #212]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	68f9      	ldr	r1, [r7, #12]
 8016c44:	205c      	movs	r0, #92	; 0x5c
 8016c46:	fb00 f202 	mul.w	r2, r0, r2
 8016c4a:	440a      	add	r2, r1
 8016c4c:	3226      	adds	r2, #38	; 0x26
 8016c4e:	8812      	ldrh	r2, [r2, #0]
 8016c50:	809a      	strh	r2, [r3, #4]
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	781b      	ldrb	r3, [r3, #0]
 8016c56:	2b01      	cmp	r3, #1
 8016c58:	d104      	bne.n	8016c64 <USBD_FrameWork_CDCDesc+0x384>
 8016c5a:	4b2e      	ldr	r3, [pc, #184]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	2200      	movs	r2, #0
 8016c60:	719a      	strb	r2, [r3, #6]
 8016c62:	e003      	b.n	8016c6c <USBD_FrameWork_CDCDesc+0x38c>
 8016c64:	4b2b      	ldr	r3, [pc, #172]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2200      	movs	r2, #0
 8016c6a:	719a      	strb	r2, [r3, #6]
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	1dda      	adds	r2, r3, #7
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0x00U), (0x00U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	681a      	ldr	r2, [r3, #0]
 8016c7a:	68bb      	ldr	r3, [r7, #8]
 8016c7c:	4413      	add	r3, r2
 8016c7e:	461a      	mov	r2, r3
 8016c80:	4b24      	ldr	r3, [pc, #144]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016c82:	601a      	str	r2, [r3, #0]
 8016c84:	4b23      	ldr	r3, [pc, #140]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	2207      	movs	r2, #7
 8016c8a:	701a      	strb	r2, [r3, #0]
 8016c8c:	4b21      	ldr	r3, [pc, #132]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	2205      	movs	r2, #5
 8016c92:	705a      	strb	r2, [r3, #1]
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	685a      	ldr	r2, [r3, #4]
 8016c98:	4b1e      	ldr	r3, [pc, #120]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	68f9      	ldr	r1, [r7, #12]
 8016c9e:	205c      	movs	r0, #92	; 0x5c
 8016ca0:	fb00 f202 	mul.w	r2, r0, r2
 8016ca4:	440a      	add	r2, r1
 8016ca6:	322a      	adds	r2, #42	; 0x2a
 8016ca8:	7812      	ldrb	r2, [r2, #0]
 8016caa:	709a      	strb	r2, [r3, #2]
 8016cac:	4b19      	ldr	r3, [pc, #100]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	2202      	movs	r2, #2
 8016cb2:	70da      	strb	r2, [r3, #3]
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	685a      	ldr	r2, [r3, #4]
 8016cb8:	4b16      	ldr	r3, [pc, #88]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	68f9      	ldr	r1, [r7, #12]
 8016cbe:	205c      	movs	r0, #92	; 0x5c
 8016cc0:	fb00 f202 	mul.w	r2, r0, r2
 8016cc4:	440a      	add	r2, r1
 8016cc6:	322c      	adds	r2, #44	; 0x2c
 8016cc8:	8812      	ldrh	r2, [r2, #0]
 8016cca:	809a      	strh	r2, [r3, #4]
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	781b      	ldrb	r3, [r3, #0]
 8016cd0:	2b01      	cmp	r3, #1
 8016cd2:	d104      	bne.n	8016cde <USBD_FrameWork_CDCDesc+0x3fe>
 8016cd4:	4b0f      	ldr	r3, [pc, #60]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	2200      	movs	r2, #0
 8016cda:	719a      	strb	r2, [r3, #6]
 8016cdc:	e003      	b.n	8016ce6 <USBD_FrameWork_CDCDesc+0x406>
 8016cde:	4b0d      	ldr	r3, [pc, #52]	; (8016d14 <USBD_FrameWork_CDCDesc+0x434>)
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	719a      	strb	r2, [r3, #6]
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	1dda      	adds	r2, r3, #7
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0x00U), (0x00U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 8016cf0:	68bb      	ldr	r3, [r7, #8]
 8016cf2:	791a      	ldrb	r2, [r3, #4]
 8016cf4:	68bb      	ldr	r3, [r7, #8]
 8016cf6:	3202      	adds	r2, #2
 8016cf8:	b2d2      	uxtb	r2, r2
 8016cfa:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	681a      	ldr	r2, [r3, #0]
 8016d00:	68bb      	ldr	r3, [r7, #8]
 8016d02:	b292      	uxth	r2, r2
 8016d04:	805a      	strh	r2, [r3, #2]
}
 8016d06:	bf00      	nop
 8016d08:	3714      	adds	r7, #20
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d10:	4770      	bx	lr
 8016d12:	bf00      	nop
 8016d14:	2000567c 	.word	0x2000567c
 8016d18:	20005668 	.word	0x20005668

08016d1c <memset>:
 8016d1c:	4402      	add	r2, r0
 8016d1e:	4603      	mov	r3, r0
 8016d20:	4293      	cmp	r3, r2
 8016d22:	d100      	bne.n	8016d26 <memset+0xa>
 8016d24:	4770      	bx	lr
 8016d26:	f803 1b01 	strb.w	r1, [r3], #1
 8016d2a:	e7f9      	b.n	8016d20 <memset+0x4>

08016d2c <__libc_init_array>:
 8016d2c:	b570      	push	{r4, r5, r6, lr}
 8016d2e:	4d0d      	ldr	r5, [pc, #52]	; (8016d64 <__libc_init_array+0x38>)
 8016d30:	4c0d      	ldr	r4, [pc, #52]	; (8016d68 <__libc_init_array+0x3c>)
 8016d32:	1b64      	subs	r4, r4, r5
 8016d34:	10a4      	asrs	r4, r4, #2
 8016d36:	2600      	movs	r6, #0
 8016d38:	42a6      	cmp	r6, r4
 8016d3a:	d109      	bne.n	8016d50 <__libc_init_array+0x24>
 8016d3c:	4d0b      	ldr	r5, [pc, #44]	; (8016d6c <__libc_init_array+0x40>)
 8016d3e:	4c0c      	ldr	r4, [pc, #48]	; (8016d70 <__libc_init_array+0x44>)
 8016d40:	f000 f818 	bl	8016d74 <_init>
 8016d44:	1b64      	subs	r4, r4, r5
 8016d46:	10a4      	asrs	r4, r4, #2
 8016d48:	2600      	movs	r6, #0
 8016d4a:	42a6      	cmp	r6, r4
 8016d4c:	d105      	bne.n	8016d5a <__libc_init_array+0x2e>
 8016d4e:	bd70      	pop	{r4, r5, r6, pc}
 8016d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d54:	4798      	blx	r3
 8016d56:	3601      	adds	r6, #1
 8016d58:	e7ee      	b.n	8016d38 <__libc_init_array+0xc>
 8016d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d5e:	4798      	blx	r3
 8016d60:	3601      	adds	r6, #1
 8016d62:	e7f2      	b.n	8016d4a <__libc_init_array+0x1e>
 8016d64:	08016f40 	.word	0x08016f40
 8016d68:	08016f40 	.word	0x08016f40
 8016d6c:	08016f40 	.word	0x08016f40
 8016d70:	08016f44 	.word	0x08016f44

08016d74 <_init>:
 8016d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d76:	bf00      	nop
 8016d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d7a:	bc08      	pop	{r3}
 8016d7c:	469e      	mov	lr, r3
 8016d7e:	4770      	bx	lr

08016d80 <_fini>:
 8016d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d82:	bf00      	nop
 8016d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d86:	bc08      	pop	{r3}
 8016d88:	469e      	mov	lr, r3
 8016d8a:	4770      	bx	lr
